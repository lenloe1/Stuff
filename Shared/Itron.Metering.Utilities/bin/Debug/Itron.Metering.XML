<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Itron.Metering.Utilities</name>
    </assembly>
    <members>
        <member name="T:Itron.Metering.Utilities.ActivityLogEntry">
            <summary>
            Represents a Log Item for the an Activity Log.   The class contains
            the elements that go into an entry of the Activity Log, which 
            are Date/Time, MeterType, UnitID, MeterSerialNumber, Event, and Data. 
            The class contains all functionality needed to add an activity Log 
            item.
            </summary>
            <example>
            The strucure of the activity log is simulated below
            <code>
            ActivityLog
            	Entry
            		DateTime--Tuesday, July 05, 2005 11:36:18 AM--/DateTime
            		MeterType--SENTINEL--/MeterType
            		UnitID--Meter ID 1--/UnitID
            		MeterSerialNumber--123-456-789--/MeterSerialNumber
            		Event--Reconfigure Failed--/Event
            		Data--Custom 1--/Data
            	/Entry
            /ActivityLog
            </code>
            </example>	
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.#ctor(System.String)">
            <summary>
            Constructor - Sets the event time to the current time.  Sets the
            other member variables to their empty values.
            </summary>
            <example>
            <code>
            CEActivityLog x = new CEActivityLog();
            </code>
            </example>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.00 Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.Add">
             <summary>
             Adds an XmlNode to the XmlDocument for the Activity Log.  Gets the 
             application directory from the registry and then opens or creates 
             the Activity Log xml file.  Appends the new entry to the XmlDocument 
             An XmlException is thrown if there is a problem with loading the xml 
             file.  
             </summary>
             <example>
             <code>
             CCustSchedItem x = new CCustSchedItem();
             x.Event = "Reconfigure Failed";
             x.Data = "Custom 1";
             x.MeterType = "SENTINEL";
             x.UnitID = "Meter ID 1";
             x.SerialNumber = "123-456-789";
            
             x.AddItem();
             </code>
             </example>
             <remarks>
             Revision History
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             07/14/05 rrr 7.13.00 N/A	Creation of class 
             04/25/06 mrj 7.30.00        Updated for HH-Pro
             01/15/07 mah 8.00.00 Changed registry access class from CE version
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.EventTime">
            <summary>
            Property to get and set the date and time that the event occurred.
            Returned as a DateTime object
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.EventTime = DateTime.Now;
            DateTime y = x.EventTime;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.MeterType">
            <summary>
            Property that gets and sets the meter type for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.MeterType = "SENTINEL";
            string y = x.MeterType;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.UnitID">
            <summary>
            Property that gets and sets the unit id for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.UnitID = "SENTINEL";
            string y = x.UnitID;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.SerialNumber">
            <summary>
            Property that gets and sets the meter serial number for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.SerialNumber = "SENTINEL";
            string y = x.SerialNumber;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.Event">
             <summary>
             Property that gets and sets the event for the log item.  This 
             property should not be blank when gotten.  If the string is blank
             than the empty string is used and then handled by the xsl when
             ready to display.
             </summary>
             <example>
             <code>
             CCustSchedItem x = new CCustSchedItem();
             x.Event = "Logon Success";
             string y = x.Event;
             </code>
             </example>
             Revision History
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             07/14/05 rrr 7.13.00 N/A	Creation of class
             04/25/06 mrj 7.30.00        Updated for HH-Pro
            
        </member>
        <member name="P:Itron.Metering.Utilities.ActivityLogEntry.Data">
            <summary>
            Property that gets and sets the data for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.data = "Custom Schedule: CYCLE 01";
            string y = x.Data;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class
            04/25/06 mrj 7.30.00        Updated for HH-Pro
              
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.ConstructLogItemNode">
            <summary>
            Takes the attributs of a log entry and puts them into an XmlNode.  
            The node is then returned or null if the node was not created.  
            An ArgumentException is thrown if an invalid node is created.  
            </summary>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.GetLogFile">
            <summary>
            Private method used to check if the xml and xsl files exist
            </summary>
            <returns>
            returns true if fill created, false if file not
            </returns>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.Create">
            <summary>
            Private method used to create the xml file for the Activity Log if it
            does not already exist. 
            </summary>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLogEntry.AddProcessingInstruction(System.String,System.String)">
            <summary>
            Add processing instructions to the xml file being created
            </summary>
            <param name="strTarget">
            The target to put the data into
            </param>
            <param name="strData">
            The date to put in the given target
            </param>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="T:Itron.Metering.Utilities.FieldProActivityLogEntry">
            <summary>
            This class represents an activity log entry for the FieldPro activity log
            </summary>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.00 Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.FieldProActivityLogEntry.#ctor">
            <summary>
            Constructor - Sets the event time to the current time.  Sets the
            other member variables to their empty values.
            </summary>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.0000 N/A	Creation of class 
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.HHProActivityLogEntry">
            <summary>
            This class represents an activity log entry for the HH-Pro activity log
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.HHProActivityLogEntry.#ctor">
            <summary>
            Constructor - Sets the event time to the current time.  Sets the
            other member variables to their empty values.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ActivityLog">
            <summary>
            This class represents the whole activity log file.  This class provides read only 
            access to the activity log entries.  This class should not be used to write activity
            log entries.
            </summary>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.00 Created
            </remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_ENTRY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_TIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_METERTYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_UNITID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_SERIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_EVENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.NODE_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.MAIN_NODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ActivityLog.XML_FILE">
            <summary>
            The name of activity log file
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLog.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.00 Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.ActivityLog.Read(System.String)">
            <summary>
            This method reads all of the entries in the activity log and returns
            them as a generic list.  
            </summary>
            <param name="strApplication">This string is used to identify the file to read. 
            The assumption is that different applications will be able to generate activity
            logs and that each file can be looked up using the application name
            as a registry key
            </param>
            <returns>A generic list containing activity log items.  A value of NULL will be returned
            if the file cannot be found.  If the file does exist, but is unreadable, the returned list
            will be empty
            </returns>
            <remarks>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/16/07 mah 8.00.00 Created
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.ApplicationConfig">
            <summary>
            Class used for setting and retrieving application settings stored in the app.config file
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ApplicationConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ApplicationConfig.ZigBeeScanning">
            <summary>
            Gets or sets the ZigBeeScanning configuration data
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ZigBeeScanningConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ZigBeeScanningConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ZigBeeScanningConfig.Duration">
            <summary>
            Gets or sets the scan duration for ZigBee in number of scans
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.BCD">
            <summary>
            This class provides static methods to help convert BCD (Binary coded 
            Decimal) values into native C# data types
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.#ctor">
            <summary>
            Private constructor to prevent anyone from attempting to create an 
            object from this class
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.BCDtoByte(System.Byte)">
            <summary>
            Used to convert a single byte BCD value into a byte value
            </summary>
            <param name="bcdValue">
            The BCD digits to convert
            </param>
            <returns>
            A byte containing the numeric value of the BCD values
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.BCDtoInt(System.Byte[]@,System.Int32)">
            <summary>
            Converts a BCD array to an integer value
            </summary>
            <param name="bcdArray">
            The BCD array to convert
            </param>
            <param name="BytesToConvert">
            The number of BCD bytes to convert.
            </param>
            <returns>
            The equivalent integer value 
            </returns>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            11/11/08 mah 9.50.00  N/A   Corrected CQ # 121181 by changing the loop limit
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.FixedBCDtoFloat(System.Byte[]@)">
            <summary>
            Converts a fixed floating point BCD value into 
            a true floating point value
            </summary>
            <param name="bcdArray">
            The incoming BCD value in the format of XX XX XX. XX XX XX XX
            where the decimal point is implied
            </param>
            <returns>
            The equivalent floating point value
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.DoubleToFixedBCD(System.Double,System.Int32,System.Int32)">
            <summary>
            This method converts a double to a BCD values in the form of :
               XX XX XX. XX XX XX XX Decimal implied
            </summary>
            <param name="dblValue">The double to convert</param>
            <param name="nTotalBytes">The length of the BCD array in bytes</param>
            <param name="nDecimalBytes">The number of BCD bytes right of the
            implied decimal point</param>
            <returns>An array containing BCD Value</returns>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/26/07 KRC 8.00.09         Adding Edit Registers
            07/05/07 mcm 8.10.11        Rewrote because it only worked for one size
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.StringToFixedBCD(System.String,System.Int32,System.Int32)">
            <summary>
            This method converts a string to a BCD values in the form of :
               XX XX XX. XX XX XX XX Decimal implied
            </summary>
            <param name="strValue">The string to convert</param>
            <param name="nTotalBytes">The length of the BCD array in bytes</param>
            <param name="nDecimalBytes">The number of BCD bytes right of the
            implied decimal point</param>
            <returns>An array containing BCD Value</returns>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/26/07 KRC 8.00.09         Adding Edit Registers
            07/05/07 mcm 8.10.11        Rewrote because it only worked for one size
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.FixedBCDtoString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a fixed floating point BCD value into 
            a string representation of the floating point value
            </summary>
            <param name="bcdArray">
            The incoming BCD value in the format of XX XX XX. XX XX XX XX
            where the decimal point is implied
            </param>
            <param name="nDecimalBytes">Number of bytes of decimal digits in BCD array</param>
            <param name="nLength">Number of bytes in BCD array</param>
            <returns>
            The string representation of the BCD value
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.FloatingBCDtoDouble(System.Byte[]@,System.Int32)">
             <summary>
             This method converts BCD values in the form of :
                M.X XX XX XX where M is a positve exponent, 0-6- and the decimal point is implied
             </summary>
             <param name="bcdArray">The array of BCD digits</param>
             <param name="nBCDLength">The length of the BCD value  - up to 6</param>
             <returns>A double precision floating point value</returns>
             <remarks>
             MM/DD/YY who Version Issue# Description
            - -------- --- ------- ------ ---------------------------------------
             11/22/06 mah 8.00.00  N/A   Created
             11/27/06 jrf 8.00.00  N/A   Modified to handle bcd length as low as 3
             11/28/06 jrf 8.00.00  N/A   Changed computation of nExponent to divide by
                                         0x0F instead of 10 and also modified final 
                                         computation to use Math.Pow().
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.DoubleToFloatingBCD(System.Double,System.Int32)">
             <summary>
             This method converts a double to a BCD values in the form of :
                M.X XX XX XX where M is a positve exponent, 0-6- and the decimal point is implied
             </summary>
             <param name="dblValue">The double to convert</param>
             <param name="nLength">The length of the BCD value  - up to 6</param>
             <returns>A BCD Value</returns>
             <remarks>
             MM/DD/YY who Version Issue# Description
            - -------- --- ------- ------ ---------------------------------------
             01/26/07 KRC 8.00.09         Adding Edit Registers
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.FloatingBCDtoString(System.Byte[]@,System.Int32)">
             <summary>
             This method converts BCD values in the form of :
                M.X XX XX XX where M is a positve exponent, 0-6- and the decimal point is implied
             </summary>
             <param name="bcdArray">The array of BCD digits</param>
             <param name="nBCDLength">The length of the BCD value  - up to 6</param>
             <returns>
             A string representation of the BCD value
             </returns>
             <remarks>
             MM/DD/YY who Version Issue# Description
            - -------- --- ------- ------ ---------------------------------------
             12/07/06 mah 8.00.00  N/A   Created
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.BytetoBCD(System.Byte)">
            <summary>
            This method converts a single byte value into its equivalent BCD value
            </summary>
            <param name="byteValue">
            The value to be converted to a BCD value.  Must be between 0 and 99
            </param>
            <returns>
            A BCD value
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.InttoBCD(System.UInt32,System.Int32)">
            <summary>
            Converts an unsigned integer value to a BCD array
            </summary>
            <param name="nValue">
            The integer value to convert
            </param>
            <param name="lengthBCDArray">
            The number of bytes in the resulting BCD array - up to 3 bytes are allowed
            </param>
            <returns>
            The equivalent BCD array 
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.BCD.BCDDateTimeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.BCD.BCDDateTimeFormat.YrMoDaHrMiSeDow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.BCD.BCDDateTimeFormat.MoDaHrMi">
            <summary>
            
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.BCD.GetDateTime(System.Byte[]@,Itron.Metering.Utilities.BCD.BCDDateTimeFormat)">
             <summary>
             Converts a byte array to a DateTime
             </summary>
             <param name="bcdDateTimeArray"></param>
             <param name="bcdFormat"></param>
             <returns>DateTime</returns>
             <remarks>
              Revision History
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ ---------------------------------------------
                                          Created
              10/18/06 mrj 7.35.05 44     Set the default time to 1/1/1980 to match
                                          Pc-Pro+
            
             </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.CallingAppInfo">
            <summary>
            Class used to get information about the Calling Application
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CallingAppInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CallingAppInfo.ProductName">
            <summary>
            Gets the Product Name of the calling application
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CallingAppInfo.Version">
            <summary>
            Gets the Version of the calling application
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ChangeControlEventHandler">
            <summary>
            The delegate for the change control event handler.
            </summary>
            <param name="sender">The control that sent the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.ChangeControlEventArgs">
            <summary>
            The event arguments for the ChangeControlEvent
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ChangeControlEventArgs.m_NewControl">
            <summary>
            Member variable for the new control
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ChangeControlEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor
            </summary>
            <param name="ctlNewControl">The control to change to.</param>
        </member>
        <member name="P:Itron.Metering.Utilities.ChangeControlEventArgs.NewControl">
            <summary>
            Gets the control to change to.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.CRC">
            <summary>
            Class for CRC validation
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.ValidateCRC(System.String,System.Int32)">
            <summary>
            Validates that the CRC read from the file matches the calculated 
            CRC.  Used to validate that the file has not been corrupted.  The 
            file could be for any of the 3 micros of the OpenWay meter, so the 
            file size can vary.
            </summary>
            <param name="strFilePath">Complete path to the firmware file</param>
            <param name="iFileSize">Size of the file</param>
            <remarks>Assumes that the CRC is located at the first 2 bytes of 
            the file and that the 1st byte is the MSB and the 2nd byte the 
            LSB
            </remarks>
            <returns>True if the CRC validates.  Otherwise, false.</returns>
            
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.CalculateCRC(System.Byte[])">
            <summary>
            Calculates CRC
            </summary>
            <remarks>Calculates CRC 
            </remarks>
            <returns>Returns CRC.</returns>
            
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.CalculateCRCCCIT(System.Byte[])">
            <summary>
            Calculates CRC
            </summary>
            <remarks>Calculates CRC 
            </remarks>
            <returns>Returns CRC.</returns>
            
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.CalculateCRC16(System.Byte[])">
            <summary>
            Calculates the CRC-16-CCIT for the given data
            </summary>
            <param name="data">The data to calculate the CRC for</param>
            <returns>The crc</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.CalculateFirmwareCRCForHanActivation(System.String,System.UInt32@)">
            <summary>
            Calculates the CRC32 for a firmware file whose path is passed in.
            This is not a general use CRC32 because it skips over the header
            before starting the calculation
            </summary>
            <param name="strFilePath">Path to the f/w file to be checked</param>
            <param name="crc">The calculated CRC32</param>
            <returns>true if the CRC32 was successfully calculated; false, otherwise</returns>
            <remarks>
            This code is modified from a version sent by Scott Collins who implemented
            it for the collection engine.
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.CRC.CalculateCRC32(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Calculates the CRC32 for a byte array that is passed in.
            </summary>
            <param name="uiPolynomialSeed">The polynomial seed to use in CRC calculation.</param>
            <param name="data">The data to use to compute CRC.</param>
            <param name="crc">The calculated CRC32</param>
            <returns>true if the CRC32 was successfully calculated; false, otherwise</returns>
            <remarks>
            This code is modified from a version sent by Scott Collins who implemented
            it for the collection engine.
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.CrcAlgorithmType">
            <summary>
            Indicates the type of algorithm that will be used to calculate CRC values.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CrcAlgorithmType.Crc32">
            <summary>
            Indicates that the CRC 32 algorithm will be used.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CrcAlgorithmType.Crc16Ccitt">
            <summary>
            Indicates that the CRC 16-CCITT algorithm will be used.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.CrcHelper">
            <summary>
            A helper class for calculating CRC values.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CrcHelper.#ctor(Itron.Metering.Utilities.CrcAlgorithmType)">
            <summary>
            Initalizes a new instance of the class using the provided algorithm type.
            </summary>
            <param name="type">Indicates what type of CRC algorithm this instance should use.</param>
        </member>
        <member name="P:Itron.Metering.Utilities.CrcHelper.CrcAlgorithmType">
            <summary>
            Gets the type of CRC algorithm that this instance is using.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CrcHelper.CalculateCrc(System.Byte[])">
            <summary>
            Uses a fast lookup table algorithm without augmented zero bytes to produce a CRC for the provided input.
            </summary>
            <remarks>
            This algorithm is only usable for polynomial orders of 8, 16, 24 or 32.
            </remarks>
            <param name="input">The target of the CRC.</param>
            <returns>A <see cref="T:System.UInt64"/> containing the CRC value that was calculated for the provided input.</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.CRegistryHelper">
             <summary>
             Generic Registry Helper Class
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            07/29/04 REM 7.00.15 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_KEY_BASE_32">
            <summary>
            Base Registry path for 32-bit OS
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_KEY_BASE_64">
            <summary>
            Base Registry path for 64-bit OS
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_KEY_FILE_PATHS">
            <summary>
            protected const string REG_KEY_FILE_PATHS = "SOFTWARE\\Itron\\Metering\\FilePaths";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_KEY_APPLICATIONS">
            <summary>
            protected const string REG_KEY_APPLICATIONS = "SOFTWARE\\Itron\\Metering\\Applications";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_VALUE_DATA_DIRECTORY">
            <summary>
            protected const string REG_VALUE_DATA_DIRECTORY = "DataDirectory";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CRegistryHelper.REG_KEY_LOGON_OPTIONS">
            <summary>
            protected const string REG_KEY_LOGON_OPTIONS = "SOFTWARE\\Itron\\Metering\\Defaults\\Logon";
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetFilePath(System.String)">
            <summary>
            Returns the path found in the registry for the File Path requested
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetDataDirectory(System.String)">
             <summary>
             Returns the Data Directory found for the Data Directory requested
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            08/30/04 REM 7.00.15 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetProgramString(System.String,System.String)">
             <summary>
             Returns the requested string from the registry from the requested application
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            10/05/04 REM 7.00.22 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetApplicationValue(System.String,System.String)">
            <summary>
            Gets a value out of the registry from the given application key 
            </summary>
            <param name="strApplication">The application to get the value for</param>
            <param name="strValue">The value to get out of the registry</param>
            <returns>Returns an object containing the value requested</returns>		
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/22/05 mrj 7.13.00 N/A	Created
            		
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.SetApplicationValue(System.String,System.String,System.Object)">
            <summary>
            Sets a value to the registry from the given application key 
            </summary>
            <param name="strApplication">The application to get the value for</param>
            <param name="strValue">The value to set to the registry</param>
            <param name="objData">The data to set to the registry</param>		 
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.SetLogonValue(System.String,System.Object)">
            <summary>
            Sets a value to the registry for Logon Options
            </summary>
            <param name="strValue">The value to set to the registry</param>
            <param name="objData">The data to set to the registry</param>		 
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetBaseRegistryKey">
            <summary>
            Determines the path to the base registry keys
            </summary>
            <returns>The path to the keys</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CRegistryHelper.GetDefaultBrowserPath">
            <summary>
            Gets the path to the Default Web Browser
            </summary>
            <returns>The path to the default browser or null if none found</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.CSharedMethods">
            <summary>
            Class for Methods that could be used by various projects
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.m_FolderBrowserDialog">
            <summary>
            CSharedMethods protected member variable for the folder browser dialog
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.CHARACTER_DECIMAL">
            <summary>
            public static string CHARACTER_DECIMAL = System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator;
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.CHARACTER_NEGATIVE">
            <summary>
            public static string CHARACTER_NEGATIVE = System.Globalization.NumberFormatInfo.CurrentInfo.NegativeSign; 
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.TO_DATE">
            <summary>
            The index of the to DST date.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.FROM_DATE">
            <summary>
            The index of the from DST date
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.BYTE_ORDER_MARK">
            <summary>
            The BOM (Byte Order Mark)
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.CSharedMethods.TAB">
            <summary>
            String constant for a tab character
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.RemoveByteOrderMark(System.String)">
            <summary>
            Removes the BOM (Byte Order Mark) from the beginning of a string.
            </summary>
            <param name="str">The string to remove the BOM from.</param>
            <returns>The string without the BOM.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ToBase64String(System.Drawing.Image)">
            <summary>
            Converts the image to a Base64String.
            </summary>
            <param name="image">The image to convert.</param>
            <returns>The image as a Base64String</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified System.String object occurs
            within this string.
            </summary>
            <param name="str">string</param>
            <param name="substring">The string to seek.</param>
            <param name="comp">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.BrowseForFolder(System.String,System.String)">
            <summary>
            Display a dialog that allows the user to browse for a folder
            </summary>
            <param name="strDescription">Description to be displayed in the Browse dialog</param>
            <param name="strFolder">Default folder to use in the Browse dialog</param>
            <returns>Directory the user selected</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ConvertTimeToLocal(System.DateTime,System.Boolean,System.Collections.Generic.List{System.DateTime[]},System.TimeSpan,System.TimeSpan)">
            <summary>
            Converts a UTC time to a local time based on the TimeZone settings in the meter.
            </summary>
            <param name="timeToConvert">The UTC time to convert.</param>
            <param name="blnDSTEnabled">Whether DST is enabled</param>
            <param name="lstDSTDates">List of DST date pairs as list of date arrays with two dates in each array.</param>
            <param name="tsDSTAdjustmentAmount">Timespan to adjust DST by.</param>
            <param name="tsTimeZoneOffset">timespan to Adjust the timezone by.</param>
            <returns>The time as a local time.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.IsEqual(System.Byte[],System.Byte[])">
            <summary>
            Extension method used for comparing two byte arrays
            </summary>
            <param name="value">The value of the current object</param>
            <param name="other">The value of the object to compare</param>
            <returns>True if the two byte arrays match. False otherwise.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ClassAndName(System.Reflection.MethodBase)">
            <summary>
            Extension method to return both the class and name.
            </summary>
            <param name="method">The method of the current object.</param>
            <returns>The class name and method name.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.GetNextLeapYear(System.DateTime)">
            <summary>
            Extension method to return the next leap year in the format 02/29/YYYY 12:00:00 A.M.
            </summary>
            <param name="date">The DateTime of the current object.</param>
            <returns>The DateTime of the next leap year starting at midnight.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.Trim(System.DateTime,System.Int64)">
            <summary>
            Extension method to round the time to the nearest given ticks
            </summary>
            <param name="date">The date and time to round.</param>
            <param name="roundTicks">The ticks to be rounded.</param>
            <example>
                DateTime.Now.Trim(TimeSpan.TicksPerDay);
                DateTime.Now.Trim(TimeSpan.TicksPerHour);
                DateTime.Now.Trim(TimeSpan.TicksPerMillisecond);
                DateTime.Now.Trim(TimeSpan.TicksPerMinute);
                DateTime.Now.Trim(TimeSpan.TicksPerSecond);
            </example>
            <returns>Date and Time rounded by the given ticks.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ConvertToUnixTimestamp(System.DateTime)">
            <summary>
            Converts the datetime to a Unix time-stamp representing context time from 1970.
            </summary>
            <param name="date">The date and time to convert.</param>
            <returns>The number of seconds since 1970.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.UnixTimeStampToDateTime(System.Double)">
            <summary>
            Assuming the double is a unix time stamp, converts to a date time object.
            </summary>
            <param name="unixTimeStamp">The unix time stamp</param>
            <returns>The unix time stamp as a date time object.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.UnixTimeStampToDateTime(System.Int64)">
            <summary>
            Assuming the long is a unix time stamp, converts to a date time object.
            </summary>
            <param name="unixTimeStamp">The unix time stamp</param>
            <returns>The unix time stamp as a date time object.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.UnixTimeStampToDateTime(System.UInt64)">
            <summary>
            Assuming the long is a unix time stamp, converts to a date time object.
            </summary>
            <param name="unixTimeStamp">The unix time stamp</param>
            <returns>The unix time stamp as a date time object.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.UnixTimeStampToDateTime(System.String,System.Boolean)">
            <summary>
            Helper method to retrieve the date and time from a table row's column.
            </summary>
            <param name="unixTimeStamp">The unixtime stamp.</param>
            <param name="useLocalTime">True to use local time, False to use UTC time.</param>
            <returns>The date and time.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the given date and time up by the given TimeSpan.
            </summary>
            <param name="dateTime">The date and time to round up.</param>
            <param name="timeSpan">The time span used to round up.</param>
            <returns>The date and time after being round up.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.RoundUp(System.Decimal,System.Int32)">
            <summary>
            Rounds up to the nearest decimal place.
            </summary>
            <param name="decInput"></param>
            <param name="places"></param>
            <returns>The decimal round to the nearest decimal place.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.RoundDown(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the given date and time down by the given TimeSpan.
            </summary>
            <param name="dateTime">The date and time to round down.</param>
            <param name="timeSpan">The time span used to round down.</param>
            <returns>The date and time after being round down.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.GenerateRandomDate(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Extension method that returns a random date and time base on the given range.
            </summary>
            <param name="date">The DateTime of the current object</param>
            <param name="fromDate">The oldest date in the date range.</param>
            <param name="toDate">The newest date in the date range.</param>
            <returns>A random date and time.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.CompareTo(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays
            </summary>
            <param name="value">The first byte[]</param>
            <param name="other">The second byte[]</param>
            <returns>0 if equal, negative if less than, positive if greater than</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ToHexString(System.Byte[])">
            <summary>
            Converts a byte[] to readable hex string
            </summary>
            <param name="value">The value to convert</param>
            <returns>The byte[] as a hex string</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.HexToASCII(System.String)">
            <summary>
            Converts a string of hex characters to a user friendly ASCII string.
            </summary>
            <param name="hexValue">The hex string to convert.</param>
            <returns>The formatted ASCII string.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ASCIIToHex(System.String)">
            <summary>
            Converts a user friendly ASCII string to hex characters.
            </summary>
            <param name="asciiValue">The ASCII string to convert</param>
            <returns>The formatted hex string.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.HexStringToByteArray(System.String)">
            <summary>
            Converts a hex string value to a byte array.
            </summary>
            <param name="hexString">The hex string.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ToBitString(System.Byte[])">
            <summary>
            Converts a byte[] to readable bit string
            </summary>
            <param name="value">The value to convert</param>
            <returns>The byte[] as a bit string</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.AlignInputValueToIncrement(System.Decimal,System.Decimal)">
            <summary>
            This method changes a given input value to fall on a specified increment value.
            </summary>
            <param name="decInputValue">The input value.</param>
            <param name="decIncrement">The increment value.</param>
            <returns>The modified input value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Extension to randomize a list
            </summary>
            <typeparam name="T">Type of List</typeparam>
            <param name="list">List to randomize</param>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.IsEven(System.Int32)">
            <summary>
            Extension to determine if the number is even.
            </summary>
            <param name="number">The number to be checked.</param>
            <returns>True if even, otherwise false.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.CompareVersionString(System.String,System.String)">
            <summary>
            Compares two version strings
            </summary>
            <param name="first">The first string</param>
            <param name="second">The second string</param>
            <returns>-1 if first less than second, 0 if first equal second, 1 if first greater than second</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts an XDocument to an XmlDocument
            </summary>
            <param name="xDocument">The XDocument to convert.</param>
            <returns>The converted XmlDocument.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.CSharedMethods.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts an XmlDocument to an XDocument.
            </summary>
            <param name="xmlDocument">The XmlDocument to convert.</param>
            <returns>The converted XDocument.</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.CSharedMethods.ProductVersion">
            <summary>
            Returns the product version as a double
            </summary>
            <returns>Product Version</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.DataCache">
            <summary>
            This is the base class of all cached objects.   The class provides a common mechanism 
            to determine if a data item has been uploaded from a meter and cached.  It also provides 
            a common means to flush the cached data value and force a fresh upload of the item from 
            the meter.
            </summary>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00    N/A Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.DataCache.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00  N/A   Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.DataCache.Flush">
            <summary>
            This method clears the cache.
            </summary>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00  N/A   Created
            </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.DataCache.Cached">
            <summary>This property determines whether or not the data is 
            cached.</summary>
            <returns>
            An boolean representing whether or not the data is cached.
            </returns>
            <remarks >
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00  N/A   Created
            </remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.DataCache.m_boolCached">
            <summary>
            A boolean indicating whether or not the data is cached.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.CachedString">
            <summary>
            The CachedString class represents a string and whether or not it 
            has been cached.
            </summary>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00    N/A Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedString.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedString.Value">
             <summary>This property gets and sets the string value.</summary>
             <returns>
             An string representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedInt">
             <summary>
             The CachedInt class represents an integer and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedInt.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedInt.Value">
             <summary>This property gets and sets the integer value.</summary>
             <returns>
             An integer representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedFloat">
             <summary>
             The CachedFloat class represents a float and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedFloat.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedFloat.Value">
             <summary>This property gets and sets the float value.</summary>
             <returns>
             A float representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedDouble">
             <summary>
             The CachedFloat class represents a float and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             09/28/06 KRC 7.35.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedDouble.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             09/28/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedDouble.Value">
             <summary>This property gets and sets the double value.</summary>
             <returns>
             A double representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             09/28/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedBool">
             <summary>
             The CachedBool class represents a boolean and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedBool.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedBool.Value">
             <summary>This property gets and sets the boolean value.</summary>
             <returns>
             A boolean representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been initialized.
             </exception>
             <remarks>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             06/06/06 mh 7.30.00  N/A   Created
             </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.CachedByte">
            <summary>
            The CachedByte class represents a byte and whether or not it 
            has been cached.
            </summary>
            <remarks >
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/04/06 mcm 7.30.00    N/A Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedByte.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/06/06 mh 7.30.00  N/A   Created
            </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.CachedByte.Value">
             <summary>This property gets and sets the value.</summary>
             <returns>
             A byte representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             07/04/06 mcm 7.30.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedDate">
             <summary>
             The CachedDate class represents a date and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/18/06 KRC 7.35.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedDate.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/18/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedDate.Value">
             <summary>This property gets and sets the Date value.</summary>
             <returns>
             A date representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/18/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedUint">
             <summary>
             The CachedUint class represents an unsigned nteger and whether or not it 
             has been cached.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/30/06 KRC 7.35.00    N/A Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.CachedUint.#ctor">
             <summary>
             Constructor
             </summary>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/30/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.CachedUint.Value">
             <summary>This property gets and sets the unsigned integer value.</summary>
             <returns>
             An unsigned integer representing the data value is returned.
             </returns>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/30/06 KRC 7.35.00  N/A   Created
            
        </member>
        <member name="T:Itron.Metering.Utilities.CachedUshort">
            <summary>
            The CachedUshort class represents an unsigned short and whether or not
            it has been cached
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedUshort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CachedUshort.Value">
             <summary>
             Gets or sets the cached ushort
             </summary>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
        </member>
        <member name="T:Itron.Metering.Utilities.CachedLong">
            <summary>
            The CachedLong class represents an long and whether or not
            it has been cached
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedLong.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CachedLong.Value">
             <summary>
             Gets or sets the cached long
             </summary>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
        </member>
        <member name="T:Itron.Metering.Utilities.CachedTimeSpan">
            <summary>
            The CachedTimeSpan class represents a TimeSpan and whether or not
            it has been cached
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedTimeSpan.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CachedTimeSpan.Value">
             <summary>
             Gets or sets the cached TimeSpan
             </summary>
            <exception cref="T:System.ApplicationException">
             Thrown if the value has not been cached.
             </exception>
        </member>
        <member name="T:Itron.Metering.Utilities.CachedValue`1">
            <summary>
            The CachedValue class represents a generic value and whether or not it 
            has been cached.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.CachedValue`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.CachedValue`1.Value">
            <summary>This property gets and sets the value.</summary>
            <returns>
            A type T representing the data value is returned.
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.EnumDescriptionAttribute">
            <summary>
            Attribute used for Descriptions of Enumeration values
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="description">The description of the enum value</param>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourceBaseName">The name of the resource file to use.</param>
            <param name="resourceType">The type of the resources object</param>
            <param name="stringName">The name of the string that contains the description</param>
        </member>
        <member name="P:Itron.Metering.Utilities.EnumDescriptionAttribute.Description">
            <summary>
            Gets the description
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionAttribute.GetStringFromResourceFile(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Gets a string from the specified resource file
            </summary>
            <param name="resourceBaseName">The base name of the resource file</param>
            <param name="resourceAssembly">The assembly containing the resource file</param>
            <param name="stringName">The name of the string to retrieve</param>
            <returns>The specified string</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.EnumEventInfoAttribute">
            <summary>
            Attribute used to determine which Event Table the event is injected
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumEventInfoAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tableID">The tableID to which the event is injected</param>
        </member>
        <member name="P:Itron.Metering.Utilities.EnumEventInfoAttribute.TableID">
            <summary>
            Gets the description
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.EnumDescriptionRetriever">
            <summary>
            Methods to be used for retrieving Descriptions
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionRetriever.RetrieveDescription(System.Enum,System.String)">
            <summary>
            Extension method for enumerations that will return the description specified using a DescriptionAttribute modifier.
            </summary>
            <param name="value">The enumeration value.</param>
            <param name="separator">separator string</param>
            <returns>The description of the value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionRetriever.RetrieveEventTableInfo(System.Enum)">
            <summary>
            Extension method for enumerations that will return the Event table info specified using a EventTableInfoAttribute modifier.
            </summary>
            <param name="value">The enumeration value.</param>
            <returns>The description of the value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionRetriever.ParseToEnum``1(System.String)">
            <summary>
            Parses a string into an enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="strValue">The description of the enum value to parse.</param>
            <returns>The enum value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionRetriever.GetValues``1">
            <summary>
            Gets the list of possible values for an enumeration
            </summary>
            <returns>The list of values</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumDescriptionRetriever.GetValueDescriptions``1">
            <summary>
            Gets the descriptions for all values in an enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <returns>The list of descriptions</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.DeviceType">
            <summary>
            Class used to get the device type list and string names.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.DeviceType.eDeviceTypes">
            <summary>
            Enumeration of device types
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.CENTRON">
            <summary>
            CENTRON
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.VECTRON">
            <summary>
            VECTRON
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.SENTINEL">
            <summary>
            SENTINEL
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.Q1000">
            <summary>
            Q1000
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.QUANTUM">
            <summary>
            QUANTUM
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.FULCRUM">
            <summary>
            FULCRUM
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.SQ400">
            <summary>
            SQ400
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.CENTRON_C12_19">
            <summary>
            CENTRON_C12_19
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.CENTRON_V_AND_I">
            <summary>
            CENTRON_V_AND_I
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.TWO_HUNDRED_SERIES">
            <summary>
            TWO_HUNDRED_SERIES
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.CENTRONII_C12_19">
            <summary>
            CENTRONII_C12_19
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.DeviceType.eDeviceTypes.UNKNOWN">
            <summary>
            UNKNOWN
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.DeviceType.GetDeviceTypeString(Itron.Metering.Utilities.DeviceType.eDeviceTypes)">
            <summary>
            Given an eDeviceType enum, this method returns a string representation
            of the device type.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.DeviceType.GetDeviceTypeEnum(System.String)">
            <summary>
            Given a string, this method returns a device type enum.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.DeviceType.GetDeviceTypeDescription(Itron.Metering.Utilities.DeviceType.eDeviceTypes)">
            <summary>
                
            </summary>
            <param name="eType" type="Itron.Metering.Utilities.DeviceType.eDeviceTypes">
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.DKUSFile">
            <summary>
            Class used to represent DKUS files. This class has been adapted from code given to us by Kevin Guthrie.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="strFileName">The file that contains the keys.</param>
        </member>
        <member name="P:Itron.Metering.Utilities.DKUSFile.Keys">
            <summary>
            Gets the keys contained in the file
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ParseUnsupportedNode(System.Xml.XmlReader)">
            <summary>
            Parses an unsupported node.
            </summary>
            <param name="objReader">The xml reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ReadDKUSRoot(System.Xml.XmlReader)">
            <summary>
            Reads the file starting from the root.
            </summary>
            <param name="reader">The xml reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ReadApplicationPublicKeys(System.Xml.XmlReader)">
            <summary>
            Reads the Application Public Keys
            </summary>
            <param name="reader">The xml reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ReadPublicCommandKeys(System.Xml.XmlReader)">
            <summary>
            Reads the public command keys.
            </summary>
            <param name="reader">The xml reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ReadPublicRevocationKeys(System.Xml.XmlReader)">
            <summary>
            Reads the public revocation keys
            </summary>
            <param name="reader">The xml reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.DKUSFile.ReadKey(System.Xml.XmlReader,System.Byte[]@)">
            <summary>
            Reads a single key.
            </summary>
            <param name="reader">The xml reader</param>
            <param name="key">The key that was read.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.Encryption">
            <summary>
            This class provides static methods to encrypt and decrypt streams.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.Encryption.DecryptData(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream)">
            <summary>
            This method decrypts a stream of data based on a given encryption algorithm.
            </summary>
            <param name="EncryptionAlgorithm">The encryption algorithm that should be used 
            to decrypt the stream.</param>
            <param name="InStream">The stream that contains the encrypted data.</param>
            <param name="OutStream">The stream that will contain the decrypted data.</param>
            <remarks>This method assumes the encryption algorithm has be set with an 
            appopriate key and initialization vector prior to its calling.</remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.Encryption.EncryptData(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream)">
            <summary>
            This method encrypts a stream of data based on a given encryption algorithm.
            </summary>
            <param name="EncryptionAlgorithm">The encryption algorithm that should be used 
            to encrypt the stream.</param>
            <param name="InStream">The stream that contains the decrypted data.</param>
            <param name="OutStream">The stream that will contain the encrypted data.</param>
            <remarks>This method assumes the encryption algorithm has be set with an 
            appopriate key and initialization vector prior to its calling.</remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.EnumExtensions">
            <summary>
            Extension methods for enums
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Extension method for enumerations that will return the description specified using a DescriptionAttribute modifier.
            </summary>
            <param name="value">The enumeration value.</param>
            <returns>The description of the value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumExtensions.ParseToEnum``1(System.String)">
            <summary>
            Parses a string into an enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="strValue">The description of the enum value to parse.</param>
            <returns>The enum value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumExtensions.ToSerializedValue(System.Enum)">
            <summary>
            Gets the serialized value of the Enum
            </summary>
            <param name="value">The value to serialize</param>
            <returns>Null if the value is not marked with the XmlEnum attribute or the serialized value</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.EnumExtensions.ParseToEnumFromSerializedValue``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Itron.Metering.Utilities.FatalErrorEventHandler">
            <summary>
            Delegate for a fatal error event handler
            </summary>
            <param name="sender">The object that sent the error.</param>
            <param name="e">The error event earguments.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.NonFatalErrorEventHandler">
            <summary>
            Delegate for a non-fatal error event handler
            </summary>
            <param name="sender">The control that sent the error.</param>
            <param name="e">The error event arguments.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.ItronErrorEventArgs">
            <summary>
            Error event arguments class
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ItronErrorEventArgs.m_strMessage">
            <summary>
            The message that will be displayed upon an error event
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ItronErrorEventArgs.m_OriginatingException">
            <summary>
            A placeholder for the exception that caused the error event
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ItronErrorEventArgs.#ctor(System.String)">
            <summary>
            Constructor that sets the error message.
            </summary>
            <param name="strMessage">The error message.</param>
        </member>
        <member name="M:Itron.Metering.Utilities.ItronErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that sets the error message and originating exception
            </summary>
            <param name="strMessage">The error message.</param>
            <param name="eError">The original exception</param>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ -------------------------------------------
            10/06/06 MAH 7.35.00 N/A	Created
            </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.ItronErrorEventArgs.Message">
            <summary>
            Gets or sets the message that will be displayed when an error occurs.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ItronErrorEventArgs.OriginatingException">
            <summary>
            This property represents the exception that was originally raised
            to indicate that an error occurred. This property could be null if 
            an exception is not the root cause of the error.
            </summary>
            <remarks >
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ -------------------------------------------
            10/06/06 MAH 7.35.00 N/A	Created
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.ESNConverter">
            <summary>
            Handles conversion of the Electronic Serial Number between the string 
            representation and the encoded representation that is stored in the meter.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.HIGH_BIT">
            <summary>
            Bit mask for the most significant bit
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.LOW_BITS">
            <summary>
            Bit mask for the 7 least significant bits
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.ESN_ID_CODE">
            <summary>
            Byte code that says that this value is an Electronic Serial Number
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.ESN_ID_CODE_2">
            <summary>
            Byte code that says this is and ESN or Aptitle with relative object
            identifier
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.BITS_TO_SHIFT">
            <summary>
            The number of bits to shift when decoding
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ESNConverter.ESN_LENGTH">
            <summary>
            The length of the Electronic Serial Number in bytes
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ESNConverter.EncodeTerm128(System.UInt64)">
            <summary>
            Encodes a (UInt64) term of the ESN using BER Basic Encoding Rules for base 128
            </summary>
            <param name="term">UInt64 value of the term for encoding</param>
            <returns>The encoded term as a byte array.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.ESNConverter.Decode(System.Byte[])">
            <summary>
            Decodes the Electronic Serial Number in the string form entered by the user
            </summary>
            <param name="byaEncodedESN">The encoded Electronic Serial Number</param>
            <returns>The Electronic Serial Number in string form</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.FuncComparer`1">
            <summary>
            A Comparer that uses a Func to perform the comparison
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.FuncComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="comparisonFunction">The comparison Function</param>
        </member>
        <member name="M:Itron.Metering.Utilities.FuncComparer`1.Compare(`0,`0)">
            <summary>
            Compares two values
            </summary>
            <param name="first">The first value</param>
            <param name="second">The second value</param>
            <returns>0 if equal, a negative value if less than, a positive value if greater than</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.HelpConfig">
            <summary>
            Class used for retrieving the help configuration for the current applicaiton.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.HelpConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpConfig.File">
            <summary>
            Gets or sets the name of the Help file the application should use
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpConfig.HelpIDs">
            <summary>
            Gets the collection of Help IDs for the help file.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.HelpID">
            <summary>
            Help ID object for the Help configuration.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.HelpID.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpID.Name">
            <summary>
            Gets or sets the name of the current Help ID
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpID.ID">
            <summary>
            Gets or sets the ID for the current Help ID
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.HelpIDCollection">
            <summary>
            Collection of Help ID objects from the Help Configuration
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.HelpIDCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpIDCollection.CollectionType">
            <summary>
            Gets the type of the collection
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpIDCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Help ID for the specified index.
            </summary>
            <param name="iIndex">The index to get or set.</param>
            <returns>The specified Help ID</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpIDCollection.Item(System.String)">
            <summary>
            Gets the Help ID with the specified name
            </summary>
            <param name="strName">The name of the help ID to get</param>
            <returns>The Help ID</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HelpIDCollection.CreateNewElement">
            <summary>
            Creates a new element object
            </summary>
            <returns>The new element</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HelpIDCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key value for the specified element
            </summary>
            <param name="element">The element to get the key for.</param>
            <returns>The element's key</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.HelpIDCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.HexEncoding">
            <summary>
            This class is not extensively tested, so use it at your own risk.
            This class is currently used for debugging and development.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.GetByteCount(System.String)">
            <summary>
            
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.GetBytes(System.String,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="inputBuffer">Original buffer for offset writes</param>
            <param name="offset">Offset into the original buffer</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.GetBytes(System.String,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.ToString(System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="AddSpaces"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.ToString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="iStartIndex"></param>
            <param name="iCount"></param>
            <param name="AddSpaces"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.ToReverseString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="iStartIndex"></param>
            <param name="iCount"></param>
            <param name="AddSpaces"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.ToString(System.Byte[],System.Int32)">
            <summary>
            Creates string with space between bytes of a specified length
            </summary>
            <param name="bytes">length of the array you want included</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.InHexFormat(System.String)">
            <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.IsHexDigit(System.Char)">
            <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
            <param name="c">Character to test</param>
            <returns>true if hex digit, false if not</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.HexEncoding.HexToByte(System.String)">
            <summary>
            Converts 1 or 2 character string into equivalant byte value
            </summary>
            <param name="hex">1 or 2 character string</param>
            <returns>byte</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.IANSIDeviceConfiguration">
            <summary>
            Interface that defines Configuration items specified at the ANSI Device level.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceConfiguration.CTRatio">
            <summary>Gets the CT Ratio for the current device</summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceConfiguration.VTRatio">
            <summary>Gets the VT Ratio for the current device</summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceConfiguration.RegisterMultiplier">
            <summary>Gets the Register Multiplier for the current device</summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceConfiguration.OutageLength">
            <summary>Gets the Outage Length before Cold Load Pickup in seconds</summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceConfiguration.DisplayModeTimeout">
            <summary>Gets the Display mode timeout in minutes</summary>
        </member>
        <member name="T:Itron.Metering.Utilities.IANSIDeviceStatus">
            <summary>
            Interface to the Device Status properties exposed by ANSI Device
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceStatus.HWRevision">
            <summary>
            Property to get the hardware version from table 01. The hardware
            version is specific to ANSI meters; SCS meters do not
            need this item.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceStatus.IsMeterInDST">
            <summary>
            Property to determine if the meter is in DST
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IANSIDeviceStatus.DateLastTestMode">
            <summary>
            Gets the Date of the Last 
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ICentronAMIDeviceConfiguration">
            <summary>
            Interface that defines the configuration items unique to the CENTRON AMI
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceConfiguration.LoadLimitingConnectWithoutUserIntervetion">
            <summary>
            Determines if User Intervention is required after a load limiting disconnect
            </summary>	
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceConfiguration.LoadControlDisconnectThreshold">
            <summary>
            Determines if Load Control is enabled and what the Threshold is if it is enabled
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceConfiguration.DailySelfReadTime">
            <summary>
            Gets the configured daily self read time.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.NumberOfInversionTampers">
            <summary>
            Property to retrieve the Number of Inversion tampers
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.NumberOfRemovalTampers">
            <summary>
            Property to retrieve the Number of Removal tampers
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.CommModType">
            <summary>
            Gets the Comm module type (IP or RFLAN)
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.CommModVer">
            <summary>
            Gets the Comm module version.revision
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.CommModBuild">
            <summary>
            Gets the Comm module build number
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.HanModType">
            <summary>
            Gets the Han module type (Zigbee)
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.HanModVer">
            <summary>
            Gets the Han module version.revision
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.HanModBuild">
            <summary>
            Gets the Han module build number
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.RegModVer">
            <summary>
            Gets the register module version.revision from MFG Table 2108
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.RegModBuild">
            <summary>
            Gets the register module build number
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.DisplayModVer">
            <summary>
            Gets the display version.revision fom MFG Table 2108
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ICentronAMIDeviceStatus.ServiceVoltage">
            <summary>
            Retrieves the instantaneous secondary Volts RMS Phase A from the meter.
            The firmware folks say this should be considered to be the service voltage.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ICommandProcessor">
             <summary>
             This interface is to be used by any user control that exposes generic 
             commands to the user.  The interface exposes methods to execute a command
             and a method to determine if the command has been completed
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              02/18/08 MAH                 Created
            
             </remarks>
        </member>
        <member name="E:Itron.Metering.Utilities.ICommandProcessor.ExternalProcessStartedEvent">
             <summary>
             This event is fired by a data view whenever the view kicks off a sub process or 
             application that needs to be managed by the calling application.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              02/18/08 MAH                 Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.ICommandProcessor.ExecuteCommand(System.String)">
            <summary>
                
            </summary>
            <param name="strUserCommand" type="string">
            </param>
        </member>
        <member name="M:Itron.Metering.Utilities.ICommandProcessor.CanClose">
            <summary>
            This method is used to determine if the current view can be closed.  Typically
            a view cannot be closed if processing is ongoing or if data has not been 
            persistently store or if data cannot be validated 
            </summary>
            <returns>
            True - if the view can be closed 
            False - if the view should not be closed
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.ProcessStartedEventArgs">
             <summary>
             This class represents the data that is passed with a ProcessStarted event.   The
             primary data item in the class is the NewProcess property which represents the 
             process that was just started and needs to be managed
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              07/19/07 MAH                 Created
              02/18/08 MAH				  Moved to utilities namespace
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.ProcessStartedEventArgs.#ctor(System.Diagnostics.Process)">
            <summary>
                
            </summary>
            <param name="newProcess" type="System.Diagnostics.Process">
            </param>
        </member>
        <member name="P:Itron.Metering.Utilities.ProcessStartedEventArgs.NewProcess">
             <summary>
             This read only property identifies the process object that was just started
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              07/19/07 MAH                 Created
            
             </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.ProcessStartedHandler">
            <summary>
                
            </summary>
            <param name="sender" type="object">
            </param>
            <param name="e" type="Itron.Metering.SharedControls.ProcessStartedEventArgs">
            </param>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.IDisplayHelp">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.IDisplayHelp.DisplayHelpTopic">
            <summary>
            Displays the appropriate help topic
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IDisplayHelp.HelpTopic">
            <summary>
            This property identifies the help topic that will be displayed when the help button on the application window 
            is clicked.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IDisplayHelp.HelpFilePath">
            <summary>
            This property identifies the help file that will be used
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.IErrorHandling">
            <summary>
            Interface for objects that are able to raise fatal and non-fatal error events
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.IErrorHandling.FatalErrorEvent">
            <summary>
            An event that is raised when a fatal error occurs
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.IErrorHandling.NonFatalErrorEvent">
            <summary>
            An event that is raised when a non fatal error occurs
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.IExportable">
            <summary>
            Interface for exporting and persisting subcontrol data 
            </summary>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ -------------------------------------------
            10/11/06 MAH 7.35.00 N/A	   Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.IExportable.ExportToXLS">
            <summary>
            This method persists all subcontrol data in an XLS 
            file.  The user determines the file name and location
            </summary>
            <remarks>
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ -------------------------------------------
            10/11/06 MAH 7.35.00 N/A	   Created
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.IItronDeviceConfiguration">
            <summary>
            Interface that provide Configuration Properties for an ItronDevice
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.UnitID">
            <summary>
            Property used to get the unit ID (string) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.ProgramID">
            <summary>
            Property used to get the program ID (int) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.TOUScheduleID">
            <summary>
            Provides access to the meter's time of use schedule ID.
            Note that this is returned as a string since one or more
            meters allow non-numeric TOU schedule identifiers
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.DeviceTime">
            <summary>
            Property used to get the device time (DateTime) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.SWRevision">
            <summary>
            Property used to get the software version from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.FWRevision">
            <summary>
            Property used to get the firmware version (float) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.SerialNumber">
            <summary>
            Property used to get the serial number (string) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.DSTEnabled">
            <summary>
            Property used to get the DST enabled flag (bool) from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.TOUEnabled">
            <summary>
            TOU is considered enabled if the clock is running and the meter
            is configured to follow a TOU schedule.  TOU does not have to be
            running for this property to return true.  For example an expired
            TOU schedule is enabled but not running.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.UserData">
            <summary>
            This property returns a list of user data strings.  If the meter has 3 user data fields
            then the list will contain 3 strings corresponding to each user data  field
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.ColdLoadPickupTime">
            <summary>
            Gets the Cold Load Pickup Time in minutes
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.DemandIntervalLength">
            <summary>
            Gets the Interval Length for Demands
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.NumberOfSubIntervals">
            <summary>
            Gets the Number of Sub Intervals for Demands
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.NumberOfTestModeSubIntervals">
            <summary>
            Gets the Number of Test Mode Sub Intervals for Demands
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.TestModeIntervalLength">
            <summary>
            Gets the Test Mode Interval Length for Demands
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.LPIntervalLength">
            <summary>
            Returns the number of minutes per load profile interval
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceConfiguration.NumberLPChannels">
            <summary>
            Returns the number of load profile channels the meter is 
            currently recording
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.IItronDeviceStatus">
            <summary>
            Interface to all Device Status Items defined in Itron Device
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.DateProgrammed">
            <summary>
            Property used to get the Date Programmed from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.DateLastDemandReset">
            <summary>
            Property used to get the Date of Last Demand Reset from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.DateLastOutage">
            <summary>
            Property used to get the Date of Last Outage from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.TOUExpirationDate">
            <summary>
            Property used to get the date of the TOU expiration
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.NumTimeProgrammed">
            <summary>
            Property used to get the Number of Times Programmed from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.NumDemandResets">
            <summary>
            Property used to get the Number of Demand Resets from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.NumOutages">
            <summary>
            Property used to get the Number of Outages from the meter
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.NumberOfMinutesOnBattery">
            <summary>
            This property returns the number of minutes that the
            meter run on battery power.  This is a read-only value.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.LPRunning">
            <summary>
            Indicates whether or not the meter is currently recording
            load profile data
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.IItronDeviceStatus.LineFrequency">
            <summary>
            Property to get the line frequency from the device.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.LoggingEventType">
            <summary>
            The type of event to log.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.LoggingEventType.Debug">
            <summary>Debug</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.LoggingEventType.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.LoggingEventType.Warning">
            <summary>Warning</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.LoggingEventType.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.LoggingEventType.Fatal">
            <summary>Fatal</summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ILogger">
            <summary>
            Logger interface. Use to implement a logger that can be injected into any
            application as an ILogger.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ILogger.Log(Itron.Metering.Utilities.LogEntry)">
            <summary>
            Adds an entry to the log.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Itron.Metering.Utilities.LogEntry">
            <summary>
            A log entry.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.LogEntry.#ctor(Itron.Metering.Utilities.LoggingEventType,System.String,System.Exception)">
            <summary>
            Adds an entry to the log.
            </summary>
            <param name="severity">The type of event to log.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception (optional).</param>
        </member>
        <member name="P:Itron.Metering.Utilities.LogEntry.Severity">
            <summary>
            The type of event to log.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.LogEntry.Message">
            <summary>
            The message to log.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.LogEntry.Exception">
            <summary>
            The exception to log.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.LoggerExtensions">
            <summary>
            Extensions for ILogger.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.LoggerExtensions.Log(Itron.Metering.Utilities.ILogger,Itron.Metering.Utilities.LoggingEventType,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="logger"></param>
            <param name="type">The type of message to log.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Itron.Metering.Utilities.LoggerExtensions.Log(Itron.Metering.Utilities.ILogger,System.String)">
            <summary>
            Logs a message of the information event type.
            </summary>
            <param name="logger"></param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Itron.Metering.Utilities.LoggerExtensions.Log(Itron.Metering.Utilities.ILogger,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="logger"></param>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.LogonEventHandler">
            <summary>
            Delegate for the Logon event handler
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Itron.Metering.Utilities.FindCellRelayNetworkEventHandler">
            <summary>
            Delegate for finding a Cell Relay event handler
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Itron.Metering.Utilities.FindCellRelayEventHandler">
            <summary>
            Delegate for finding a Cell Relay event handler
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Itron.Metering.Utilities.LogonCellRelayEventHandler">
            <summary>
            Delegate for the Logon to a Cell Relay event handler
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Itron.Metering.Utilities.LogoffEventHandler">
            <summary>
            Delegate for the Logoff event handler
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Itron.Metering.Utilities.ILogonLogoff">
            <summary>
            Logon and Logoff Interface
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ILogonLogoff.LogonEvent">
            <summary>
            Event for logging on to the device
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ILogonLogoff.LogoffEvent">
            <summary>
            Event for logging off of the device
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ILogonLogoff.FindCellRelayNetworkEvent">
            <summary>
            Event for finding a Cell Relay Network via Zigbee
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ILogonLogoff.FindCellRelayEvent">
            <summary>
            Event for finding a Cell Relay via Zigbee
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ILogonLogoff.LogonCellRelayEvent">
            <summary>
            Event for logging on to a Cell Relay via Zigbee
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Impersonator">
            <summary>
            Class used to temporarily impersonate another user in cases where a remote service call
            needs to be validated by a user in a different domain
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Logs on as the specified user
            </summary>
            <param name="userName">User name</param>
            <param name="domain">User domain</param>
            <param name="password">User password</param>
            <param name="logonType">Logon Type</param>
            <param name="logonProvider">Logon Provider</param>
            <param name="token">User token</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.DuplicateToken(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Duplicates the specified token
            </summary>
            <param name="token">The token to duplicate</param>
            <param name="impersonationLevel">The impersonation level</param>
            <param name="newToken">The new token</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.RevertToSelf">
            <summary>
            Reverts the user to self
            </summary>
            <returns>True if successful. False otherwise</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.CloseHandle(System.IntPtr)">
            <summary>
            Closes the specified handle
            </summary>
            <param name="handle">The handle to close</param>
            <returns>True if the handle was closed. False otherwise</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="domain">User domain</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.ImpersonateUser(System.String,System.String,System.String)">
            <summary>
            Impersonates the specified user
            </summary>
            <param name="domain">User domain</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:Itron.Metering.Utilities.Impersonator.RevertImpersonation">
            <summary>
            Reverts the impersonation
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.InstallCodeHelper">
            <summary>
            A helper class that will convert HAN device installation codes to a 16 byte link key which can then be used to add the
            device to a specific meter's network.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize">
            <summary>
            Possible Install Code Sizes
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize.Size48Bits">
            <summary>48 Bits - 6 Bytes</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize.Size64Bits">
            <summary>64 Bits - 8 Bytes</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize.Size96Bits">
            <summary>96 Bits - 12 Bytes</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize.Size128Bits">
            <summary>128 Bits - 16 Bytes</summary>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.GenerateInstallCode(Itron.Metering.Utilities.InstallCodeHelper.InstallCodeSize)">
            <summary>
            Generates a new Install Code with the specified length
            </summary>
            <param name="size">The size of the Install Code to generate</param>
            <returns>The new install code</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.GenerateLinkKey(System.Byte[])">
            <summary>
            Generates the link key from the specified Installation Code
            </summary>
            <param name="installationCode">The installation Code</param>
            <returns>The resulting Link Key</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.GenerateLinkKey(System.String)">
            <summary>
            Generates a 16 byte link key from the provided installation code.
            </summary>
            <param name="installationCode">A valid 48, 64, 96 or 128 bit hex installation code with a 16 bit CRC checksum.</param>
            <returns>A 16 byte link key.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <i>installationCode</i> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <i>installationCode</i> is not a valid installation code.</exception>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.HexStringToByteArray(System.String)">
            <summary>
            Returns a <see cref="T:System.Byte"/> array that is the byte of the provided input.
            </summary>
            <param name="hexString">The source that will be used to generate the byte value.</param>
            <returns>A <see cref="T:System.Byte"/> array that contains the byte value of the provided input.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.MMOHash(System.Byte[])">
            <summary>
            Returns a <see cref="T:System.Byte"/> array that is the MMO hash of the provided input.
            </summary>
            <param name="input">The source that will be used to generate the MMO hash return value.</param>
            <returns>A <see cref="T:System.Byte"/> array that contains the MMO hash of the provided input.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.AesHash(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="totalLength"></param>
            <param name="result"></param>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.AesHashNextBlock(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="block"></param>
            <param name="result"></param>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.StandAloneEncryptBlock(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="block"></param>
        </member>
        <member name="M:Itron.Metering.Utilities.InstallCodeHelper.EncryptAes(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="key"></param>
            <param name="IV"></param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="T:Itron.Metering.Utilities.IPrintable">
            <summary>
            Interface for printable sub controls
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.IPrintable.Print">
            <summary>
            Prints the subcontrol
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.IPrintable.PrintPreview">
            <summary>
            Shows a print preview for the subcontrol
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.IPrintable.PageSetup">
            <summary>
            Shows the page setup for the subcontrol
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ISwappableMainControl">
            <summary>
            Interface for the main control events.
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ISwappableMainControl.ChangeMainControlEvent">
            <summary>
            Event for changing the main control
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ISwappableMainControl.ChangeSubControlEvent">
            <summary>
            Event for changing the sub control
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ISwappableMainControl.TitleChangedEvent">
            <summary>
            Event for changing the main control's title
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ISwappableSubControl">
            <summary>
            Interface for the sub control events.
            </summary>
        </member>
        <member name="E:Itron.Metering.Utilities.ISwappableSubControl.ChangeSubControlEvent">
            <summary>
            Event for changing the sub control
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.ListViewColumnSorter">
            <summary>
            This class is an implementation of the 'IComparer' interface.
            This code was taken from a Microsoft tutorial found at
            http://support.microsoft.com/kb/319401.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ListViewColumnSorter.ColumnToSort">
            <summary>
            Specifies the column to be sorted
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ListViewColumnSorter.OrderOfSort">
            <summary>
            Specifies the order in which to sort (i.e. 'Ascending').
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.ListViewColumnSorter.ObjectCompare">
            <summary>
            Case insensitive comparer object
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ListViewColumnSorter.#ctor">
            <summary>
            Class constructor.  Initializes various elements
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.ListViewColumnSorter.SortColumn">
            <summary>
            Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ListViewColumnSorter.Order">
            <summary>
            Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger">
            <summary>
            General purpose log class.  Can be used for logging debug info, errors,
            and protocol streams.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger.LoggingLevel">
            <summary>
            LoggingLevels are used to initialize the Logger with the maximum 
            level that should be included in generated log files.  They are 
            also implicitly or explicitly associated with every message written
            to the log file.
            </summary>
            <remarks>
            The higher the LoggingLevel, the more information will be included
            in the log file.  Lower levels filter out details.
            </remarks>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.NoLogging">
            <summary>
            No data will be logged.  No log file will be saved.  This is
            the default or unitialized logger level.  It doesn't make sense
            to initialize a logger with this level or write to it with
            this level.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.Minimal">
            <summary>
            Minimal log data.  No data will be added to the device objects
            to support FCS Reconfiguration with this logging level.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.Functional">
            <summary>
            High level functional messages.  Typically device driver
            messages like “Updating DST”.  This level of logging includes 
            all Minimal log level messages.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.Detailed">
            <summary>
            Errors and details of functions.  This level of logging 
            includes all Functional log level messages.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.Protocol">
            <summary>
            Full protocol stream. This level of logging includes all 
            Detailed log level messages.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingLevel.ZigBeeProtocol">
            <summary>
            All ZigBee communcation with the radio. This level of logging
            includes all Protocol log level messages. This level of 
            logging includes all ZigBee/C177 profile wrapping and all
            primatives sent back and forth to the radio.  This level makes
            Protocol level look concise.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger.ProtocolDirection">
            <summary>
            Enumerates protocol message marking for easier interpretation.
            </summary>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.ProtocolDirection.Send">
            <summary>
            Sent data will be prepended with a "(S) " to ease 
            interpretation.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.ProtocolDirection.Receive">
            <summary>
            Sent data will be prepended with a "(R) " to ease 
            interpretation.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger.CloseAction">
            <summary>
            Enumerates the two possible actions to be performed on closing.
            </summary>
            <remarks>
            The logger should always be closed by the managing client.  If the
            client dies a horrible death, the logger's destructor will attempt
            to close and write the file as marches towards that final sunset.
            </remarks>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.CloseAction.SaveFile">
            <summary>
            All data will be flushed, file will be saved and closed.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.CloseAction.DeleteFile">
            <summary>
            File will be closed and deleted.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger.LoggingState">
            <summary>
            Enumeration for the states of the logger.
            
            NOTE: Pausing the logger does not suspend the logger's timestamps.
            </summary>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            09/13/06 mrj 7.35.00        Created
            
            </remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingState.RUNNING">
            <summary>
            The logger will write all text to the file, based on the
            LoggingLevel.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingState.PROTOCOL_SENDS_SUSPENDED">
            <summary>
            The logger will not write text with the ProtocolDirection set to
            Send.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.LoggingState.LOGGER_PAUSED">
            <summary>
            The logger will not write anything to the log.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.Logger.TimeMode">
            <summary>
            The mode to use for logging the time
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.TimeMode.TimeElapsed">
            <summary>
            Use the amount of time since logging was started
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.TimeMode.CurrentTime">
            <summary>
            Use the PC's current time
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.TimeMode.NoTimeStamp">
            <summary>
            Do not write a timestamp
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.Initialize(Itron.Metering.Utilities.Logger.LoggingLevel,System.String,Itron.Metering.Utilities.Logger.TimeMode)">
            <summary>
            Initializes the logger for use.  This method must be called before
            writing to the log.
            </summary>
            <param name="LogLevel">Sets the level of detail to be stored in the log file</param>
            <param name="FileName">The name of the log file to be created</param>
            <param name="mode">The time mode of the log entries</param>
            <returns>
            true if successful.  A return value of false probably means that
            that the file couldn't be created for some reason.  Check to see
            if a read-only copy already exists.
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteLine(LoggingLevel.Functional, "Text to log");
            	</code>
            </example>
            
            Revision History	
            MM/DD/YY who Version Issue#    Description
            -------- --- ------- ------    ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	   Created
            08/30/06 mrj 7.35.00           Changed the file to be open with the
                                               file sharing on.
            07/28/16 MP  4.70.10 WR617210  Removed overload constructor and changed time mode to optional parameter
                                               with default of "CurrentTime"
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.Close(Itron.Metering.Utilities.Logger.CloseAction)">
            <summary>
            Closes and saves or deletes the file.  This method should be called
            when you're done logging.
            </summary>
            <remarks>
            The file is created during Initialize.  This method will delete the 
            file if requested.  If this is not called the file will be saved by
            default.
            </remarks>
            <param name="Action">Save or Delete the file upon closing</param>
            <returns>
            true if successful
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            09/13/06 mrj 7.35.00        Added support for pausing the logger
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteLine(Itron.Metering.Utilities.Logger.LoggingLevel,System.String)">
            <summary>
            Generic function that writes a line exactly as given to the log 
            file.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            
            Where appropriate, the WriteDetail, WriteException, and 
            WriteProtocol methods should be used instead of this method in to
            standardize the format of those messages. 
            </remarks>
            <param name="Level">Logging Detail level</param>
            <param name="Line">The message to write</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteLine(LoggingLevel.Functional, "Text to log");
            	</code>
            </example>
            <overloads>
            WriteLine(LoggingLevel Level)
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteLine(Itron.Metering.Utilities.Logger.LoggingLevel)">
            <summary>
            Writes a blank line with the specified LoggingLevel
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Level">The Detail level of the message</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteLine(LoggingLevel.Functional);
            	</code>
            </example>
            <overloads>
            WriteLine(LoggingLevel Level, string Line)
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteDetail(System.Object,System.String)">
            <summary>
            Writes a message with LoggingLevel = Detailed to the log file.
            Writes class and method name information from the caller and
            inserts it into the message.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Caller">The object that called the method</param>
            <param name="Line">The message to write to the log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteDetail(this, "Text to log");
            	</code>
            </example>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteException(System.Object,System.Exception)">
            <summary>
            Writes a message with LoggingLevel = Detailed to the log file.
            Writes class and method name information from the caller and
            and exception details to the log file.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Caller">The object that called the metho</param>
            <param name="e">The exception to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteException(this, e);
            	</code>
            </example>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteProtocol(Itron.Metering.Utilities.Logger.ProtocolDirection,System.Byte[])">
            <summary>
            Writes all of the given data to the log file.  Data is formatted
            for easier reading.  Protocol messages are only written if the 
            logger's logging level is set at Protocol
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Direction">The direction of the data to log</param>
            <param name="Data">The data to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteProtocol(ProtocolDirection.Send, Data);
            	</code>
            </example>
            <overloads>
            WriteProtocol(ProtocolDirection Direction, byte[] Data, int MaxBytes) 
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            09/13/06 mrj 7.35.00        Added support for pausing the logger
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteProtocol(Itron.Metering.Utilities.Logger.ProtocolDirection,System.Byte[],System.Int32)">
            <summary>
            Writes up to MaxBytes of the given data to the log file.  Data is
            formatted for easier reading.  Protocol messages are only written
            if the logger's logging level is set at Protocol.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Direction">The Direction of the data to log</param>
            <param name="Data">The data to log</param>
            <param name="MaxBytes">The maximum number of bytes to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteProtocol(ProtocolDirection.Send, Data, 20);
            	</code>
            </example>
            <overloads>
            WriteProtocol(ProtocolDirection Direction, byte[] Data) 
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteProtocol(Itron.Metering.Utilities.Logger.ProtocolDirection,System.String)">
            <summary>
            Writes a string as the protocol data
            </summary>
            <param name="Direction">The direction the data is being sent</param>
            <param name="strValue">The string to write</param>
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteZigBeeProtocol(Itron.Metering.Utilities.Logger.ProtocolDirection,System.Byte[])">
            <summary>
            Writes all of the given data to the log file.  Data is formatted
            for easier reading.  Protocol messages are only written if the 
            logger's logging level is set at ZigBeeProtocol
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Direction">The direction of the data to log</param>
            <param name="Data">The data to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteZigBeeProtocol(ProtocolDirection.Send, Data);
            	</code>
            </example>
            <overloads>
            WriteZigBeeProtocol(ProtocolDirection Direction, 
                                byte[] Data, int MaxBytes) 
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            01/24/08 mcm 1.00.x  Extra level for ZigBee details 
            
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.WriteZigBeeProtocol(Itron.Metering.Utilities.Logger.ProtocolDirection,System.Byte[],System.Int32)">
            <summary>
            Writes up to MaxBytes of the given data to the log file.  Data is
            formatted for easier reading.  Protocol messages are only written
            if the logger's logging level is set at ZigBeeProtocol.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Direction">The direction of the data to log</param>
            <param name="Data">The data to log</param>
            <param name="MaxBytes">The maximum number of bytes to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteZigBeeProtocol(ProtocolDirection.Send, Data, 20);
            	</code>
            </example>
            <overloads>
            WriteZigBeeProtocol(ProtocolDirection Direction, byte[] Data) 
            </overloads>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.Logger.EchoLevel">
            <summary>
            Sets the message level to echo to the console. The default is 
            NoLogging.
            </summary>
            <remarks>
            You probably don't want to echo Protocol messages.   
            Echoing significantly affects performance.
            </remarks>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.Logger.FileName">
            <summary>
            Returns the current file name
            </summary>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            08/29/06 mrj 7.35.00 N/A	Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.Logger.Initialized">
             <summary>
             Returns whether or not the logger has been iniailized.  This can be
             used to determine if the logger is currently logging information or
             not.
             </summary>
             Revision History	
             MM/DD/YY who Version Issue# Description
             -------- --- ------- ------ ---------------------------------------
             08/29/06 mrj 7.35.00 N/A	Created
            
        </member>
        <member name="P:Itron.Metering.Utilities.Logger.LoggerState">
            <summary>
            Property used to set the state of the logger.
            
            NOTE: You cannot set the logger to PROTOCOL_SENDS_SUSPENDED if it
            is currently LOGGER_PAUSED.  Need to set to RUNNING prior to the
            change.
            
            Also, pausing the logger does not suspend the logger's time.
            </summary>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            09/13/06 mrj 7.35.00 N/A	Created
            
            </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.Logger.Stream">
            <summary>
            Property used to the FileStream being used by the logger. Can be 
            used to access the currently open file contents.
            </summary>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            09/21/07 mcm         N/A	Created
            
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.#ctor">
            <summary>
            This private constructor is implicitly called the first time an 
            instance of the logger is assigned.
            </summary>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            08/29/06 mrj 7.35.00        Set the start time in the case that the
                                        file is initialized with the append
            09/13/06 mrj 7.35.00        Added support for pausing the logger
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.Finalize">
            <summary>
            The destructor will attempt to close the log file, but it should 
            not be relied upon to do so.
            </summary>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.GetTimestamp">
            <summary>
            Returns time elapsed since the logger was initialized.
            </summary>
            <returns>
            Elapsed time formatted as mm:ss:fff, where f is milliseconds
            </returns>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/07/06 mcm 7.30.00 N/A	Created
            
        </member>
        <member name="M:Itron.Metering.Utilities.Logger.Write(Itron.Metering.Utilities.Logger.LoggingLevel,System.String)">
            <summary>
            Handles writing for all of the public write methods. Inserts a 
            timestamp if the LoggingLevel is Detailed or Protocol.
            </summary>
            <remarks>
            Echos the line to the console if the Echo level is set at or higher
            than the specified LoggingLevel
            </remarks>
            <param name="Level">The logging level</param>
            <param name="Line">The message to log</param>
            <returns>
            none
            </returns>
            <exception>
            This class catches all of its exceptions.  The idea is that logging
            is a bonus feature.  If it fails, don't let it prevent other 
            processing.
            </exception>
            
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            06/01/06 mcm 7.30.00 N/A	Created
            08/30/06 mrj 7.35.00        Changed the file to be open with the
                                        file sharing on.
            09/13/06 mrj 7.35.00        Added support for pausing the logger
            09/06/07 mcm 8.10.25        Added lock around write to file
            
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.TheInstance">
            <summary>
            Use this field to initialize a local instance of the logger.  Only
            one instance of this object is created.  The manager of the logger
            should call the Initialize() method before any other methods are 
            called by any users of the logger.
            </summary>
            <returns>
            A reference to the current Logger object
            </returns>
            <exception>
            None
            </exception>
            <example>
            	<code>
            	m_LogFile = Logger.TheInstance;
            	m_LogFile.Initialize(LoggingLevel.Protocol, "MyLogFile.txt");
            	
            	m_LogFile.WriteLine(LoggingLevel.Functional, "Text to log");
            	</code>
            </example>
            <seealso>
            Singleton pattern description
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpatterns/html/ImpSingletonInCsharp.asp
            </seealso>		
        </member>
        <member name="F:Itron.Metering.Utilities.Logger.TheDLMSDecryptedLoggerInstance">
            <summary>
            DLMS decripted logger instance
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.LogicalNameHelper">
            <summary>
            Logical Name Helper methods
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.LogicalNameHelper.LogicalNameString(System.Byte[])">
            <summary>
            Gets the string representation of a logical name
            </summary>
            <param name="ln">The logical name to get</param>
            <returns>The string representation of the LN</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.LogicalNameHelper.ParseLogicalName(System.String)">
            <summary>
            Parses the logical name from it's string format
            </summary>
            <param name="logicalName">The logical name in string format</param>
            <returns>The logical name as a byte array</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.LogicalNameHelper.ToObisCode(System.Byte[])">
            <summary>
            Extension method that converts a logical name byte array to an OBIS Code string
            </summary>
            <param name="logicalName">The Logical Name byte array</param>
            <returns>The OBIS Code string</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.LogicalNameHelper.ToLogicalName(System.String)">
            <summary>
            Extension method that converts an OBIS code string to a byte array
            </summary>
            <param name="obisCode">The OBIS Code string</param>
            <returns>The OBIS Code as a byte array</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.LogonEventArgs">
            <summary>
            Event arguments for logging on to a meter.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.LogonEventArgs.#ctor(System.Boolean,System.UInt64,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="bUseZigBeeLogon">Whether or not to log on using ZigBee.</param>
            <param name="ulRadioID">The ZigBee Device to log on to.</param>
            <param name="uiChannel">The radio frequency channel to use for communication</param>
        </member>
        <member name="M:Itron.Metering.Utilities.LogonEventArgs.#ctor(System.Boolean,System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="ulRadioID">The ZigBee Device to log on to.</param>
            <param name="bUseZigBeeLogon">Whether or not to log on using ZigBee.</param>
        </member>
        <member name="M:Itron.Metering.Utilities.LogonEventArgs.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.LogonEventArgs.RadioID">
            <summary>
            Gets or sets the ID of the ZigBee device to log on to.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.LogonEventArgs.UseZigBeeLogon">
            <summary>
            Gets or sets whether or not to log on using ZigBee.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.LogonEventArgs.RadioChannel">
            <summary>
            Gets or sets the radio channel to use
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MapiMessage">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.reserved">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.subject">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.noteText">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.messageType">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.dateReceived">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.conversationID">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.flags">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.originator">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.recipCount">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.recips">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.fileCount">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiMessage.files">
            <summary></summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MapiFileDesc">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.reserved">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.flags">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.position">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.path">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.name">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiFileDesc.type">
            <summary></summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MapiRecipDesc">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.reserved">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.recipClass">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.name">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.address">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.eIDSize">
            <summary></summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MapiRecipDesc.entryID">
            <summary></summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MAPI">
            <summary>
            This class wraps the MAPI32.dll for sending emails
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.AddRecipientTo(System.String)">
            <summary>
            Add to
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.AddRecipientCC(System.String)">
            <summary>
            Adds CC
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.AddRecipientBCC(System.String)">
            <summary>
            Adds BCC
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.AddAttachment(System.String)">
            <summary>
            Adds attachment
            </summary>
            <param name="strAttachmentFileName"></param>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.SendMailPopup(System.String,System.String)">
            <summary>
            Puts up an email message
            </summary>
            <param name="strSubject"></param>
            <param name="strBody"></param>		
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.SendMailDirect(System.String,System.String)">
            <summary>
            Sends and email message without a dialog
            </summary>
            <param name="strSubject"></param>
            <param name="strBody"></param>
            <returns></returns>
        </member>
        <member name="M:Itron.Metering.Utilities.MAPI.GetLastError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Itron.Metering.Utilities.MeterActivityLog">
            <summary>
            This is a singleton class that represents a persistent log of meter related
            events.  The actual log file encapsilated by this class is an MS Access
            file internally accessed via OLE DB.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.Instance">
             <summary>
             The meter activity log class is a singleton class.  This means that only
             one instance of the class can be created and used per process.  Note 
             that this class is NOT threadsafe so extreme care must be taken if used
             in a multi-threaded application.
             
             All access to the activity log class must be made through this property.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Open">
             <summary>
             This method is responsible for opening a connection to the activity
             log database.  Note that this method is a fairly expensive operation in
             terms of time and, while DB connections are also rare commodities, applications
             must be concious of the trade off between performance and resource management
             when maintaining database connections.
             </summary>
             <exception >
             OLEDBExceptions and IO exceptions can be thrown by this method
             </exception>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Add(Itron.Metering.Utilities.MeterActivityLogEntry)">
             <summary>
             This method adds a single activity log entry to the database. Note that 
             this method will not throw exceptions but will simply return a value of
             'false' if the given log entry cannot be added to the event log.  However,
             since the user will be notified via a Message Box, it is imperative that this
             method not be used in a background process.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Read">
             <summary>
             This method is responsible for reading the entire activity log contents
             and returning them as a list of log entries
             </summary>
             <exception >
             OLEDBExceptions and IO exceptions can be thrown by this method
             </exception>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Merge(System.String)">
             <summary>
             This method is responible for adding all of the event log records found
             in the given database file to the current meter activity log.  No changes 
             will be made to the incoming database file.
             </summary>
             <exception >
             OLEDBExceptions and IO exceptions can be thrown by this method
             </exception>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.RollOffEvents(System.DateTime)">
             <summary>
             This method permanently deletes any event records that are older than
             the given date/time
             </summary>
             <exception >
             OLEDBExceptions and IO exceptions can be thrown by this method
             </exception>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Close">
             <summary>
             Closes the OLE DB connection to the activity log database    
             </summary>
             <exception >
             OLEDBExceptions and IO exceptions can be thrown by this method
             </exception>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.ActivityLogFile">
             <summary>
             This read-only property returns the full path name of the 
             activity log file.  It is useful when client applications want
             to make copies of the log file for exports or back-ups.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.FilterByDate">
             <summary>
             This boolean property is used to enable/disable filtering of the event 
             log by start and stop dates.  If this property is set to true then the
             'Read' method will only return event log entries that are between the 
             values of the start and stop date properties.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.FilterStartDate">
             <summary>
             This property is used in conjunction with the FilterByDate property.  
             If the FilterByDate property is set to true, then this property establishes
             the date of the earliest event log record that can be returned by a call
             to the 'Read' method.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.FilterEndDate">
             <summary>
             This property is used in conjunction with the FilterByDate property.  
             If the FilterByDate property is set to true, then this property establishes
             the date of the latest event log record that can be returned by a call
             to the 'Read' method.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.ApplicationFilter">
             <summary>
             This boolean property is used to enable/disable filtering of the event 
             log by the name of the calling application.  If this property is set 
             to true then the 'Read' method will only return event log entries that 
             were created by the calling application.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLog.FilterByResult">
             <summary>
             This boolean property is used to enable/disable filtering of the event 
             log by the result of the event  If this property is set to true, then the
             'Read' method will only return event log entries that were unsuccessful.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.Read(System.Data.OleDb.OleDbConnection)">
             <summary>
             This method reads and retrieves activity log records from the persistent
             database by building a query based on the classes public properties.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.ReadAll(System.Data.OleDb.OleDbConnection)">
             <summary>
             This method returns the entire list of activity log entries from the 
             persistent database.  Note that no filters are applied and every 
             entry is returned.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.BuildQueryCommand">
             <summary>
             This private method is used to build the appropriate query to retrieve
             event log records according to the values of the class's filtering 
             properties
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.BuildApplicationQuery">
             <summary>
             This method builds a SQL condition statement based on the calling
             application name
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.BuildDateQuery">
             <summary>
             This method builds a SQL conditional for filtering event log entries 
             based on the start and end filter properties
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.BuildResultQuery">
             <summary>
             This method builds a SQL conditional for returning only unsuccessful
             event log entries 
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.#ctor">
             <summary>
             The primary constructor for the activity log is a private member.
             This design prevents client applications from creating copies of 
             the activity log and allows for a single instance of this object
             to be used throughout an application.
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.ReadActivityRecord(System.Data.OleDb.OleDbDataReader,Itron.Metering.Utilities.MeterActivityLogEntry)">
             <summary>
             This method is responsible for extracting a meter activity log entry
             object from an OLE DB query result set
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLog.SetEnvironmentProperties(Itron.Metering.Utilities.MeterActivityLogEntry)">
             <summary>
             This method is responsible for insuring that the default values of a meter
             activity log record are set appropriately prior to posting the record to 
             the persistent database
             </summary>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/04/08 MAH		Created
            
             </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.MeterActivityLogEntry">
            <summary>
            This class represents a single entry in the Meter Activity log.
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum">
            <summary>
             This enumeration represents all of the activities that a 
             meter activity log entry can represent.  A new item should be 
             added to this enumeration whenever a new meter action is added
             to a client application.  
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.Logon">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.Initialization">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.TOUReconfiguration">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DemandReset">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClockAdjust">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetBillingRegisters">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EditRegisters">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.RegisterHost">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DeregisterHost">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetRFLAN">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DecommissionHAN">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DecommissionDropNode">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SetDataDeliveryConfig">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SetCollectionConfig">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ActivatePendingTable">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearPendingTable">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetActivityStatus">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetInversionTamper">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetRemovalTamper">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnterTestMode">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ExitTestMode">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ConnectService">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisconnectService">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ValidateProgram">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.FirmwareLoad">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.CreateEDL">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.CreateHHF">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.CreateMIF">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearVQData">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearSitescanSnapshots">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigModemAnswerDelay">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigPhonePrefix">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.WritePendingTOU">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigurePasswords">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigureTertiaryPassword">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigureCustomSchedule">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ReconfigureDST">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.CreateCRF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearAllMeterData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ConfigureKYZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnableHANJoining">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ForceTimeSync">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SiteScanReconfigure">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SetHANMultiplier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnableHAN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisableHAN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnableSL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisableSL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnableDisconnectSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisableDisconnectSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisableSignedAuthorization">
            <summary>
            Signed Authorization disabled
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.EnableC1218OverZigBee">
            <summary>
            Enable C12.18 Over ZigBee
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.DisableC1218OverZigBee">
            <summary>
            Disable C12.18 Over ZigBee
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearFWDLEventLog">
            <summary>
            Clear the firmware download event log
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SwitchCommToOpenWay">
            <summary>
            Switch Communications to OpenWay Operational Mode
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SwitchCommToChoiceConnect">
            <summary>
            Switch Communications to ChoiceConnect Operational Mode
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.HANMoveOut">
            <summary>
            Perform HAN Move Out Operations
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.HANDisablePricing">
            <summary>
            Disable HAN pricing model.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ResetMagneticTamper">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.ClearResetLimitingHaltCondition">
            <summary>
            Clear HAN Reset Limiting Halt Condition
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.UpdateCellularGateway">
            <summary>
            Update the Cellular Gateway Address
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.UpdateERTUtilityID">
            <summary>
            Update the ERT Utility ID
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.SealCanadian">
            <summary>
            Seal Canadian Procedure
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.UnsealCanadian">
            <summary>
            Unseal Canadian Procedure
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum.CreateCoreDump">
            <summary>
            Create a Core Dump File
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum">
            <summary>
            This enumeration contains the set of all possible activity outcomes.
            Note that many statuses are activity specific but care should be taken
            when adding new statuses to insure that there are no ambiguous entries.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.Success">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.SecurityError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.Timeout">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.DeviceSetupConflict">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidConfiguration">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.OperationIncomplete">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.UnsupportedOperation">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TimingConstraint">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.UnrecognizedError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.LoadVoltageDetected">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ProtocolError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InsufficentDiskSpace">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidPath">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.CannotOpenFile">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.CannotReadFile">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.FileIOError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.MemoryError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.MemoryMapError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NetworkError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.OffLine">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ClockError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.DataMissing">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoChangeRequested">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.RetryError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ScheduleNotSupported">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ScheduleExpired">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ScheduleNotValid">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.DSTNotSupported">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TOUNotSupported">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoCalendarData">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoTOUData">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoBillingScheduleData">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.PendingTablesFull">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.DuplicatePassword">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TimeCrossesIntervalBoundry">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InDSTChange">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.FileTooLarge">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidType">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.VersionOutOfRange">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.RevisionOutOfRange">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.WriteError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ZigbeeFWTypeInvalid">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.MeterInTestMode">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.MeterNotInTestMode">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.CommunicationsError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.CRCError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidDate">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidParameter">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoDataSelected">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NoProfileData">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TIMBlockMismatch">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TIMNotFound">
            <summary>
                
            </summary>
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.SystemResourceError">
            <summary>
                
            </summary>
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.TIMError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.DatabaseAccessError">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.MismatchedID">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ProgramNotFound">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.InvalidProgram">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.UserAborted">
            <summary>
                
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.OutOfSyncLessThanHysteresis">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.ReconfigureError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.NotSynced">
            <summary>
            The meter was not synced
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.OperationInProgress">
            <summary>
            This operation is already in progress
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum.CommitError">
            <summary>
            Error committing data.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLogEntry.#ctor(Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum,Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum)">
            <summary>
            This constructor should be used when it is impossible to determine
            the meter's identity.
            </summary>
            <param name="eActivityType" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum">
            </param>
            <param name="eActivityStatus" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum">
            </param>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLogEntry.#ctor(System.String,System.String,System.String,Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum,Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum)">
            <summary>
            This constructor should be used whenever logging an event and 
            the meter's identity is known.
            </summary>
            <param name="strDeviceType" type="string">
            </param>
            <param name="strUnitID" type="string">
            </param>
            <param name="strSerialNumber" type="string">
            </param>
            <param name="eActivityType" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum">
            </param>
            <param name="eActivityStatus" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum">
            </param>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLogEntry.#ctor">
            <summary>
            This constructor should only be used to retrieve activity log
            entries from the database. Since all of the member fields will be 
            initialized from persistent data, there is no need to initialize
            them here
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.EventTime">
            <summary>
            Property to get and set the date and time that the event occurred.
            Returned as a DateTime object
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.EventTime = DateTime.Now;
            DateTime y = x.EventTime;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.MeterType">
            <summary>
            Property that gets and sets the meter type for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.MeterType = "SENTINEL";
            string y = x.MeterType;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class  
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.UnitID">
            <summary>
            Property that gets and sets the unit id for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.UnitID = "SENTINEL";
            string y = x.UnitID;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.SerialNumber">
            <summary>
            Property that gets and sets the meter serial number for the log item
            </summary>
            <example>
            <code>
            CCustSchedItem x = new CCustSchedItem();
            x.SerialNumber = "SENTINEL";
            string y = x.SerialNumber;
            </code>
            </example>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            07/14/05 rrr 7.13.00 N/A	Creation of class 
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityType">
            <summary>
            Property to retrieve or record the type of activity that was performed    
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatus">
            <summary>
            Property to retrieve or record the outcome of activity that was performed    
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.Source">
            <summary>
            Property to retrieve or record any data used in performing a given activity.
             For example, this property should contain the name of the program used to 
             configure a meter or the name of the firmware file when downloading  
             firmware to a meter.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.SourceVersion">
            <summary>
            This property represents the version number associated with the source
            property (if applicable).  Note that this property should not be used 
            if a given activity does not use versioned input data
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.ResultFile">
            <summary>
            This property represents the name of the file that was generated as 
            a result the given activity.  Note that we typically only record the
            file name and extension.
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.ApplicationName">
            <summary>
            This property represents the name of the application that performed
            the given action.  This property is typically set implicitly when the 
            log entry is added to the meter activity log
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.ApplicationVersion">
            <summary>
            This property represents the revision and version of the application that  
            performed the given action.  This property is typically set implicitly when
            the log entry is added to the meter activity log
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.MachineName">
            <summary>
            This property represents the name of the PC or workstation that performed  
            the given action.  This property is typically set implicitly when the log
            entry is added to the meter activity log
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.MeterActivityLogEntry.UserName">
            <summary>
            This property represents the login name of the user that performed the given 
            action. This property is typically set implicitly when the log entry is 
            added to the meter activity log
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLogEntry.TranslateActivityName(Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum)">
             <summary>
             This method is used to translate any activity log entry event type
             into a string for display purposes
             </summary>
             <param name="eActivityType" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityTypeEnum">
             </param>
             <returns>
             A text representation of the activity name
             </returns>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/18/08 MAH		Created
              06/30/09 AF  2.20.10 136279 Changed "CIM" to "CRF"
              08/05/11 AF  2.51.33        Added clear fwdl log
              05/01/12 jrf 2.60.19 TREQ2893 Added HAN move out.
              05/07/12 jrf 2.60.20 TREQ5994 Added disable HAN pricing.
              06/14/13 jrf 2.80.38 TQ???? Added case for updating ert utility id.
              10/07/16 AF  4.70.21 717544 Added case for create core dump file
            
             Note that the switch statement in this method causes an excessive 
             complexity warning.  This is per design and the warning has been disabled.
             </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.MeterActivityLogEntry.TranslateActivityStatus(Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum)">
             <summary>
             This method is used to translate any activity log event status
             into a string for display purposes
             </summary>
             <param name="eActivityStatus" type="Itron.Metering.Utilities.MeterActivityLogEntry.ActivityStatusEnum">
             </param>
             <returns>
             A text representation of the activity result
             </returns>
             <remarks>
              Revision History	
              MM/DD/YY Who Version Issue# Description
              -------- --- ------- ------ -------------------------------------------
              04/18/08 MAH		Created
            
             Note that the switch statement in this method causes an excessive 
             complexity warning.  This is per design and the warning has been disabled.
             </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.NetTableReaderScript">
            <summary>
            Class used to represent Net Table Reader scripts
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.NetTableReaderScript.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strFileName">the net table reader script file path</param>
        </member>
        <member name="M:Itron.Metering.Utilities.NetTableReaderScript.HasEPSEMTag(System.String)">
            <summary>
            Determines whether the script has an EPSEM tag
            </summary>
            <param name="strFile">the full file path of the script</param>
            <returns>true if the EPSEM tag is found; false, otherwise</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.ExpirationDate">
            <summary>
            Gets the expiration date
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.MinHWVersion">
            <summary>
            Gets the minimum hardware version
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.MaxHWVersion">
            <summary>
            Gets the maximum hardware version
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.MinFWVersion">
            <summary>
            Gets the minimum firmware version
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.MaxFWVersion">
            <summary>
            Gets the maximum firmware version
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.ScriptName">
            <summary>
            Gets the name of the script
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.Description">
            <summary>
            Gets the script description
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.NetTableReaderScriptRoot">
            <summary>
            Gets the net table reader script root, "NetTableReader"
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderScript.Commands">
            <summary>
            Gets the list of commands in the script
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.NetTableReaderScript.ReadNTRScript(System.Xml.XmlReader)">
            <summary>
            Reads the net table reader script
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Itron.Metering.Utilities.NetTableReaderScript.ReadCommands(System.Xml.XmlReader)">
            <summary>
            Reads the commands portion of the net table reader script
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Itron.Metering.Utilities.NetTableReaderCommand">
            <summary>
            Helper class to encapsulate a single command in a net table reader script
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.NetTableReaderCommand.#ctor">
            <summary>
            Constructer
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.CommandName">
            <summary>
            Command name as taken from the script.  Could be an empty string
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.CommandType">
            <summary>
            Command type as read from the script.  The only types recognized are "Read" and "Write"
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.TableID">
            <summary>
            The table id of the table to read or write
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.Offset">
            <summary>
            For offset reads and writes. This is the offset into the table to begin the read or write
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.Length">
            <summary>
            For offset reads and writes, this is the number of bytes to read or transmit
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.Data">
            <summary>
            For table writes, this is the data to write to the table
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.NetTableReaderCommand.IsOffsetReadOrWrite">
            <summary>
            Returns true if the script contains either the Offset tag, the Length tag or both
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.OpticalProbeTypes">
            <summary>
            The bits indicating which item to reset via MFG procedure 6
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.SCHLUMBERGER">
            <summary>
            Schlumberger
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.SCHLUMBERGER_FRANCE">
            <summary>
            Sclumberger (France)
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.SCHLUMBERGER_SPAIN">
            <summary>
            Schlumberger (Spain)
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.US_MICROTEL_PM_300">
            <summary>
            US Microtel PM-300
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.US_MICROTEL_PM_500">
            <summary>
            US Microtel PM-500
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.US_MICROTEL_PM_600">
            <summary>
            US Microtel PM-600
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.GE_SMARTCOUPLER_SC1">
            <summary>
            GE Smartcoupler SC-1
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.GENERIC_1_NO_DTR">
            <summary>
            Generic 1 (DTR Not Set)
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.OpticalProbeTypes.GENERIC_2_DTR">
            <summary>
            Generic 2 (DTR Set)
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.COpticalProbes">
             <summary>
             Summary description for OpticalProbes.
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            07/29/04 REM 7.00.15 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.COpticalProbes.OpticalProbeInfo">
            <summary>
            Structure for storing Optical Probe information
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.OpticalProbeInfo.m_blnDTR">
            <summary>
            OpticalProbeInfo public member variable
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.OpticalProbeInfo.m_blnRTS">
            <summary>
            OpticalProbeInfo public member variable
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.OpticalProbeInfo.m_strTitle">
            <summary>
            OpticalProbeInfo public member variable
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.COpticalProbes.OpticalProbeInfo.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="blnDTR"></param>
            <param name="blnRTS"></param>
            <param name="strTitle"></param>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.REG_KEY">
            <summary>
            protected const string REG_KEY = "Software\\Itron\\Metering\\Data\\Optical Probes";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.REG_KEY_PROBE_BASE">
            <summary>
            protected const string REG_KEY_PROBE_BASE = "Probe";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.REG_VALUE_DTR">
            <summary>
            protected const string REG_VALUE_DTR = "DTR";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.REG_VALUE_RTS">
            <summary>
            protected const string REG_VALUE_RTS = "RTS";
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.COpticalProbes.REG_VALUE_TITLE">
            <summary>
            protected const string REG_VALUE_TITLE = "Title";
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.COpticalProbes.#ctor">
             <summary>
             Constructor
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            07/29/04 REM 7.00.15 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.COpticalProbes.GetOpticalProbeType(System.String)">
            <summary>
            Gets the optical probe type from the name of the optical probe.
            </summary>
            <param name="strOpticalProbeName">The name of the optical probe to get</param>
            <returns>The Optical probe type as an enum</returns>
        </member>
        <member name="P:Itron.Metering.Utilities.COpticalProbes.Item(System.Int32)">
             <summary>
             Returns optical probe information for the index requested
             </summary>
             <remarks><pre>
            Revision History
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------------
            07/29/04 REM 7.00.15 N/A    Initial Release
            </pre></remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.COpticalProbes.Length">
            <summary>
            Returns the number of optical probes
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.OSVersionChecker">
            <summary>
            Static Helper Methods for checking whether or not the current OS is 64-bit
            </summary>
            <remarks>
            This code is taken from http://1code.codeplex.com/SourceControl/changeset/view/39074#842775 and is essentially 
            Environment.Is64BitOperatingSystem that is available in the .NET 4.0 framework. The code is necessary here so 
            that we can build for the .NET 3.5 framework
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.OSVersionChecker.Is64BitOperatingSystem">
            <summary>
            The function determines whether the current operating system is a 
            64-bit operating system.
            </summary>
            <returns>
            The function returns true if the operating system is 64-bit; 
            otherwise, it returns false.
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.OSVersionChecker.DoesWin32MethodExist(System.String,System.String)">
            <summary>
            The function determins whether a method exists in the export 
            table of a certain module.
            </summary>
            <param name="moduleName">The name of the module</param>
            <param name="methodName">The name of the method</param>
            <returns>
            The function returns true if the method specified by methodName 
            exists in the export table of the module specified by moduleName.
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.ReportAttributes">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.DeviceID">
            <summary>
                
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.ReportTitle">
            <summary>
                
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.ReportSource">
            <summary>
                
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.ProfileStart">
            <summary>
                
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.ProfileEnd">
            <summary>
                
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.ReportAttributes.ReportSpecification">
            <summary>
                
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.#ctor(System.String)">
            <summary>
                
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.Read">
            <summary>
                
            </summary>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.Write">
            <summary>
                
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.Exists(System.String)">
            <summary>
                
            </summary>
            <param name="strPathName" type="string">
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="T:Itron.Metering.Utilities.ReportAttributes.ADSFile">
            <summary>
            ADS File mimmicks the <c>File</c> class providing support for writing NTFS Alternate Data streams
            <example>StreamWriter sw = ADSFile.AppendText([filename], [stream])</example>
            </summary>
            <seealso cref="T:System.IO.File"/>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Win32 API call to create or open a file
            </summary>
            <param name="filename">Name of file to create including stream</param>
            <param name="access">File access permissions</param>
            <param name="sharemode">Share mode</param>
            <param name="security_attributes">Additional file security attributes</param>
            <param name="creation">File creation options</param>
            <param name="flags">optional flags</param>
            <param name="template">Creation template</param>
            <returns><c>IntPtr</c>Pointer to file handle</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.CloseHandle(System.IntPtr)">
            <summary>
            Win32 API call to close a file handle
            </summary>
            <param name="handle"><c>InPtr</c> to file handle</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.#ctor">
            <summary>
                
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.Finalize">
            <summary>
                
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.OpenText(System.String,System.String)">
            <summary>
            Opens an existing UTF-8 encoded <c>StreamReader</c> stream within a file for reading.
            <seealso cref="M:System.IO.File.OpenText(System.String)"/>
            </summary>
            <param name="path">The path to the file with stream.</param>
            <param name="stream">The stream to read from.</param>
            <returns>A <c>StreamReader</c> on the specified path.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Unable to open specified file or stream.</exception>
        </member>
        <member name="M:Itron.Metering.Utilities.ReportAttributes.ADSFile.Exists(System.String,System.String)">
            <summary>
            Delete a stream within a file
            </summary>
            <param name="path">The path to the file with stream.</param>
            <param name="stream">The stream to read/write to.</param>
            <returns><c>bool</c> indicating existance of stream</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.SecureDataStorage">
            <summary>
            Stores data in a secure format
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.SIGNED_AUTH_KEY_ID">
            <summary>ID for the Signed Authorization Encryption Key</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.SIGNED_AUTH_IV_ID">
            <summary>ID for the Signed Authorization Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.RMA_SIGNED_AUTH_KEY_ID">
            <summary>ID for the Signed Authorization Encryption Key</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.RMA_SIGNED_AUTH_IV_ID">
            <summary>ID for the Signed Authorization Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.ZIGBEE_KEY_ID">
            <summary>ID for the ZigBee Encryption Key</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.ZIGBEE_IV_ID">
            <summary>ID for the ZigBee Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.REPLICA_KEY_ID">
            <summary>ID for the Replica File Encryption Key</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.REPLICA_IV_ID">
            <summary>ID for the Replica File Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.OPTICAL_PASSWORD">
            <summary>ID for the Replica File Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.SIGNED_AUTHORIZATION_KEY">
            <summary>ID for the Replica File Encryption IV</summary>
        </member>
        <member name="F:Itron.Metering.Utilities.SecureDataStorage.DEFAULT_LOCATION">
            <summary>The default file location</summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataStorage.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filePath">The path to the file used to store the data</param>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataStorage.StoreSecureData(System.String,System.Byte[])">
            <summary>
            Encrypts and stores the specified data in the file
            </summary>
            <param name="dataID">The ID of the data to store</param>
            <param name="secureData">The secure data to store</param>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataStorage.RetrieveSecureData(System.String)">
            <summary>
            Retrieve the Secure Data with the specified ID from the file
            </summary>
            <param name="dataID">The ID of the secure data to retrieve</param>
            <returns>The unencrypted secure data</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataStorage.StoreEntropyData">
            <summary>
            Stores the Entropy Data to use for encrypting the rest of the data stored in the file
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataStorage.RetrieveEntropyData">
            <summary>
            Retrieves the store Entropy data from the secure file.
            </summary>
            <returns>The Entropy data from the file</returns>
        </member>
        <member name="T:Itron.Metering.Utilities.SecureData">
            <summary>
            Handles the reading and writing of the Secure Data File
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureData.Load(System.String)">
            <summary>
            Loads the Secured Data from the specified file
            </summary>
            <param name="filePath">The path to the file to load.</param>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureData.Save">
            <summary>
            Saves the Secured Data to the current file path
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureData.SaveAs(System.String)">
            <summary>
            Saves the Secured Data to the specified file
            </summary>
            <param name="filePath">The path to the file to save.</param>
        </member>
        <member name="P:Itron.Metering.Utilities.SecureData.SecureItems">
            <summary>
            Gets the list of Secure Items stored in the file
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.SecureDataItem">
            <summary>
            An individual secure item
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataItem.#ctor(System.String,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="dataID">The ID of the new Secure Data Item</param>
            <param name="binaryData">The secure binary data</param>
        </member>
        <member name="M:Itron.Metering.Utilities.SecureDataItem.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="element">The XElement object storing the necessary data</param>
        </member>
        <member name="P:Itron.Metering.Utilities.SecureDataItem.DataID">
            <summary>
            Gets the Data ID for the item
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.SecureDataItem.BinaryData">
            <summary>
            Gets the Binary Data for the item
            </summary>
        </member>
        <member name="P:Itron.Metering.Utilities.SecureDataItem.XElement">
            <summary>
            Gets the XElement object for the secure data item
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.XmlSerializableStringDictionary">
            <summary>
            String Dictionary that can be serialized to XML
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.XmlSerializableStringDictionary.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.XmlSerializableStringDictionary.GetSchema">
            <summary>
            Gets the XML Schema
            </summary>
            <returns>The XML Schema</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.XmlSerializableStringDictionary.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the object from XML
            </summary>
            <param name="reader">The XML Reader</param>
        </member>
        <member name="M:Itron.Metering.Utilities.XmlSerializableStringDictionary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the object to XML
            </summary>
            <param name="writer">The XML Writer</param>
        </member>
        <member name="T:Itron.Metering.Utilities.TimeStamp">
            <summary>
            This class provides static methods to manipulate timestamps
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.TimeStamp.AlignToBeggingOfInterval(System.DateTime,System.Int32)">
            <summary>
            Returns a DateTime value that is 1 second past the start of 
            the interval the TimeToAdjust is in.  The value of the given
            DateTime instance is NOT modified by this method.
            </summary>
            <param name="TimeToAdjust">The Timestamp to be adjusted</param>
            <param name="IntervalLength">Interval length in minutes</param>
            <returns>
            A new DateTime that represents the first second in the interval
            </returns>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            04/04/07 mcm 8.00.24 2816   Support for viewing HHF files
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.TimeStamp.AlignToEndOfInterval(System.DateTime,System.Int32)">
            <summary>
            UNTESTED CODE! This isn't used anywhere right now.  If you use 
            it, test it!
            
            Returns a DateTime value that is at the end of the interval the
            TimeToAdjust is in.  The value of the given DateTime instance is
            NOT modified by this method.
            </summary>
            <param name="TimeToAdjust">The Timestamp to be adjusted</param>
            <param name="IntervalLength">Interval length in minutes</param>
            <returns>A new DateTime that represents the EOI</returns>
            <remarks>
            Revision History	
            MM/DD/YY who Version Issue# Description
            -------- --- ------- ------ ---------------------------------------
            04/04/07 mcm 8.00.24 2816   Support for viewing HHF files
            </remarks>
        </member>
        <member name="T:Itron.Metering.Utilities.Rate">
            <summary>
            Enumeration of TOU rates.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.A">
            <summary>
            Rate A
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.B">
            <summary>
            Rate B
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.C">
            <summary>
            Rate C
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.D">
            <summary>
            Rate D
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.E">
            <summary>
            Rate E
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.F">
            <summary>
            Rate F
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.G">
            <summary>
            Rate G
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.Rate.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Itron.Metering.Utilities.UInt24">
            <summary>
            A 24 bit unsigned integer.
            </summary>
            <remarks>Pilfered from http://www.koders.com/csharp/fidBDDFD047CA2C2EBE14D28C843E6993F764F24056.aspx?s=propertyinfo </remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt24.SizeOf">
            <summary>
            The number of bytes this type will take.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt24.MaxValue">
            <summary>
            The maximum value of this type.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt24.MinValue">
            <summary>
            The minimum value of this type.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Explicit(System.Int32)~Itron.Metering.Utilities.UInt24">
            <summary>
            Converts a 32 bit signed integer to a 24 bit unsigned integer by taking the 24 least significant bits.
            </summary>
            <param name="value">The 32 bit value to convert.</param>
            <returns>The 24 bit value created by taking the 24 least significant bits of the 32 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Explicit(System.UInt32)~Itron.Metering.Utilities.UInt24">
            <summary>
            Converts a 32 bit signed integer to a 24 bit unsigned integer by taking the 24 least significant bits.
            </summary>
            <param name="value">The 32 bit value to convert.</param>
            <returns>The 24 bit value created by taking the 24 least significant bits of the 32 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Implicit(Itron.Metering.Utilities.UInt24)~System.Int32">
            <summary>
            Converts the 24 bits unsigned integer to a 32 bits signed integer.
            </summary>
            <param name="value">The 24 bit value to convert.</param>
            <returns>The 32 bit value converted from the 24 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Implicit(Itron.Metering.Utilities.UInt24)~System.UInt32">
            <summary>
            Converts the 24 bits unsigned integer to a 32 bits signed integer.
            </summary>
            <param name="value">The 24 bit value to convert.</param>
            <returns>The 32 bit value converted from the 24 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Implicit(Itron.Metering.Utilities.UInt24)~System.Int64">
            <summary>
            Converts the 24 bits unsigned integer to a 64 bits signed integer.
            </summary>
            <param name="value">The 24 bit value to convert.</param>
            <returns>The 64 bit value converted from the 24 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Implicit(Itron.Metering.Utilities.UInt24)~System.UInt64">
            <summary>
            Converts the 24 bits unsigned integer to a 64 bits unsigned integer.
            </summary>
            <param name="value">The 424 bit value to convert.</param>
            <returns>The 64 bit value converted from the 24 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Implicit(Itron.Metering.Utilities.UInt24)~System.Single">
            <summary>
            Converts the 24 bits unsigned integer to a float.
            </summary>
            <param name="value">The 24 bit value to convert.</param>
            <returns>The float value converted from the 24 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.Equals(Itron.Metering.Utilities.UInt24)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Equality(Itron.Metering.Utilities.UInt24,Itron.Metering.Utilities.UInt24)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.op_Inequality(Itron.Metering.Utilities.UInt24,Itron.Metering.Utilities.UInt24)">
            <summary>
            Returns true iff the two values represent different values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent different values.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt24.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Itron.Metering.Utilities.UInt48">
            <summary>
            A 48 bit unsigned integer.
            </summary>
            <remarks>Pilfered from http://www.koders.com/csharp/fid648C6F212A51384CC8E17212A3180AF7ADD34713.aspx?s=propertyinfo </remarks>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt48.SizeOf">
            <summary>
            The number of bytes this type will take.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt48.MaxValue">
            <summary>
            The maximum value of this type.
            </summary>
        </member>
        <member name="F:Itron.Metering.Utilities.UInt48.MinValue">
            <summary>
            The minimum value of this type.
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style to its 48-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string representing the number to convert.</param>
            <param name="style">
            A bitwise combination of NumberStyles values that indicates the permitted format of s. 
            A typical value to specify is NumberStyles.Integer.
            </param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information about value.</param>
            <returns>A 48-bit unsigned integer equivalent to the number specified in s.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Implicit(System.UInt32)~Itron.Metering.Utilities.UInt48">
            <summary>
            Converts a 32 bit unsigned integer to a 48 bit unsigned integer by taking all the 32 bits.
            </summary>
            <param name="value">The 32 bit value to convert.</param>
            <returns>The 48 bit value created by taking all the 32 bits of the 32bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Explicit(System.Int64)~Itron.Metering.Utilities.UInt48">
            <summary>
            Converts a 64 bit signed integer to a 48 bit unsigned integer by taking the 48 least significant bits.
            </summary>
            <param name="value">The 64 bit value to convert.</param>
            <returns>The 48 bit value created by taking the 48 least significant bits of the 64 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Explicit(System.UInt64)~Itron.Metering.Utilities.UInt48">
            <summary>
            Converts a 64 bit unsigned integer to a 48 bit unsigned integer by taking the 48 least significant bits.
            </summary>
            <param name="value">The 64 bit value to convert.</param>
            <returns>The 48 bit value created by taking the 48 least significant bits of the 64 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Implicit(Itron.Metering.Utilities.UInt48)~System.Int64">
            <summary>
            Converts the 48 bits unsigned integer to a 64 bits signed integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 64 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Implicit(Itron.Metering.Utilities.UInt48)~System.UInt64">
            <summary>
            Converts the 48 bits unsigned integer to a 64 bits unsigned integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 64 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Explicit(Itron.Metering.Utilities.UInt48)~System.Byte">
            <summary>
            Converts the 48 bits unsigned integer to an 8 bits unsigned integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 8 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.Equals(Itron.Metering.Utilities.UInt48)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Equality(Itron.Metering.Utilities.UInt48,Itron.Metering.Utilities.UInt48)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.op_Inequality(Itron.Metering.Utilities.UInt48,Itron.Metering.Utilities.UInt48)">
            <summary>
            Returns true iff the two values represent different values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent different values.</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Itron.Metering.Utilities.UInt48.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Itron.Metering.Utilities.VersionChecker">
            <summary>
            This class provides helper functions for use in verifying firmware versions.
            Version numbers are typically provided as floating point values and simple
            comparisions of floating point values can be problematic.  These methods
            take advantage of the fixed format of version numbers and provide safer
            methods for comparison
            </summary>
        </member>
        <member name="M:Itron.Metering.Utilities.VersionChecker.CompareTo(System.Single,System.Single,System.Single)">
            <summary>
            This comparision method allows the caller to specify the tolerance
            used when comparing two floating point values.  If the difference
            between the two values is within the given tolerance than the values
            are assumed to be equal although the actual floating point values may
            not be
            </summary>
            <param name="fltCurrentVersion" type="float">
            The version number as returned by the file or device that is to be 
            validated
            </param>
            <param name="fltTargetVersion" type="float">
            The fixed or target version number that the file or device is being
            compared to.
            </param>
            <param name="fltTolerance" type="float">
            The maximum allowable difference between the two version numbers that
            can exist while still considering the two numbers to be equal
            </param>
            <returns>
            Returns -1 if the current version is less than the target
            Returns 0 if the current version is equal to the target
            Returns 1 if the current version is greater than the target
            </returns>
            <remarks>
             Revision History	
             MM/DD/YY Who Version Issue# Description
             -------- --- ------- ------ -------------------------------------------
             06/26/08 mah                Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.VersionChecker.CompareTo(System.Double,System.Double,System.Double)">
            <summary>
            Compares the two double values to see if they are equal within the given tolerance
            </summary>
            <param name="firstValue">The first value to compare</param>
            <param name="secondValue">The second value to compare</param>
            <param name="tolerance">The tolerance allowed for the values to be equal</param>
            <returns>-1 if the first value is less than second. 1 if the first value is greater than the second. 0 if the first and second are within the specified tolerance</returns>
        </member>
        <member name="M:Itron.Metering.Utilities.VersionChecker.CompareTo(System.Single,System.Single)">
            <summary>
            Returns -1 if the current version is less than the target
            Returns 0 if the current version is equal to the target
            Returns 1 if the current version is greater than the target
            This comparison method should be used to compare version numbers with the
            format of #.###   If more or less precision is required, a different 
            tolerance should be used.
            </summary>
            <param name="fltCurrentVersion" type="float">
            The version number as returned by the file or device that is to be 
            validated
            </param>
            <param name="fltTargetVersion" type="float">
            The fixed or target version number that the file or device is being
            compared to.
            </param>
            <returns>
            Returns -1 if the current version is less than the target
            Returns 0 if the current version is equal to the target
            Returns 1 if the current version is greater than the target
            </returns>
            <remarks>
             Revision History	
             MM/DD/YY Who Version Issue# Description
             -------- --- ------- ------ -------------------------------------------
             06/26/08 mah                Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.VersionChecker.CompareTo(System.Double,System.Double)">
            <summary>
            This comparison method should be used to compare version numbers with the
            format of #.###   If more or less precision is required, a different 
            tolerance should be used.
            </summary>
            <param name="currentVersion" type="float">
            The version number as returned by the file or device that is to be 
            validated
            </param>
            <param name="targetVersion" type="float">
            The fixed or target version number that the file or device is being
            compared to.
            </param>
            <returns>
            Returns -1 if the current version is less than the target
            Returns 0 if the current version is equal to the target
            Returns 1 if the current version is greater than the target
            </returns>
            <remarks>
             Revision History	
             MM/DD/YY Who Version Issue# Description
             -------- --- ------- ------ -------------------------------------------
             09/18/14 jrf                Created
            </remarks>
        </member>
        <member name="M:Itron.Metering.Utilities.VersionChecker.CompareTo(System.Single,System.Byte,System.Single,System.Byte)">
            <summary>
            This comparison method can be used to compare version, revision and build values.
            </summary>
            <param name="currentVersion" type="float">
            The version number as returned by the file or device that is to be 
            validated.
            </param>
            <param name="currentBuild" type="byte">
            The build number as returned by the file or device that is to be 
            validated.
            </param>
            <param name="targetVersion" type="float">
            The fixed or target version number that the file or device is being
            compared to.
            </param>
            <param name="targetBuild" type="byte">
            The fixed or target build number that the file or device is being
            compared to.
            </param>
            <returns>-1 if the current is less than target. 
                      1 if the current is greater than the target. 
                      0 if the current and target are equal</returns>
        </member>
    </members>
</doc>
