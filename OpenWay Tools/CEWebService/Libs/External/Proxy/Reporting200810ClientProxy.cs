//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditEvent", Namespace="http://www.itron.com/ami/2008/10/reporting")]
    public enum AuditEvent : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewConfigGroup = 25001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportConfigGroup = 25002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditConfigGroup = 25003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DownloadConfigGroup = 25004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DownloadTouProgram = 25005,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewTouProgram = 25006,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportTouProgram = 25007,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditTouProgram = 25008,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportFirmware = 25009,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DownloadFirmware = 25010,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportEndpointDef = 25011,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportEndpointList = 25012,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewApplicationGroup = 25013,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ArchiveGroup = 25014,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditDeviceSecurityCodes = 25015,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImportRelayDef = 25016,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InteractiveRead = 25017,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MarkJobHistorical = 25018,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CancelJob = 25019,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditMySettings = 25020,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditPasswordSettings = 25021,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewSecurityGroup = 25022,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteSecurityGroup = 25023,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditSystemSettings = 25024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestoreSystemSettings = 25025,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewUser = 25026,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LockedUser = 25027,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditUser = 25028,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResetPasswordForUser = 25029,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteEndpoint = 25030,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveEndpoint = 25031,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteFailedAuthentication = 25032,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NodePing = 25033,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ManuallyDeregister = 25035,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ManuallyAssignedDeviceSecurityCodes = 25036,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteTagDiscrepancy = 25037,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewApplication = 25044,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditApplication = 25045,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeSearchTypeBasic", Namespace="http://www.itron.com/ami/2008/10/reporting")]
    public enum NodeSearchTypeBasic : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Endpoints = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Groups = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigTagDiscrepancyOption", Namespace="http://www.itron.com/ami/2008/10/reporting")]
    public enum ConfigTagDiscrepancyOption : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DiscrepantOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CorrectedOnly = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityFault", Namespace="http://www.itron.com/ami/2008/10/security")]
    public partial class SecurityFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        private System.DateTime OccurredWhenField;
        
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime OccurredWhen
        {
            get
            {
                return this.OccurredWhenField;
            }
            set
            {
                this.OccurredWhenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.itron.com/ami/2008/10/reporting", ConfigurationName="Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.IReportService")]
    public interface IReportService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogBasicReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogBasicReportResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogBasicReportSecu" +
            "rityFault", Name="SecurityFault")]
        string AuditLogBasicReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.AuditEvent auditEvent, System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/AuditLogReportSecurityF" +
            "ault", Name="SecurityFault")]
        string AuditLogReport(bool isAllUsers, string[] listOfUserNames, Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.AuditEvent[] listOfAuditEvents, System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/BatteryLifeReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/BatteryLifeReportRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/BatteryLifeReportSecuri" +
            "tyFault", Name="SecurityFault")]
        string BatteryLifeReport(int minMinutesOnBattery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsBasicRepo" +
            "rt", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsBasicRepo" +
            "rtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsBasicRepo" +
            "rtSecurityFault", Name="SecurityFault")]
        string CommStatisticsBasicReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.NodeSearchTypeBasic keyType, string key, System.DateTime timeOfLastReadMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsReportRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/CommStatisticsReportSec" +
            "urityFault", Name="SecurityFault")]
        string CommStatisticsReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.NodeSearchTypeBasic keyType, string[] listOfKeys, System.DateTime timeOfLastReadMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigTagDiscrepancyRep" +
            "ort", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigTagDiscrepancyRep" +
            "ortResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigTagDiscrepancyRep" +
            "ortSecurityFault", Name="SecurityFault")]
        string ConfigTagDiscrepancyReport(string configGroupName, Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.ConfigTagDiscrepancyOption discrepancyOption, System.DateTime lastFoundStartTime, System.DateTime lastFoundStopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationDownloadRe" +
            "port", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationDownloadRe" +
            "portResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationDownloadRe" +
            "portSecurityFault", Name="SecurityFault")]
        string ConfigurationDownloadReport(System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationGroupDetai" +
            "lReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationGroupDetai" +
            "lReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationGroupDetai" +
            "lReportSecurityFault", Name="SecurityFault")]
        string ConfigurationGroupDetailReport(string configGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationMgmtReport" +
            "", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationMgmtReport" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ConfigurationMgmtReport" +
            "SecurityFault", Name="SecurityFault")]
        string ConfigurationMgmtReport(System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FailedReadsReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/FailedReadsReportRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FailedReadsReportSecuri" +
            "tyFault", Name="SecurityFault")]
        string FailedReadsReport(System.DateTime timeOfLastReadMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsReport" +
            "", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsReport" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsReport" +
            "SecurityFault", Name="SecurityFault")]
        string FirmwareDownloadsReport(System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsRunnin" +
            "gReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsRunnin" +
            "gReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareDownloadsRunnin" +
            "gReportSecurityFault", Name="SecurityFault")]
        string FirmwareDownloadsRunningReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareStatusReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareStatusReportRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/FirmwareStatusReportSec" +
            "urityFault", Name="SecurityFault")]
        string FirmwareStatusReport(bool includeProductionVersion, bool includeEndpointCommModuleType, bool includeEndpointHanModuleType, bool includeEndpointRegisterType, bool includeRelayRegisterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/GroupMgmtReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/GroupMgmtReportResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/GroupMgmtReportSecurity" +
            "Fault", Name="SecurityFault")]
        string GroupMgmtReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/HanModuleReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/HanModuleReportResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/HanModuleReportSecurity" +
            "Fault", Name="SecurityFault")]
        string HanModuleReport(string serialNumberSearch, string macAddressSearch, System.DateTime lastModifiedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/JobStatusReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/JobStatusReportResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/JobStatusReportSecurity" +
            "Fault", Name="SecurityFault")]
        string JobStatusReport(bool showConfigurationJobs, bool showFirmwareJobs, bool showInterrogationJobs, bool showOtherJobs, bool showServerJobs, bool showHistoricalJobs, bool showOnlyRunningJobs, System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/NodeStatusOverviewRepor" +
            "t", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/NodeStatusOverviewRepor" +
            "tResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/NodeStatusOverviewRepor" +
            "tSecurityFault", Name="SecurityFault")]
        string NodeStatusOverviewReport(string serverName, string cellRelaySN, bool showWarnMeters, bool showGoodMeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RegistrationStatusRepor" +
            "t", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/RegistrationStatusRepor" +
            "tResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RegistrationStatusRepor" +
            "tSecurityFault", Name="SecurityFault")]
        string RegistrationStatusReport(bool includeRegistered, bool includeNeverRegistered, bool includeDeregistered, bool includeFailedAuthenticate, System.DateTime timeOfLastDeregisterMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RelaysReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/RelaysReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RelaysReportSecurityFau" +
            "lt", Name="SecurityFault")]
        string RelaysReport(bool showNonRegistered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RFLanHealthOverviewRepo" +
            "rt", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/RFLanHealthOverviewRepo" +
            "rtResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/RFLanHealthOverviewRepo" +
            "rtSecurityFault", Name="SecurityFault")]
        string RFLanHealthOverviewReport(string serverName, string cellRelaySN, bool showWarnMeters, bool showUnknownMeters, bool showGoodMeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SecurityGroupsReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/SecurityGroupsReportRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SecurityGroupsReportSec" +
            "urityFault", Name="SecurityFault")]
        string SecurityGroupsReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ServersReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/ServersReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/ServersReportSecurityFa" +
            "ult", Name="SecurityFault")]
        string ServersReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemLogReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemLogReportResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemLogReportSecurity" +
            "Fault", Name="SecurityFault")]
        string SystemLogReport(System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemUpdatesReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemUpdatesReportResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/SystemUpdatesReportSecu" +
            "rityFault", Name="SecurityFault")]
        string SystemUpdatesReport(bool includeActivateFirmwareDownload, bool includeApplicationGroupMCAddressDownload, bool includeCancelFirmwareDownload, bool includeConfigurationDownload, bool includeFirmwareDownload, bool includeStartFirmwareDownload, bool includeTimeOfUseDownload, System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramDetailR" +
            "eport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramDetailR" +
            "eportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramDetailR" +
            "eportSecurityFault", Name="SecurityFault")]
        string TimeOfUseProgramDetailReport(string programName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramReportR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/TimeOfUseProgramReportS" +
            "ecurityFault", Name="SecurityFault")]
        string TimeOfUseProgramReport(System.DateTime startTime, System.DateTime stopTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2008/10/reporting/IReportService/UsersReport", ReplyAction="http://www.itron.com/ami/2008/10/reporting/IReportService/UsersReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.SecurityFault), Action="http://www.itron.com/ami/2008/10/reporting/IReportService/UsersReportSecurityFaul" +
            "t", Name="SecurityFault")]
        string UsersReport();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IReportServiceChannel : Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.IReportService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.IReportService>, Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.IReportService
    {
        
        public ReportServiceClient()
        {
        }
        
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string AuditLogBasicReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.AuditEvent auditEvent, System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.AuditLogBasicReport(auditEvent, startTime, stopTime);
        }
        
        public string AuditLogReport(bool isAllUsers, string[] listOfUserNames, Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.AuditEvent[] listOfAuditEvents, System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.AuditLogReport(isAllUsers, listOfUserNames, listOfAuditEvents, startTime, stopTime);
        }
        
        public string BatteryLifeReport(int minMinutesOnBattery)
        {
            return base.Channel.BatteryLifeReport(minMinutesOnBattery);
        }
        
        public string CommStatisticsBasicReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.NodeSearchTypeBasic keyType, string key, System.DateTime timeOfLastReadMax)
        {
            return base.Channel.CommStatisticsBasicReport(keyType, key, timeOfLastReadMax);
        }
        
        public string CommStatisticsReport(Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.NodeSearchTypeBasic keyType, string[] listOfKeys, System.DateTime timeOfLastReadMax)
        {
            return base.Channel.CommStatisticsReport(keyType, listOfKeys, timeOfLastReadMax);
        }
        
        public string ConfigTagDiscrepancyReport(string configGroupName, Itron.Ami.Facade.WebServices.Reporting.V200810.ClientProxy.ConfigTagDiscrepancyOption discrepancyOption, System.DateTime lastFoundStartTime, System.DateTime lastFoundStopTime)
        {
            return base.Channel.ConfigTagDiscrepancyReport(configGroupName, discrepancyOption, lastFoundStartTime, lastFoundStopTime);
        }
        
        public string ConfigurationDownloadReport(System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.ConfigurationDownloadReport(startTime, stopTime);
        }
        
        public string ConfigurationGroupDetailReport(string configGroupName)
        {
            return base.Channel.ConfigurationGroupDetailReport(configGroupName);
        }
        
        public string ConfigurationMgmtReport(System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.ConfigurationMgmtReport(startTime, stopTime);
        }
        
        public string FailedReadsReport(System.DateTime timeOfLastReadMax)
        {
            return base.Channel.FailedReadsReport(timeOfLastReadMax);
        }
        
        public string FirmwareDownloadsReport(System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.FirmwareDownloadsReport(startTime, stopTime);
        }
        
        public string FirmwareDownloadsRunningReport()
        {
            return base.Channel.FirmwareDownloadsRunningReport();
        }
        
        public string FirmwareStatusReport(bool includeProductionVersion, bool includeEndpointCommModuleType, bool includeEndpointHanModuleType, bool includeEndpointRegisterType, bool includeRelayRegisterType)
        {
            return base.Channel.FirmwareStatusReport(includeProductionVersion, includeEndpointCommModuleType, includeEndpointHanModuleType, includeEndpointRegisterType, includeRelayRegisterType);
        }
        
        public string GroupMgmtReport()
        {
            return base.Channel.GroupMgmtReport();
        }
        
        public string HanModuleReport(string serialNumberSearch, string macAddressSearch, System.DateTime lastModifiedTime)
        {
            return base.Channel.HanModuleReport(serialNumberSearch, macAddressSearch, lastModifiedTime);
        }
        
        public string JobStatusReport(bool showConfigurationJobs, bool showFirmwareJobs, bool showInterrogationJobs, bool showOtherJobs, bool showServerJobs, bool showHistoricalJobs, bool showOnlyRunningJobs, System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.JobStatusReport(showConfigurationJobs, showFirmwareJobs, showInterrogationJobs, showOtherJobs, showServerJobs, showHistoricalJobs, showOnlyRunningJobs, startTime, stopTime);
        }
        
        public string NodeStatusOverviewReport(string serverName, string cellRelaySN, bool showWarnMeters, bool showGoodMeters)
        {
            return base.Channel.NodeStatusOverviewReport(serverName, cellRelaySN, showWarnMeters, showGoodMeters);
        }
        
        public string RegistrationStatusReport(bool includeRegistered, bool includeNeverRegistered, bool includeDeregistered, bool includeFailedAuthenticate, System.DateTime timeOfLastDeregisterMax)
        {
            return base.Channel.RegistrationStatusReport(includeRegistered, includeNeverRegistered, includeDeregistered, includeFailedAuthenticate, timeOfLastDeregisterMax);
        }
        
        public string RelaysReport(bool showNonRegistered)
        {
            return base.Channel.RelaysReport(showNonRegistered);
        }
        
        public string RFLanHealthOverviewReport(string serverName, string cellRelaySN, bool showWarnMeters, bool showUnknownMeters, bool showGoodMeters)
        {
            return base.Channel.RFLanHealthOverviewReport(serverName, cellRelaySN, showWarnMeters, showUnknownMeters, showGoodMeters);
        }
        
        public string SecurityGroupsReport()
        {
            return base.Channel.SecurityGroupsReport();
        }
        
        public string ServersReport()
        {
            return base.Channel.ServersReport();
        }
        
        public string SystemLogReport(System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.SystemLogReport(startTime, stopTime);
        }
        
        public string SystemUpdatesReport(bool includeActivateFirmwareDownload, bool includeApplicationGroupMCAddressDownload, bool includeCancelFirmwareDownload, bool includeConfigurationDownload, bool includeFirmwareDownload, bool includeStartFirmwareDownload, bool includeTimeOfUseDownload, System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.SystemUpdatesReport(includeActivateFirmwareDownload, includeApplicationGroupMCAddressDownload, includeCancelFirmwareDownload, includeConfigurationDownload, includeFirmwareDownload, includeStartFirmwareDownload, includeTimeOfUseDownload, startTime, stopTime);
        }
        
        public string TimeOfUseProgramDetailReport(string programName)
        {
            return base.Channel.TimeOfUseProgramDetailReport(programName);
        }
        
        public string TimeOfUseProgramReport(System.DateTime startTime, System.DateTime stopTime)
        {
            return base.Channel.TimeOfUseProgramReport(startTime, stopTime);
        }
        
        public string UsersReport()
        {
            return base.Channel.UsersReport();
        }
    }
}
