<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1FlexGrid.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1FlexGrid.C1ListBox">
            <summary>
            Represents a ListBox with checkable items and advanced auto-search.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1ItemCheckEventHandler">
            <summary>
            Internal delegate and parameters for C1ItemCheck event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ColumnFilter">
            <summary>
            Represents a filter that contains a <see cref="P:C1.Win.C1FlexGrid.ColumnFilter.ValueFilter"/> and a
            <see cref="P:C1.Win.C1FlexGrid.ColumnFilter.ConditionFilter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.IC1ColumnFilter">
            <summary>
            Interface implemented by column filter objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1ColumnFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1ColumnFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter;
            False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1ColumnFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Control"/> to be used to modify the filter at 
            run time.</returns>
            <remarks>The control returned must implement the <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilterEditor"/>
            interface.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.IC1ColumnFilter.IsActive">
            <summary>
            Gets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter; False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilterEditor"/> that is used to edit the filter 
            at run time.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnFilter.ValueFilter">
            <summary>
            Gets the <see cref="P:C1.Win.C1FlexGrid.ColumnFilter.ValueFilter"/> contained in this <see cref="T:C1.Win.C1FlexGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnFilter.ConditionFilter">
            <summary>
            Gets the <see cref="P:C1.Win.C1FlexGrid.ColumnFilter.ConditionFilter"/> contained in this <see cref="T:C1.Win.C1FlexGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ColumnFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1FlexGrid.ColumnFilter"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.IC1ColumnFilterEditor">
            <summary>
            Interface implemented by column filter editor controls.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1ColumnFilterEditor.Initialize(C1.Win.C1FlexGrid.C1FlexGridBase,System.Int32,C1.Win.C1FlexGrid.IC1ColumnFilter)">
            <summary>
            Initializes the editor with parameters from a filter to be edited.
            </summary>
            <param name="grid"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the column to be filtered.</param>
            <param name="columnIndex">Index of the column that contains the values to be filtered.</param>
            <param name="filter"><see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilter"/> being edited.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1ColumnFilterEditor.ApplyChanges">
            <summary>
            Applies changes to the filter being edited.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.IC1ColumnFilterEditor.KeepFormOpen">
            <summary>
            Gets a value that determines whether the containing form should remain 
            open even when it is deactivated.
            </summary>
            <remarks>
            This property allows custom editors to display modal dialogs.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ColumnFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.FilterEditorForm">
            <summary>
            Represents a form that contains filter editor controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FilterEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.FilterEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.FilterEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ConditionFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ValueFilter">
            <summary>
            Represents a filter based on a set of values.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter; False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilterEditor"/> that is used to edit the filter at run time.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ValueFilter.ShowValues">
            <summary>
            Gets or sets an array with the values that should be included in the output.
            </summary>
            <remarks>
            Setting this property to null causes the filter to include all values in the output.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ValueFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ValueFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1FlexGrid.ValueFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ValueFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ValueSet">
            <summary>
            Represents a collection of unique values of type <b>T</b>.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.ValueSet"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.#ctor(System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.ValueSet"/>.
            </summary>
            <param name="comparer">The comparer to use when comparing keys.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.Add(System.Object)">
            <summary>
            Adds a value to the collection if not already present.
            </summary>
            <param name="value">Value to add to the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">Value to look for.</param>
            <returns>True if the collection contains the value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.Sort(System.Boolean)">
            <summary>
            Sorts the elements in the collection.
            </summary>
            <remarks>
            This method assumes the elements support the <see cref="T:System.IComparable"/> interface.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.ToList">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from this collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains the objects in this collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValueSet.System#Collections#Generic#IComparer{System#Object}#Compare(System.Object,System.Object)">
            <summary>
            Compare two elements (for use in sorting; nulls appear last)
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ValueSet.Count">
            <summary>
            Gets the number of objects in the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ComboBoxEditor">
            <summary>
            Helper class that provides information about a currently active ComboBox editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ComboBoxEditor.SelectedIndex">
            <summary>
            Gets or sets the selected index in the currently active ComboBox editor.
            </summary>
            <remarks>
            If there's no active editor, or if the editor is not a ComboBox,
            the value returned is -1.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ComboBoxEditor.SelectedItem">
            <summary>
            Gets or sets the selected item in the currently active ComboBox editor.
            </summary>
            <remarks>
            If there's no active editor, or if the editor is not a ComboBox,
            the value returned is null.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ComboBoxEditor.SelectedKey">
            <summary>
            Gets the key that corresponds to the selected item in the currently 
            active ComboBox editor.
            </summary>
            <remarks>
            If there's no active editor, if the editor is not a <see cref="P:C1.Win.C1FlexGrid.ComboBoxEditor.ComboBox"/>, or if the cell 
            being edited does not have an associated <b>DataMap</b>, the value returned is null.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ComboBoxEditor.Items">
            <summary>
            Gets the collection of items in the currently active ComboBox editor.
            </summary>
            <remarks>
            If there's no active editor, or if the editor is not a ComboBox,
            the value returned is null.
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridEditHandler">
            <summary>
            Summary description for GridEditHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridEditorComboBox">
             <summary>
             GridEditorComboBox
             
             C1FlexGrid built-in combo/list editor.
            
             The Items collection contains the string representation for each item. 
             
             The control is owner-drawn, so it can have arbitrary height 
             and display pictures along with the text. 
             </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox">
            <summary>
            Summary description for MaskedComboBox.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.GetValidContent">
            <summary>
            Get valid content, Text if content is invalid
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.IsValid">
            <summary>
            Returns true if the current control content is valid
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.EditPosition(System.Int32)">
            <summary>
            EditPosition method:
            Gets the index of the nth editable position in the mask.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.Mask">
            <summary>
            Mask property:
            Gets or sets the input mask.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.Content">
            <summary>
            Content property:
            Gets the non-literal characters in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.MaskedComboBox.PlaceHolder">
            <summary>
            PlaceHolder property:
            Gets or sets the characters used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.IC1EmbeddedEditor">
            <summary>
            Interface implemented by editors and used by the grid to host edit controls 
            on cells.
            </summary>
            <remarks>
            <para>All built-in grid editors implement this interface, as do the controls in the 
            ComponentOne <b>C1Input</b> library.</para>
            <para>If you want to use a third-party editor with the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/>, consider
            creating a derived class and implementing this interface.</para>
            <para>Note that the methods in <b>IC1EmbeddedEditor</b> are called using reflection. 
            Controls do not need to implement the entire interface. Any public methods with matching 
            signatures (names, parameters, and return values) will be invoked by the grid. 
            The grid supplies default handlers for any methods not implemented by the control.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorInitialize(System.Object,System.Collections.IDictionary)">
            <summary>
            Called to initialize the editor content and styles.
            </summary>
            <param name="value">Contains the grid data that should be displayed in the editor.</param>
            <param name="editorAttributes">Contains a dictionary with keys that correspond to style element names and values for the cell being edited.</param>
            <remarks>
            <para>The <paramref name="editorAttributes"/> dictionary contains the following keys:</para>
            <para><b>BackColor</b>: Cell background color.</para>
            <para><b>ForeColor</b>: Cell foreground color.</para>
            <para><b>Font</b>: Cell font.</para>
            <para><b>Format</b>: Cell format string (e.g. "#,##0.##").</para>
            <para><b>ContentAlignment</b>: Cell text alignment.</para>
            <para><b>Margins</b>: Extra margins around the cell content (in pixels).</para>
            <para><b>Wrap</b>: Whether word wrapping is enabled.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorGetValue">
            <summary>
            Gets the current value of the editor.
            </summary>
            <returns>The current value of the editor (any data type).</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorValueIsValid">
            <summary>
            Gets a value that determines if the editor's current contents are valid.
            </summary>
            <returns>True if the editor currently has valid content (e.g it contains
            an <b>EditMask</b> and all required positions have been filled).
            </returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorUpdateBounds(System.Drawing.Rectangle)">
            <summary>
            Called to update the editor's size and position.
            </summary>
            <param name="rc">The bounds of the cell being edited, in client coordinates.</param>
            <remarks>
            This method is called during initialization and also when the grid scrolls.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorKeyDownFinishEdit(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Gets a value that determines whether a given key should finalize editing.
            </summary>
            <param name="e">Key to be tested.</param>
            <returns>True if the key should finish the edits and close the editor.</returns>
            <remarks>
            <para>If this method returns true, the grid copies the editor value to the cell and
            exits edit mode. The key is then processed by the grid (unless the <b>e.Handled</b> 
            parameter is set to true).</para>
            <para>For example, pressing the down arrow typically causes the grid to exit edit 
            mode and move the cursor to the next row.</para>
            <para>The default handler returns true for the TAB, ENTER, and ESC keys.
            It also handles the arrow keys for editors based on <b>TextBox</b>, <b>ComboBox</b>, 
            and <b>DateTimePicker</b> controls.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorFormat(System.Object,System.String)">
            <summary>
            Formats a given value using a specified mask.
            </summary>
            <param name="value">Value to be formatted.</param>
            <param name="mask">Formatting mask.</param>
            <returns>A string containing the formatted value.</returns>
            <remarks>The default implementation ignores the mask and returns <b>value.ToString()</b>.</remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1EmbeddedEditor.C1EditorGetStyle">
            <summary>
            Gets the editor style, which determines the type of button that is displayed in 
            the cell before and during editing (DropDown, Modal, or None).
            </summary>
            <remarks>
            <para>The default handler returns <b>DropDown</b> for ComboBoxes, DateTimePickers, and
            UpDown controls. It returns <b>None</b> for other control types.</para>
            <para>The <b>UITypeEditorEditStyle</b> enumeration is defined in the <b>System.Drawing.Design</b>
            namespace. The available settings are <b>DropDown</b>, <b>Modal</b>, and <b>None</b>.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridEditorDatePicker">
            <summary>
            Summary description for GridEditor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridEditorNumericTextBox">
            <summary>
            A simple numeric editor that inherits from MaskedTextBox and uses a Format property.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.BaseControls.MaskedTextBox">
            <summary>
            Summary description for MaskedTextBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridEditorNumericTextBox.Format">
            <summary>
            Gets or sets the Format property that specifies how numbers are formatted.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridEditorNumericTextBox.MinValue">
            <summary>
            Gets or sets the minimum value allowed for the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridEditorNumericTextBox.MaxValue">
            <summary>
            Gets or sets the maximum value allowed for the editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridEditorTextBox">
            <summary>
            GridEditorTextBox
            C1FlexGrid built-in textbox editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1EmbeddedEditor">
            <summary>
            Summary description for C1EmbeddedEditor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.IC1MultiColumnDictionary">
            <summary>
            Interface that extends <see cref="T:System.Collections.IDictionary"/> and can be used to implement multi-column data maps.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.IC1MultiColumnDictionary.GetDisplayValue(System.Object)">
            <summary>
            Gets the string that should be displayed in the grid while not in edit mode.
            </summary>
            <param name="key">Value to look up in the dictionary.</param>
            <returns>The string that should be displayed in the grid while not in edit mode.</returns>
            <remarks>
            When the <see cref="T:C1.Win.C1FlexGrid.IC1MultiColumnDictionary"/> is used to populate a <see cref="T:System.Windows.Forms.ComboBox"/>,
            all columns are displayed when the combo is dropped down. When the combo is closed, only one
            column can be displayed. This method returns that value.
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.MultiColumnDictionary">
            <summary>
            Class that implements the <see cref="T:C1.Win.C1FlexGrid.IC1MultiColumnDictionary"/> and can be used as
            a column DataMap to create multi-column combo editors.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class can be used to implement simple string-based
            data maps or bound data maps that get the data from a data source object.
            </remarks>
            <example>
            <para>The code below creates an unbound two-column data map and assigns it to a grid column:</para>
            <code>
            // create string-based MultiColumnDictionary and assign it to column
            // note: this will automatically generate keys of type 'int' for each item,
            // the key values will be stored in the grid.
            string text = "Row1, Col1\tRow1, Col2|Row2, Col1\tRow2, Col3|Row2, Col1\tRow3, Col2";
            MultiColumnDictionary map = new MultiColumnDictionary(text, 0, true);
            _flex.Cols[1].DataMap = map;
            </code>
            <para>The map consists of three items, each with two columns. Because the <b>autoKeys</b>
            parameter was set to true in the map's constructor, the map will have unique integer keys for 
            each value,and those integers will be stored in the grid cells. If <b>autoKeys</b>
            had been set to false, the strings themselves would be used as keys and stored in the grid
            cells.</para>
            <para>The code below creates a bound data map and assigns it to a grid column:</para>
            <code>
            // create data-based MultiColumnDictionary and assign it to column
            // notes: the list will automatically be updated is the data source changes.
            DataTable dt = GetDataTable("employees");
            string[] columnNames = new string[] { "FirstName", "LastName", "Country" };
            MultiColumnDictionary map = new MultiColumnDictionary(dt, "EmployeeID", columnNames, 1);
            _flex.Cols[2].DataMap = map;
            </code>
            <para>This map is bound to an Employees DataTable. The <b>keyColumn</b> parameter is set
            to "EmployeeID", causing this field to be used as a key. When the grid is edited, the values 
            stored in the cells will be the employee's ID. However, this value is never displayed be the grid.</para>
            <para>The drop-down list will show the employee's first name, last name, and country, as specified by the 
            <b>columnNames</b> parameter.</para>
            <para>When the list is closed, the grid will display the employee's last name, as specified
            by the <b>displayColumn</b> parameter.</para>
            <para>Note that this map is dynamically bound to the data source, so if the employees table is
            modified, the editor list will reflect the changes automatically.</para>
            <para>Note also that the usual combo editing features such as auto-search and double-click cycling
            still work.</para>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of an unbound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="items">String that contains the items, delimited by pipe characters ("|"). 
            Each item may contain multiple columns, delimited by tabs (vbTab or '\t').</param>
            <remarks>
            This constructor causes the map to show all columns when the editor is dropped down and only the
            first column when the editor is closed or inactive.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of an unbound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="items">String that contains the items. Items are delimited by pipe characters ("|"). 
            Each item may contain multiple columns, delimited by tabs (vbTab or '\t').</param>
            <param name="displayColumn">Index of the column that is displayed in the grid.</param>
            <param name="autoKeys">True if keys are to be automatically generated, false if the items themselves are 
            to be used as keys. Note that in the latter case, duplicate items are not allowed.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.ComponentModel.ITypedList,System.String,System.String[],System.Int32)">
            <summary>
            Initializes a new instance of a bound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="list">Data source object.</param>
            <param name="keyColumn">Name of the data source column that contains unique keys.</param>
            <param name="columnNames">Array with the names of the columns that are included in the map.</param>
            <param name="displayColumn">Name of the column that is displayed in the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.ComponentModel.ITypedList,System.String)">
            <summary>
            Initializes a new instance of a bound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="list">Data source object.</param>
            <param name="keyColumn">Name of the data source column that contains unique keys.</param>
            <remarks>
            This constructor causes the map to show all columns when the editor is dropped down and only the
            first column when the editor is closed or inactive.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.Data.DataTable,System.String,System.String[],System.Int32)">
            <summary>
            Initializes a new instance of a bound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="table">Data source object.</param>
            <param name="keyColumn">Name of the data source column that contains unique keys.</param>
            <param name="columnNames">Array with the names of the columns that are included in the map.</param>
            <param name="displayColumn">Name of the column that is displayed in the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Initializes a new instance of a bound <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class.
            </summary>
            <param name="table">Data source object.</param>
            <param name="keyColumn">Name of the data source column that contains unique keys.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.MultiColumnDictionary.Clear">
            <summary>
            Removes all entries from the <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowMergingEnum">
            <summary>
            Specifies how adjacent cells are merged for display.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.None">
            <summary>
            Do not merge any cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.Free">
            <summary>
            Merge any adjacent cells with same contents.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.RestrictRows">
            <summary>
            Merge rows only if cells above are also merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.RestrictCols">
            <summary>
            Merge columns only if cells to the left are also merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.RestrictAll">
            <summary>
            Merge cells only if cells above or to the left are also merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.FixedOnly">
            <summary>
            Merge only fixed cells. This setting is useful for setting up complex 
            headers for the data and preventing the data itself from being merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.Spill">
            <summary>
            Allow long entries to spill into empty adjacent cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.Nodes">
            <summary>
            Allow long entries in node rows to spill into empty adjacent cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.Custom">
            <summary>
            Use <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.MergedRanges"/> collection to determine which cells are merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowMergingEnum.Default">
            <summary>
            Use the setting specified for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging"/> property.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1FlexGrid">
            <summary>
            <para>The C1FlexGrid control is a powerful, full-featured grid.</para>
            <para>C1FlexGrid provides advanced features such as outline trees, cell merging, 
            masked editing, translated combo and image lists, owner-draw cells, and automatic
            data aggregation.</para>
            </summary>
            <remarks>
            <para>C1FlexGrid can be used in bound mode, where it displays data from .NET 
            data sources, or in unbound mode, where the grid itself manages the data.</para>
            <para>You can use C1FlexGrid to read and write Excel files (.Xls), or read and write 
            grid contents to and from Xml files.</para>
            <para>Classes derived from <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> should have a LicenseProvider 
            attribute so Visual Studio will embed the appropriate licensing information into 
            projects that use the derived control.</para>
            <para>For example:</para>
            <code>
            [LicenseProvider(typeof(LicenseProvider))]
            public class MyGrid : C1FlexGrid
            {
              // implementation
            }
            </code>
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1FlexGridBase">
            <summary>
            Base class for the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> control.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl">
            <summary>
            Base class for controls that support auto-scrolling behavior.
            </summary>
            <remarks>
            This class is similar to <see cref="T:System.Windows.Forms.ScrollableControl"/>, but provides 
            extra customization, better scroll notification, and support for scroll tracking and 
            Windows XP themes.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.BeginUpdate">
            <summary>
            Maintains performance by preventing the control from updating itself until
            the <see cref="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.EndUpdate"/> method is called.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.EndUpdate">
            <summary>
            Resumes updating the control after calls to the <see cref="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.BeginUpdate"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnThemeChanged">
            <summary>
            Called when the control receives a WM_THEMECHANGED message.
            </summary>
            <remarks>
            The WM_THEMECHANGED message is broadcast to every window following a 
            theme change event. Examples of theme change events are the activation of a 
            theme, the deactivation of a theme, or a transition from one theme to another. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnImeStartComposition">
            <summary>
            Called when the control receives a WM_IME_STARTCOMPOSITION message.
            </summary>
            <remarks>
            The WM_IME_STARTCOMPOSITION message is sent immediately before the IME generates
            the composition string as a result of a keystroke. The message is a notification to
            an IME window to open its composition window. An application should process this 
            message if it displays composition characters itself.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Called after the control scrolls (see the <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> property).
            </summary>
            <param name="sb"><see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBars"/> value that indicates the scroll direction.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnScrollTip(System.Int32)">
            <summary>
            Called before the controls displays a scroll tip.
            </summary>
            <param name="newValue">New value for the vertical scrollbar.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            Builds a rectangle that defines the scrollable portion of the control for a given pair of scroll offsets.
            </summary>
            <param name="dx">Horizontal scroll offset.</param>
            <param name="dy">Vertical scroll offset.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that defines the scrollable portion of the control.</returns>
            <remarks>
            This method is for internal use. It allows derived classes to customize the control scrolling behavior.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            Sets the size of the client area of the control.
            </summary>
            <param name="x">Width of the client area, in pixels.</param>
            <param name="y">Height of the client area, in pixels.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Invalidated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.OnChangeScrollBarPosition(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the new position of a scrollbar in response to a user command.
            </summary>
            <param name="cmd">Scroll command (SB_LINEUP, etc).</param>
            <param name="verticalBar">True for the vertical scrollbar, false for the horizontal scrollbar.</param>
            <param name="curPos">Current scrollbar position.</param>
            <param name="trackPos">Scrollbar thumb position.</param>
            <returns>The new position for the scrollbar.</returns>
            <remarks>
            Derived classes may override this method to customize the scrolling behavior.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
            <remarks>
            <para>Scroll bars are displayed only if the contents of the control extend beyond its 
            client area. For example, if <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBars"/> is set to <see cref="F:System.Windows.Forms.ScrollBars.Horizontal"/>, 
            a horizontal scroll bar is displayed only if the control is not wide enough to display all 
            columns at once.</para>
            <para>Even when it has no scrollbars, the control will still scroll to keep the selection visible. 
            If you want to prevent scrolling, handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScroll"/> event and 
            set its <see cref="F:C1.Win.C1FlexGrid.RangeEventArgs.Cancel"/> parameter to true.</para>
            <para>You can force the control to display scrollbars at all times with the 
            <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ForceScrollBars"/> property.</para>
            <para>You can determine which scrollbars are currently visible with the 
            <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBarsVisible"/> property.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBarsVisible"/>
            <seealso cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ForceScrollBars"/>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition">
            <summary>
            Gets or sets the location of the auto-scroll position.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> property to get or set the scroll position using pixel coordinates.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> properties to get or 
            set the scroll position using cell coordinates.</para>
            </remarks>
            <example>
            This code binds two grids (_flexLeft and _flexRight) together and synchronizes their scrolling in the vertical 
            direction (the user can scroll the grids independently in the horizontal direction).
            <code>
            // bind grids together
            _flexRight.DataSource = _flexLeft;
            _flexLeft.ScrollBars = ScrollBars.Horizontal;
            
            // synchronize vertical scrolling 
            // (this handles the AfterScroll event for both grids)
            void flex_AfterScroll(object sender, C1.Win.C1FlexGrid.RangeEventArgs e)
            {
                // update sender grid (could be _flexLeft or _flexRight)
                C1FlexGrid.C1FlexGrid src = ((C1FlexGrid)sender);
                src.Update();
                
                // get new vertical position from sender grid
                int y = src.ScrollPosition.Y;
                
                // apply new vertical position to the other grid
                if (src.Equals == _flexLeft)
                {
                    _flexRight.ScrollPosition = new Point(_flexRight.ScrollPosition.X, y);
                }
                else
                {
                    _flexLeft.ScrollPosition = new Point(_flexLeft.ScrollPosition.X, y);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBarsVisible">
            <summary>
            Gets a <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBars"/> value that indicates which scrollbars are currently visible.
            </summary>
            <seealso cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollBars"/>
            <seealso cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ForceScrollBars"/>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollableRectangle">
            <summary>
            Gets a rectangle that defines the scrollable portion of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollTrack">
            <summary>
            This property is obsolete. Please use <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ScrollOptions"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollTips">
            <summary>
            This property is obsolete. Please use <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ScrollOptions"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollTipText">
            <summary>
            This property is obsolete. Please use <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event instead.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.ICustomLocalizer">
            <summary>
            Allows callers to override language and specific strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; 
            False to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGetLocalizedString(C1.Win.C1FlexGrid.GetLocalizedStringEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetLocalizedString"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the control.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetAccessibilityObjectById(System.Int32)">
            <summary>
            Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject"/>.
            </summary>
            <param name="objectId">Row index of the accessibility object to return.</param>
            <returns>The <see cref="T:System.Windows.Forms.AccessibleObject"/> for the specified row.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeMouseDown(C1.Win.C1FlexGrid.BeforeMouseDownEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeDoubleClick(C1.Win.C1FlexGrid.BeforeMouseDownEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDoubleClick"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeDragRow(C1.Win.C1FlexGrid.DragRowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.DragRowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterDragRow(C1.Win.C1FlexGrid.DragRowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.DragRowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeDragColumn(C1.Win.C1FlexGrid.DragRowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.DragRowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterDragColumn(C1.Win.C1FlexGrid.DragRowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.DragRowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeSort(C1.Win.C1FlexGrid.SortColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSort"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.SortColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterSort(C1.Win.C1FlexGrid.SortColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSort"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.SortColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeAutosizeRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAutosizeRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeAutosizeColumn(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAutosizeColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeResizeRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAutosizeRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterResizeRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeResizeColumn(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterResizeColumn(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeFreezeRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFreezeRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterFreezeRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFreezeRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeFreezeColumn(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFreezeColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterFreezeColumn(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFreezeColumn"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseHoverCell(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseHoverCell"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
            <remarks>
            This event is deprecated, please use the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseEnterCell"/> or <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseLeaveCell"/>
            events instead.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseEnterCell(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseEnterCell"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseLeaveCell(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseLeaveCell"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeScroll(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScroll"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterScroll(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterScroll"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> object that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnShowScrollTip(C1.Win.C1FlexGrid.ToolTipEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.ToolTipEventArgs"/> object that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeRowColChange(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterRowColChange(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterRowColChange"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeSelChange(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterSelChange(C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSelChange"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnRowColChange(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowColChange"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnSelChange(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SelChange"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnLeaveCell(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveCell"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnEnterCell(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.EnterCell"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeEdit(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnStartEdit(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterEdit(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnLeaveEdit(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnCellButtonClick(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnSetupEditor(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetupEditor"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnValidateEdit(C1.Win.C1FlexGrid.ValidateEditEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.ValidateEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnCellChecked(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellChecked"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.ValidateEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnChangeEdit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ChangeEdit"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnComboDropDown(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboDropDown"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnComboCloseUp(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboCloseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnKeyDownEdit(C1.Win.C1FlexGrid.KeyEditEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyDownEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.KeyEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnKeyUpEdit(C1.Win.C1FlexGrid.KeyEditEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyUpEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.KeyEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnKeyPressEdit(C1.Win.C1FlexGrid.KeyPressEditEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyPressEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.KeyPressEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnCellChanged(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDataRefresh(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDataRefresh"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.ListChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGridError(C1.Win.C1FlexGrid.GridErrorEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.GridErrorEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGetUnboundValue(C1.Win.C1FlexGrid.UnboundValueEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1FlexGrid.UnboundValueEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnSetUnboundValue(C1.Win.C1FlexGrid.UnboundValueEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetUnboundValue"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1FlexGrid.UnboundValueEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDataBindingComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataBindingComplete"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataSourceChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDataMemberChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataMemberChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeCollapse(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeCollapse"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterCollapse(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterCollapse"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnOwnerDrawCell(C1.Win.C1FlexGrid.OwnerDrawCellEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforePageBreak(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforePageBreak"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeginPrint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.EndPrint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.PrintPage"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnStartDrag(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartDrag"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeAddRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAddRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterAddRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterAddRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnCancelAddRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CancelAddRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeDeleteRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDeleteRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterDeleteRow(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDeleteRow"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGetCellErrorInfo(C1.Win.C1FlexGrid.GetErrorInfoEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellErrorInfo"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.GetErrorInfoEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGetRowErrorInfo(C1.Win.C1FlexGrid.GetErrorInfoEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetRowErrorInfo"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.GetErrorInfoEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeSubtotal(C1.Win.C1FlexGrid.SubtotalEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSubtotal"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.SubtotalEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterSubtotal(C1.Win.C1FlexGrid.SubtotalEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSubtotal"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.SubtotalEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeFilter(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFilter"/> event.
            </summary>
            <param name="e"><see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAfterFilter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFilter"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Gets a custom <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> associated with a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index</param>
            <returns><see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object associated with the cell, 
            or null if the cell doesn't have a custom style.</returns>
            <remarks>
            If the cell doesn't have a custom style, the grid paints it using one of the 
            built-in styles. The built-in style is selected based on the cell position 
            and state (fixed, scrollable, highlighted, etc). To retrieve the style that 
            will be used to paint the cell (custom or built-in) use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellStyleDisplay(System.Int32,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellStyle(System.Int32,System.Int32,C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Assigns a custom <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> to a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index</param>
            <param name="newStyle">The <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> to associate with the cell.</param>
            <remarks>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellStyle(System.Int32,System.Int32,C1.Win.C1FlexGrid.CellStyle)"/> method is useful is you want to assign a new style 
            to a single cell. You can also reset the cell style by setting it to null (Nothing, in VB).</para>
            <para>To apply a custom cell style to an entire row or column, set the row or column's 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.Style"/> properties.</para>
            <para>To apply a custom style to a range cells, use a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object. 
            For example:</para>
            <code>
            CellRange rg = _flex.GetCellRange(3, 3, 10, 10);
            rg.Style = _flex.Styles["MyRangeStyle"];
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellStyle(System.Int32,System.Int32,System.String)">
            <summary>
            Assigns a custom <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> to a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index</param>
            <param name="styleName">Name of the new style.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellStyleDisplay(System.Int32,System.Int32)">
            <summary>
            Gets the style used to render a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index</param>
            <returns><see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object used to display the cell.</returns>
            <remarks>
            The <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object returned may be a composite with elements from several 
            styles. For example, a cell with the focus is painted with a style that contains elements 
            from the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Focus"/>, a custom style associated with the cell, 
            row, and column (if available), and the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> style.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellImage(System.Int32,System.Int32)">
            <summary>
            Gets the image displayed in a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object previously assigned to the cell using the
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)"/> method.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Sets the image displayed in a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="newImage">An <see cref="T:System.Drawing.Image"/> object containing an image to display in the cell.</param>
            <remarks>
            <para>In addition to the usual cell contents, you can display images in cells.
            There are two methods for showing images in cells:</para>
            <para>1. You can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellImage(System.Int32,System.Int32)"/> methods to 
            assign images directly to the cells. In this case, the cell contents and the image are 
            independent. To update the image, you need to call <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)"/> again.</para>
            <para>2. You can use the <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageMap"/> property to associate images with 
            specific cell values. In this case, images are updated automatically whenever the cell 
            contents change. The <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageAndText"/> property allows you to specify whether 
            the control should display the images in addition to or instead of the cell text.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
            Assigns a value to a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="value">Value to assign to the cell.</param>
            <param name="coerce">Whether the value should be converted to the column's data type.</param>
            <returns>True if the value was assigned to the cell.</returns>
            <remarks>
            <para>If <paramref name="coerce"/> is set to true and the value can't be converted into 
            the proper data type, the grid will fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event and the 
            cell will retain its original value.</para>
            <para>Using <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.Int32,System.Object,System.Boolean)"/> with <paramref name="coerce"/> set to true is equivalent 
            to setting the grid's indexer. For example, the following lines of code are equivalent:</para>
            <code>
            flex.SetData(1, 1, "Hello", true);
            flex[1, 1] = "Hello"; // same thing
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(C1.Win.C1FlexGrid.CellRange,System.Object,System.Boolean)">
            <summary>
            Assigns a value to a range of cells.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies the cells that will be assigned a new value.</param>
            <param name="value">Value that will be assigned to all cells in the range.</param>
            <param name="coerce">Whether the value should be converted to the column's data type.</param>
            <returns>True if the value was assigned to all cells in the destination range.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.Int32,System.Object)">
            <summary>
            Assigns a value to a grid cell, coercing the value into the cell's specified DataType.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="value">Value to assign to the cell.</param>
            <returns>True if the value was assigned to the cell, false if the value could not be
            assigned (usually because it could not be converted to the appropriate type).</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(C1.Win.C1FlexGrid.CellRange,System.Object)">
            <summary>
            Assigns a value to a range of cells, coercing the value into each cell's specified DataType.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies the cells that will be assigned a new value.</param>
            <param name="value">Value that will be assigned to all cells in the range.</param>
            <returns>True if the value was assigned to all cells in the destination range, false if 
            the value could not be assigned to all cells in the range (usually because it could not be 
            converted to the appropriate type).</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
            Assigns a value to a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <param name="value">Value to assign to the cell.</param>
            <param name="coerce">Whether the value should be converted to the column's data type.</param>
            <returns>True if the value was assigned to the cell, False otherwise.</returns>
            <remarks>
            <para>If <paramref name="coerce"/> is set to true and the value can't be converted into 
            the proper data type, the grid will fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event and the 
            cell will retain its original value.</para>
            <para>Using <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.Int32,System.Object,System.Boolean)"/> with <paramref name="coerce"/> set to true is equivalent 
            to setting the grid's indexer. For example, the following lines of code are equivalent:</para>
            <code>
            flex.SetData(1, "ColName", "Hello", true);
            flex[1, "ColName"] = "Hello"; // same thing
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetData(System.Int32,System.String,System.Object)">
            <summary>
            Assigns a value to a grid cell, coercing the value into the cell's specified data type.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <param name="value">Value to assign to the cell.</param>
            <returns>True if the value was assigned to the cell, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetDataEdit(System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
            Assigns a value to a grid cell, optionally coercing the value into the cell's specified data type.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="value">Value to assign to the cell.</param>
            <param name="coerce">Whether to coerce the value into the cell's specified data type.</param>
            <returns>True if the value was assigned to the cell, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetData(System.Int32,System.Int32)">
            <summary>
            Gets the value of a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>The value of the cell.</returns>
            <remarks>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetData(System.Int32,System.Int32)"/> method returns the raw data stored in a specific grid cell. 
            It is equivalent to using the grid's indexer. For example:</para>
            <code>
            object foo = flex.GetData(1, 1);
            object bar = flex[1, 1]; // same thing
            </code>
            <para>The data displayed on the grid might be different from the raw data, depending on 
            the setting of the <see cref="P:C1.Win.C1FlexGrid.RowCol.Format"/> and <see cref="P:C1.Win.C1FlexGrid.RowCol.DataMap"/> properties. 
            To obtain the display value (which is always a string), use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.Int32)"/> 
            method instead.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetData(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the value of a grid cell, taking into account the value returned by the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> method.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="getCheck">Whether to take into account the value of the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetData(System.Int32,System.String)">
            <summary>
            Gets the value of a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <returns>The value of the cell.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetUserData(System.Int32,System.Int32)">
            <summary>
            Gets user data associated with a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>Object associated with the cell.</returns>
            <remarks>
            The user data is not used internally by the grid. It is reserved for additional data that you may want to 
            associate with a cell.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetUserData(System.Int32,System.String)">
            <summary>
            Gets user data associated with a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <returns>Object associated with the cell.</returns>
            <remarks>
            The user data is not used internally by the grid. It is reserved for additional data that you may want to 
            associate with a cell.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetUserData(System.Int32,System.Int32,System.Object)">
            <summary>
            Assigns user data to a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="data">User data to assign to the cell.</param>
            <remarks>
            The user data is not used internally by the grid. It is reserved for 
            additional data that you may want to associate with a cell.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetUserData(System.Int32,System.String,System.Object)">
            <summary>
            Assigns user data to a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <param name="data">User data to assign to the cell.</param>
            <remarks>
            The user data is not used internally by the grid. It is reserved for additional data that you may want to 
            associate with a cell.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.Int32)">
            <summary>
            Gets the value in a grid cell, formatted as a string.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>A string containing the data displayed in the given grid cell.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.String)">
            <summary>
            Gets the value in a grid cell, formatted as a string.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <returns>A string containing the data displayed in the given grid cell.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.Int32,System.Drawing.Image@,C1.Win.C1FlexGrid.CheckEnum@)">
            <summary>
            Gets the value in a grid cell, formatted as a string, and the image or checkbox in the cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="img">Returns the image in the cell.</param>
            <param name="chk">Returns the checkbox value in the cell.</param>
            <returns>A string containing the data displayed in the given grid cell.</returns>
            <remarks>
            <para>This method provides a way to retrieve all the data that is displayed in a cell with a single call.</para>
            <para>The image returned in the <paramref name="img"/> parameter may be an image assigned to the
            cell using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)"/> method, a mapped value obtained through an <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageMap"/>,
            or an image stored as cell data (when the cell's <see cref="P:C1.Win.C1FlexGrid.RowCol.DataType"/> is set to Image).</para>
            <para>The <see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> value returned in the <paramref name="chk"/> parameter is the value
            returned by the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.String,System.Drawing.Image@,C1.Win.C1FlexGrid.CheckEnum@)">
            <summary>
            Gets the value in a grid cell, formatted as a string, and the image or checkbox in the cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="colName">Column name.</param>
            <param name="img">Returns the image in the cell.</param>
            <param name="chk">Returns the checkbox value in the cell.</param>
            <returns>A string containing the data displayed in the given grid cell.</returns>
            <remarks>
            <para>This method provides a way to retrieve all the data that is displayed in a cell with a single call.</para>
            <para>The image returned in the <paramref name="img"/> parameter may be an image assigned to the
            cell using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellImage(System.Int32,System.Int32,System.Drawing.Image)"/> method, a mapped value obtained through an <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageMap"/>,
            or an image stored as cell data (when the cell's <see cref="P:C1.Win.C1FlexGrid.RowCol.DataType"/> is set to Image).</para>
            <para>The <see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> value returned in the <paramref name="chk"/> parameter is the value
            returned by the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)">
            <summary>
            Selects a range of cells.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies the cells that will be selected.</param>
            <param name="show">Whether to scroll the new selection into view.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Selects a range of cells and scrolls it into view.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies the cells that will be selected.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of cells.
            </summary>
            <param name="row">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property.</param>
            <param name="col">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> property.</param>
            <param name="rowSel">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> property.</param>
            <param name="colSel">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> property.</param>
            <param name="show">Whether to scroll the new selection into view.</param>
            <remarks>
            Using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method is equivalent to setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects a range of cells and scrolls it into view.
            </summary>
            <param name="row">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property.</param>
            <param name="col">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> property.</param>
            <param name="rowSel">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> property.</param>
            <param name="colSel">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> property.</param>
            <remarks>
            Using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method is equivalent to setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a cell.
            </summary>
            <param name="row">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property.</param>
            <param name="col">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> property.</param>
            <param name="show">Whether to scroll the new selection into view.</param>
            <remarks>
            Using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method is equivalent to setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(System.Int32,System.Int32)">
            <summary>
            Selects a cell and scrolls it into view.
            </summary>
            <param name="row">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property.</param>
            <param name="col">New value for the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> property.</param>
            <remarks>
            Using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method is equivalent to setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)">
            <summary>
            Sorts the grid contents based on a column.
            </summary>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that specifies the sort direction and options.</param>
            <param name="col">Column to sort on.</param>
            <remarks>
            <para>Sorting works differently depending on whether the grid is bound to a data source or not.</para>
            <para>In bound mode, the grid passes the sort request to the underlying data source object. In this case, 
            the sort settings remain in effect as the grid data changes. Editing values in the sort column will cause 
            the data source to re-sort the data, and grid will show the changes automatically. This is equivalent to
            setting the <see cref="P:System.Data.DataView.Sort"/> property on a <see cref="T:System.Data.DataView"/> object for example.</para>
            <para>In unbound mode, the <b>Sort</b> method sorts the data that is currently stored in the grid. Changing
            the data after it has been sorted will not automatically update the sort.</para>
            <para>When the grid is bound to a new data source, it inherits the sort settings currently applied to the
            new data source object. Because of this, calling <b>Sort</b> immediately before setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/>
            property has no effect on the grid.</para>
            <para>In unbound mode, the grid uses a stable sorting algorithm. This means that the sorting keeps the 
            relative order of records when the sorting key is the same. For example, if you sort a list of files by 
            name, then by extension, the list will still be sorted by name within each extension group.</para>
            <para>The grid recognizes two types of row: regular rows which contain data, and node rows which are used
            to group data. The <b>Sort</b> method only sorts regular rows; it does not affect node rows at all.
            To sort nodes, use the <see cref="M:C1.Win.C1FlexGrid.GridTree.Sort(System.Int32,C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)"/> method in the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree"/> property or the
            <see cref="M:C1.Win.C1FlexGrid.Node.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)"/> method in the <see cref="T:C1.Win.C1FlexGrid.Node"/> class.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)">
            <summary>
            Sorts the grid contents based on a column range.
            </summary>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that specifies the sort direction and options.</param>
            <param name="col1">First column in the range.</param>
            <param name="col2">Last column in the range.</param>
            <remarks>
            <para>When you sort multiple columns, the same sorting options are applied to each column, 
            starting from the leftmost column in the range and proceeding to the right.</para>
            <para>To sort multiple columns using a different sorting order for each, you can either 
            call the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method multiple times or set each column's <see cref="P:C1.Win.C1FlexGrid.Column.Sort"/> 
            property and call the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method including the <see cref="F:C1.Win.C1FlexGrid.SortFlags.UseColSort"/> 
            flag in the <paramref name="order"/> parameter.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Sorts a range of cells in the grid.
            </summary>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that specifies the sort direction and options.</param>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that specifies the range of cells to sort.</param>
            <remarks>
            <para>When you sort multiple columns, the same sorting options are applied to each column, 
            starting from the leftmost column in the range and proceeding to the right.</para>
            <para>To sort multiple columns using a different sorting order for each, you can either 
            call the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method multiple times or set each column's <see cref="P:C1.Win.C1FlexGrid.Column.Sort"/> 
            property and call the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method including the <see cref="F:C1.Win.C1FlexGrid.SortFlags.UseColSort"/> 
            flag in the flags parameter.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts a group of rows using the specified comparer.
            </summary>
            <param name="rowStart">First row in the sort range.</param>
            <param name="rowCount">Number of rows in the sort range.</param>
            <param name="comparer">An <see cref="T:System.Collections.IComparer"/> object that compares <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> objects.</param>
            <remarks>
            <para>The <see cref="T:System.Collections.IComparer"/> interface has a single method called <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/> that 
            takes two objects as arguments (in this case, they will be <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> objects) and 
            returns -1, 0, or +1. For more details, see the documentation for <see cref="T:System.Collections.IComparer"/>.</para>
            <para>Custom sorting can only be used when the grid is in unbound mode.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the grid using the specified comparer.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.IComparer"/> object that compares <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> objects.</param>
            <remarks>
            <para>The <see cref="T:System.Collections.IComparer"/> interface has a single method called <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/> that 
            takes two objects as arguments (in this case, they will be <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> objects) and 
            returns -1, 0, or +1. For more details, see the documentation for <see cref="T:System.Collections.IComparer"/>.</para>
            <para>Custom sorting can only be used when the grid is in unbound mode.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowSortAt(C1.Win.C1FlexGrid.SortFlags,System.Int32)">
            <summary>
            Shows the sorting glyph on a column header.
            </summary>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that specifies the glyph to display.</param>
            <param name="col">Column index.</param>
            <remarks>
            This method is useful if you want to perform custom sorting and need control over the appearance 
            and position of the sorting glyph (the little triangle that appears on the header of sorted columns).
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)">
            <summary>
            Scrolls a cell into view.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <remarks>
            This method does not affect the current selection. To move the cursor to a specific cell 
            and optionally bring it into view, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates a cell, causing it to be repainted.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <remarks>
            This method is rarely used by the programmer, since the grid automatically performs invalidation as needed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Invalidate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invalidates a cell range, causing it to be repainted.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Invalidate(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Invalidates a cell range, causing it to be repainted.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that will be invalidated.</param>
            <remarks>
            This method is rarely used by the programmer, since the grid automatically 
            performs invalidation as needed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns information about the control at a specified point on the control surface.
            </summary>
            <param name="x">The horizontal position of the client coordinate.</param>
            <param name="y">The vertical position of the client coordinate.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.HitTestInfo"/> object that contains information about the point.</returns>
            <remarks>
            This method is especially useful when handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event. 
            It allows you to determine whether the mouse is over a specific cell, grid buttons, 
            resizing elements, etc.
            </remarks>
            <example>
            The code below shows hit test information whenever the user clicks the mouse:
            <code>
            void _flex_BeforeMouseDown(object sender, BeforeMouseDownEventArgs e)
            {
              HitTestInfo hti = _flex.HitTest(e.X, e.Y);
              Console.WriteLine("at {0},{1}: row {2} col {3} type {4}",
                                 hti.X, hti.Y, hti.Row, hti.Column, hti.Type);
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest(System.Drawing.Point)">
            <summary>
            Returns information about the control at a specified point on the control surface.
            </summary>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.HitTestInfo"/> object that contains information about the point.</returns>
            <remarks>
            This method is especially useful when handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event. 
            It allows you to determine whether the mouse is over a specific cell, grid buttons, 
            resizing elements, etc.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest">
            <summary>
            Returns information about the control at the current mouse position.
            </summary>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.HitTestInfo"/> object that contains information about the point.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRect(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> object with the coordinates of the cell within the control.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="show">Whether to scroll the cell into view before calculating the rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> object with the coordinates of the cell, in pixels and 
            relative to the control's client area.</returns>
            <remarks>
            This property is useful if you need to implement custom editors or other elements that need 
            to be positioned over cells.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRect(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> object with the coordinates of the cell within the control.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <remarks>
            <para>This property is useful if you need to implement custom editors or other elements that need 
            to be positioned over cells.</para>
            <para>This method does not ensure the cell is visible.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.FindRow(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds a row that contains a specified string.
            </summary>
            <param name="strFind">String to look for.</param>
            <param name="rowStart">Index of the row where the search should start.</param>
            <param name="col">Column that contains the data to be searched.</param>
            <param name="caseSensitive">Whether the search should be case-sensitive.</param>
            <param name="fullMatch">Whether a full match is required. If this parameter is set to false, searching for "John" may return a row that contains "Johnson".</param>
            <param name="wrap">Whether the search should stop at the bottom of the grid or wrap around and restart from the first scrollable row.</param>
            <returns>The index of the row that contains the string, or -1 if the string is not found.</returns>
            <remarks>
            To allow users to search for data as they type, use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.FindRow(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds a row that contains a specified value in a given column.
            </summary>
            <param name="objFind">Object to look for.</param>
            <param name="rowStart">Index of the row where the search should start.</param>
            <param name="col">Column to be searched.</param>
            <param name="wrap">Whether the search should stop at the bottom of the grid or wrap around and restart from the first scrollable row.</param>
            <returns>The index of the row that contains the data, or -1 if the <paramref name="objFind"/> object is not found.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.FindRowRegex(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds a row that contains a specified value in a given column using a <b>RegularExpression</b>.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="rowStart">Index of the row where the search should start.</param>
            <param name="col">Column that contains the data to be searched.</param>
            <param name="wrap">Whether the search should stop at the bottom of the grid or wrap around and restart from the first scrollable row.</param>
            <returns>The index of the row that matches the pattern, or -1 if no matches were found.</returns>
            <remarks>
            The <paramref name="pattern"/> parameter specifies a regular expression pattern 
            expressed in the usual <see cref="T:System.Text.RegularExpressions.Regex"/> syntax. 
            The regular expression syntax supports character classes, ranges, repeat counts, 
            alternate matches, and more. Please refer to the .NET documentation for details and examples.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginUpdate">
            <summary>
            Maintains performance by preventing the control from updating itself until
            the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate"/> method is called.
            </summary>
            <remarks>
            The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginUpdate"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate"/> methods are used to 
            optimize the performance of the grid. Call <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginUpdate"/> before making 
            extensive changes, and call <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate"/> when done to suspend repainting. 
            This will reduce flicker and increase performance. This optimization is especially 
            effective when adding large numbers of rows to the grid, because it needs to 
            recalculate ranges and update scrollbars each time a row is added.
            </remarks>
            <example>
            The code below shows how to add a large number of rows to the grid efficiently.
            Note how the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate"/> method is called inside a 'finally' block 
            to ensure repainting is properly restored.
            <code>
            void UpdateGrid(C1FlexGrid flex)
            {
              try
              {
                flex.BeginUpdate(); // suspend painting to avoid flicker
                flex.Rows.Count = 1;
                for (int i = 1; i &lt; 10000; i++)
                  flex.AddItem("Row " + i.ToString());
              }
              finally
              {
                flex.EndUpdate(); // always restore painting
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate">
            <summary>
            Resumes updating the control after calls to the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginUpdate"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Clears a range.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value that specifies the elements to clear.</param>
            <param name="rg">Range to clear.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears a range.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value that specifies the elements to clear.</param>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,System.Int32,System.Int32)">
            <summary>
            Clears a cell.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value that specifies the elements to clear.</param>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags)">
            <summary>
            Clears the grid.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value that specifies the elements to clear.</param>
            <remarks>
            The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,C1.Win.C1FlexGrid.CellRange)"/> method does not affect the number of rows and columns on the grid, 
            and can't be used to clear data when the grid is bound to a data source. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear">
            <summary>
            Clears the grid.
            </summary>
            <remarks>
            <para>This method removes all data, styles, and user data from all cells, rows, and columns on the grid.</para>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,C1.Win.C1FlexGrid.CellRange)"/> method does not affect the number of rows and columns on the grid, 
            and can't be used to clear data when the grid is bound to a data source.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRange(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that can be used to format and manipulate a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that can be used to format and manipulate the cell.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that can be used to format and manipulate a range.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that can be used to format and manipulate the range.</returns>
            <remarks>
            <para>The <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object provides access to properties of the cells in the range.
            For example, the code below sets the style of a range:</para>
            <code>
            CellRange rg = flex.GetCellRange(5, 5, 20, 8);
            rg.Style = flex.Styles["MyStyle"];
            </code>
            <para>Note: <see cref="T:C1.Win.C1FlexGrid.CellRange"/> is a class, not a struct. Because of this, you have to 
            assign the value to a variable and then use the variable. For example, the following code 
            will not compile:</para>
            <code>
            // this does not compile
            flex.GetCellRange(5, 5, 20, 8).Style = flex.Styles["MyStyle"];
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateImage">
            <summary>
            Creates an image of the entire grid.
            </summary>
            <returns>An <see cref="T:System.Drawing.Image"/> object containing a metafile image of the grid.</returns>
            <remarks>
            Use this method to copy grid images to the clipboard so you can paste them into 
            documents or other applications.
            </remarks>
            <example>
            The code below creates an image of a grid range and saves it to a PNG file that can be 
            included in other documents such as web pages:
            <code>
            Image img = flex.CreateImage(0,0,10,5);
            img.Save(@"c:\temp\grid.png", System.Drawing.Imaging.ImageFormat.Png);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an image of a portion of the grid.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object containing a metafile image of the grid.</returns>
            <remarks>
            The image returned includes any fixed and frozen cells in addition to the specified range.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateImage(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Creates an image of a portion of the grid.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies which cells should be included in the image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object containing a metafile image of the grid.</returns>
            <remarks>
            The image returned includes any fixed and frozen cells in addition to the specified range.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Creates an image of a portion of the grid.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType"/> value that determines the type of metafile to create.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object containing a metafile image of the grid.</returns>
            <remarks>
            The image returned includes any fixed and frozen cells in addition to the specified range.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CreateImage(C1.Win.C1FlexGrid.CellRange,System.Drawing.Imaging.EmfType)">
            <summary>
            Creates an image of a portion of the grid.
            </summary>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> that specifies which cells should be included in the image.</param>
            <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType"/> value that determines the type of metafile to create.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object containing a metafile image of the grid.</returns>
            <remarks>
            The image returned includes any fixed and frozen cells in addition to the specified range.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.DrawCellImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws a grid cell.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the cell will be drawn.</param>
            <param name="row">Index of the cell's row.</param>
            <param name="col">Index of the cell's column.</param>
            <param name="rcBounds"><see cref="T:System.Drawing.Rectangle"/> that defines the cell position.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Char)">
            <summary>
            Puts the grid in edit mode and starts editing a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="key">Initial character to be sent to the editor.</param>
            <returns>True if the grid entered edit mode successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32)">
            <summary>
            Puts the grid in edit mode and starts editing a cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the grid entered edit mode successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing">
            <summary>
            Puts the grid in edit mode and starts editing the current cell.
            </summary>
            <returns>True if the grid entered edit mode successfully, false otherwise.</returns>
            <remarks>
            <para>If the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> property is set to true, the control goes into 
            edit mode automatically when the user presses the edit key (F2), the space bar, or 
            any printable character. You may use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Char)"/> method to force 
            the control into cell-editing mode.</para>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Char)"/> method forces the control into editing mode even 
            if <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> is set to False. You may also use it to allow editing of 
            fixed cells.</para>
            </remarks>
            <example>
            The code below uses the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Char)"/> method to keep the grid in edit mode 
            while the user moves the selection (like the .NET DataGrid control):
            <code>
            void _flex_RowColChange(object sender, System.EventArgs e)
            {
              _flex.StartEditing();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.FinishEditing">
            <summary>
            Finishes editing the current cell and takes the grid out of edit mode.
            </summary>
            <returns>True if the grid left edit mode successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.FinishEditing(System.Boolean)">
            <summary>
            Finishes editing the current cell and takes the grid out of edit mode, 
            optionally canceling the edits.
            </summary>
            <param name="cancel">Whether to cancel the current edits and revert the cell to its original value.</param>
            <returns>True if the grid left edit mode successfully, false otherwise.</returns>
            <remarks>
            <para>If the cancel parameter is set to false, the grid tries to apply the edits, 
            and fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveEdit"/>, and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterEdit"/> events as usual.
            If validation fails, the grid stays in edit mode (and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.FinishEditing"/> returns false).</para>
            <para>If the cancel parameter is set to true, the original cell value is restored and the 
            grid is guaranteed to leave the edit mode. In this case, only the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveEdit"/> event fires.</para>
            <para>To determine whether the grid is in edit mode, check whether the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property is null.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Char,System.Boolean)">
            <summary>
            Starts editing a cell in response to a key press.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the editing process.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="key">Key that initiated the edit process.</param>
            <param name="force">Whether editing should start even in non-editable cells (e.g. fixed cells).</param>
            <returns>True if the editing process was started successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.StartEditing(System.Int32,System.Int32,System.Drawing.Point,System.Boolean)">
            <summary>
            Starts editing a cell in response to a mouse action.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the editing process.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="ptMouse">Mouse position in client coordinates.</param>
            <param name="dblClick">Whether the action was a double-click.</param>
            <returns>True if the editing process was started successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetDataBinding(System.Object,System.String)">
            <summary>
            Sets the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> properties.
            </summary>
            <param name="dataSource">The new data source object.</param>
            <param name="dataMember">The table to bind to within the data source object.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetDataBinding(System.Object,System.String,System.Boolean)">
            <summary>
            Sets the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> properties, 
            optionally keeping the current column layout.
            </summary>
            <param name="dataSource">The new data source object.</param>
            <param name="dataMember">The table to bind to within the data source object.</param>
            <param name="preserveLayout">Whether the current column layout should be preserved or re-generated 
            automatically based on the data source schema.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.AggregateFlags)">
            <summary>
            Calculates aggregate statistics for a range.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that contains the values to be aggregated.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AggregateFlags"/> value that specifies aggregation options.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AggregateFlags)">
            <summary>
            Calculates aggregate statistics for a range.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AggregateFlags"/> value that specifies aggregation options.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.AggregateFlags)">
            <summary>
            Calculates aggregate statistics for the current selection.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AggregateFlags"/> value that specifies aggregation options.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum)">
            <summary>
            Calculates aggregate statistics for the current selection.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
            <example>
            The code below <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.AggregateFlags)"/> method to calculate aggregate statistics 
            for the current selection. Whenever the selection changes, new aggregates are 
            calculated and written to the console.
            <code>
            void flex_SelChange(object sender, System.EventArgs e)
            {
              string fmt = "Count {0:0}, Sum {1:#,##0.00}, " +
                           "Avg {2:#,##0.00}, Stdev {3:#,##0.00}";
              Console.WriteLine(fmt,
                flex.Aggregate(AggregateEnum.Count),
                flex.Aggregate(AggregateEnum.Sum),
                flex.Aggregate(AggregateEnum.Average),
                flex.Aggregate(AggregateEnum.Std));
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Calculates aggregate statistics for a range.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="rg"><see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that contains the values to be aggregated.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates aggregate statistics for a range.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <returns>A <see cref="T:System.Double"/> that represents the aggregate value.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupFrom">First column in the range used to detect group breaks.</param>
            <param name="groupTo">Last column in the range used to detect group breaks.</param>
            <param name="totalOn">Column that contains values to be aggregated (usually numeric).</param>
            <param name="caption">Text to insert in the subtotal rows.</param>
            <remarks>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method inserts rows containing aggregate values. These new rows are set 
            to behave as tree nodes so they can be collapsed and expanded to display a dynamic hierarchical 
            outline.</para>
            <para>You can control the appearance and behavior of the outline tree using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree"/> property.</para>
            <para>The node rows added by the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method have their <see cref="P:C1.Win.C1FlexGrid.RowCol.Style"/> property 
            automatically set to one of the Styles.Subtotal* styles. You can use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles"/> 
            collection to modify the appearance of all subtotal rows on the grid.</para>
            <para>To create an outline tree manually, insert node rows using the <see cref="M:C1.Win.C1FlexGrid.RowCollection.InsertNode(System.Int32,System.Int32)"/> method, 
            or convert regular rows into nodes by setting the <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property to true for the 
            node rows. Then use the <see cref="P:C1.Win.C1FlexGrid.Node.Level"/> property to set the outline level for the new 
            nodes.</para>
            </remarks>
            <example>
            <para>The code below assumes a grid with four columns: "Product", "Region", "Employee", and "Sales".</para>
            <para>The code groups on the first two columns, calculating total sales for each product and for 
            each region within each product.</para>
            <para>If the user drags a column to a new position, the tree is automatically rebuilt to show 
            the new grouping (by Employee, Region, etc).</para>
            <code>
            void UpdateTotals()
            {
              // no repainting until we're done
              _flex.Redraw = false;
              
              // clear old subtotals, if any
              _flex.Subtotal(AggregateEnum.Clear);
              
              // sort the grid on the columns that will be grouped
              _flex.Sort(SortFlags.Ascending, 0, 3);
              
              // show outline tree on column 0
              _flex.Tree.Column = 0;
              
              // get a grand total (use -1 instead of column index)
              _flex.Subtotal(AggregateEnum.Sum, -1, -1, 3, "Grand Total");
              
              // total on column 0 (initially Product)
              _flex.Subtotal(AggregateEnum.Sum, 0, 0, 3);
              
              // total on column 1 (initially Region)
              _flex.Subtotal(AggregateEnum.Sum, 1, 1, 3);
              
              // show outline level 1
              _flex.Tree.Show(1);
              
              // restore painting
              _flex.Redraw = true;
            }
            void _flex_AfterDragColumn(object sender, C1.Win.C1FlexGrid.DragRowColEventArgs e)
            {
              UpdateTotals(); // user moved a column, update totals
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupOn">Column used to detect group breaks.</param>
            <param name="totalOn">Column that contains values to be aggregated (usually numeric).</param>
            <param name="caption">Text to insert in the subtotal rows.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupOn">Column used to detect group breaks.</param>
            <param name="totalOn">Column that contains values to be aggregated (usually numeric).</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <remarks>
            This version of the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method does not take any column parameters,
            and is useful only for clearing the subtotals. For example:
            <code>
            flex.Subtotal(AggregateEnum.Clear); // clear all subtotals
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupFrom">Name of the first column in the range used to detect group breaks.</param>
            <param name="groupTo">Name of the last column in the range used to detect group breaks.</param>
            <param name="totalOn">Name of the column that contains values to be aggregated (usually numeric).</param>
            <param name="caption">Text to insert in the subtotal rows.</param>
            <remarks>
            This is a variant of the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method
            that takes column names instead of indices.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.String,System.String,System.String)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupOn">Name column used to detect group breaks.</param>
            <param name="totalOn">Name of the column that contains values to be aggregated (usually numeric).</param>
            <param name="caption">Text to insert in the subtotal rows.</param>
            <remarks>
            This is a variant of the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.String)"/> method
            that takes column names instead of indices.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.String,System.String)">
            <summary>
            Groups rows based on cell contents and calculates aggregate values.
            </summary>
            <param name="aggType"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupOn">Name column used to detect group breaks.</param>
            <param name="totalOn">Name of the column that contains values to be aggregated (usually numeric).</param>
            <remarks>
            This is a variant of the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32)"/> method
            that takes column names instead of indices.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.String)">
            <summary>
            Adds a row to the grid and populates the new row with data.
            </summary>
            <param name="item">String containing the data for the new row. Items are separated by tab characters 
            by default. You can change the separator character using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators"/> property.</param>
            <returns>A reference to the new row.</returns>
            <remarks>
            <para>You can also add and remove rows using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows"/> collection. The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.String)"/> 
            method provides a concise syntax for creating the row, populating it with data, and then adding it to the grid.</para>
            <para>Before using <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.String)"/> to add a large number of rows to the grid, remember to set the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Redraw"/> property to false. When finished adding the rows, set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Redraw"/> back to 
            its original value. This will significantly improve performance.</para>
            </remarks>
            <example>
            The code bellows adds 300 rows to the grid.
            <code>
            // suspend painting to improve performance
            bool redraw = flex.Redraw;
            flex.Redraw = false;
            
            // append 100 rows, using tabs as separators
            flex.ClipSeparators = "\t\n";
            for (int i = 0; i &lt; 100; i++)
              flex.AddItem("\tcol1\tcol2\tcol3");
              
            // add 100 rows at the top, using pipes as separators
            flex.ClipSeparators = "|;";
            for (int i = 0; i &lt; 100; i++)
              flex.AddItem("|col1|col2|col3", 0);
              
            // append 100 rows at the bottom, using an object array
            object[] items = { "col1", "col2", "col3" };
            for (int i = 0; i &lt; 100; i++)
              flex.AddItem(items, flex.Rows.Count, flex.Cols.Fixed);
              
            // restore painting
            flex.Redraw = redraw;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.Object[])">
            <summary>
            Adds a row to the grid and populates the new row with data.
            </summary>
            <param name="items">Array of objects that will be assigned to the new row.</param>
            <returns>A reference to the new row.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.String,System.Int32)">
            <summary>
            Adds a row to the grid at a specified position and populates the new row with data.
            </summary>
            <param name="item">String containing the data for the new row. Items are separated by tab characters 
            by default. You can change the separator character using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators"/> property.</param>
            <param name="index">Position where the new row will be inserted.</param>
            <returns>A reference to the new row.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.Object[],System.Int32,System.Int32)">
            <summary>
            Adds a row to the grid at a specified position and populates the new row with data.
            </summary>
            <param name="items">Array of objects that will be assigned to the new row.</param>
            <param name="rowIndex">Position where the new row will be inserted.</param>
            <param name="colIndex">First column to populate with the items in the <paramref name="items"/> 
            array. This parameter is usually set to the index of the first scrollable column.</param>
            <returns>A reference to the new row.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.RemoveItem">
            <summary>
            Removes the last row from the grid.
            </summary>
            <remarks>
            <para>You can also add and remove rows using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows"/> collection.</para>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.RemoveItem"/> method is provided for consistency, since the grid 
            also has an <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AddItem(System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.RemoveItem(System.Int32)">
            <summary>
            Removes a row at a specified position from the grid.
            </summary>
            <param name="index">Index of the row to be removed.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)">
            <summary>
            Prints the grid, optionally showing a page setup or print preview dialog.
            </summary>
            <param name="docName">The document name, which appears on the progress dialogs and on the print job windows.</param>
            <param name="flags">Flags that select printing options.</param>
            <returns>True if the grid was printed, false if the user canceled the operation before printing started.</returns>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to set up options such as page orientation 
            and margins, header and footer fonts, etc.</para>
            <para>The method returns true if the user started the printing process. If the user clicks cancel while 
            the grid is printing, the method returns true (some pages may be printed anyway depending on the 
            printer settings). To detect canceled jobs, handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.EndPrint"/> event and check the 
            value of the e.Cancel parameter.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags,System.String,System.String)">
            <summary>
            Prints the grid, optionally showing a page setup or print preview dialog.
            </summary>
            <param name="docName">The document name, which appears on the progress dialogs and on the print job windows.</param>
            <param name="flags">Flags that select printing options.</param>
            <param name="header">String that appears on the top of every page.</param>
            <param name="footer">String that appears on the bottom of every page.</param>
            <returns>True if the grid was printed, false if the user canceled the operation.</returns>
            <remarks>
            <para>The header and footer strings may contain up to three tab-delimited sections, which are 
            aligned to the left, center, and right of the page. The strings may also contain placeholders 
            that are replaced with the current page number and total number of pages ("{0}" and "{1}").</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to set up options such as page orientation 
            and margins, header and footer fonts, etc.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String)">
            <summary>
            Prints the grid, optionally showing a page setup or print preview dialog.
            </summary>
            <param name="docName">The document name, which appears on the progress dialogs and on the print job windows.</param>
            <returns>True if the grid was printed, false if the user canceled the operation.</returns>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to set up options such as page orientation 
            and margins, header and footer fonts, etc.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)">
            <summary>
            Saves the grid contents to a file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="format">File format to use.</param>
            <param name="flags">Options to use when saving the file.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to use when saving the file.</param>
            <remarks>
            <para>Grids saved to CSV and other text files include data only (no formatting information is saved).</para>
            <para>Grids saved to Excel files include data and formatting information. Images are not saved.</para>
            <para>Grids can also be persisted to Xml format using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.String)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.String)"/> methods.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Saves the grid contents to a file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="format">File format to use.</param>
            <param name="flags">Options to use when saving the file.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum)">
            <summary>
            Saves the grid contents to a file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="format">File format to use.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)">
            <summary>
            Loads the grid from a file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="format">File format to use.</param>
            <param name="flags">Options to use when loading the file.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to use when saving the file.</param>
            <remarks>
            <para>This method loads grid from a file previously saved with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)"/> method.
            Formats supported include comma-delimited text files (CSV format), tab-delimited 
            text files, and Microsoft Excel files (.XLS).</para>
            <para>When loading text files, rows and columns are added to the grid if needed to 
            accommodate the file contents. Text files contain only data and no formatting information.</para>
            <para>When loading Excel files, the grid retrieves the first worksheet from the specified 
            workbook file. The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)"/> method allows you to specify which worksheet should be loaded. 
            You can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcelSheetNames(System.String)"/>
            method allows you to retrieve a list of the worksheets stored in an XLS file.
            The grid can save and load data and formatting information from XLS files.</para>
            <para>Grids can also be persisted to Xml format using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.String)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.String)"/> methods.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Loads the grid from a file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="format">File format to use.</param>
            <param name="flags">Options to use when loading the file.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum)">
            <summary>
            Loads the grid from a file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="format">File format to use.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Saves the grid contents to a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="sheetName">Name of the sheet to add to the Excel workbook.</param>
            <param name="flags">Options to use when saving the file.</param>
            <param name="ps"><see cref="T:System.Drawing.Printing.PrinterSettings"/> to use when saving the file.</param>
            <remarks>
            <para>If the specified file exists, the control will add or replace a single worksheet in it.
            Existing sheets will be preserved if possible.</para>
            <para>The worksheet to add or replace is identified by the <paramref name="sheetName"/> parameter.</para>
            <para>If the specified file is in use by another application (usually Excel), the method will fail.</para>
            <para>This method does not require Microsoft Excel to be installed on the machine.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Saves the grid contents to a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="sheetName">Name of the sheet to add to the Excel workbook.</param>
            <param name="flags">Options to use when saving the file.</param>
            <remarks>
            <para>If the specified file exists, the control will add or replace a single worksheet in it.
            Existing sheets will be preserved if possible.</para>
            <para>The worksheet to add or replace is identified by the <paramref name="sheetName"/> parameter.</para>
            <para>If the specified file is in use by another application (usually Excel), the method will fail.</para>
            <para>This method does not require Microsoft Excel to be installed on the machine.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String)">
            <summary>
            Saves the grid contents to a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="sheetName">Name of the sheet to add to the Excel workbook.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Saves the grid contents to a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <param name="flags"></param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String)">
            <summary>
            Saves the grid contents to a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Loads the grid from a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="sheetName">Name of the worksheet to load.</param>
            <param name="flags">Options to use when loading the file.</param>
            <remarks>
            Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcelSheetNames(System.String)"/> method to obtain a list of the worksheets 
            in an XLS file.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String)">
            <summary>
            Loads the grid from a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="sheetName">Name of the worksheet to load.</param>
            <remarks>
            Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcelSheetNames(System.String)"/> method to obtain a list of the worksheets 
            in an XLS file.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,C1.Win.C1FlexGrid.FileFlags)">
            <summary>
            Loads the grid from the first worksheet in a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
            <param name="flags">Options to use when loading the file.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String)">
            <summary>
            Loads the grid from the first worksheet in a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcelSheetNames(System.String)">
            <summary>
            Gets a list with the names of the worksheets in a Microsoft Excel (.XLS) file.
            </summary>
            <param name="fileName">Name of the Excel file, including the path.</param>
            <returns>An array containing the names of the worksheets defined in the file.</returns>
            <remarks>
            This method is used to obtain a list of sheet names that can later be used to load and 
            save specific sheets using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags,System.Drawing.Printing.PrinterSettings)"/> methods.
            </remarks>
            <example>
            The code below loads all sheets in an Excel workbook into a collection of grids in a 
            TabControl:
            <code>
            // clear tabControl
            tabControl.TabPages.Clear();
            
            // load sheet names
            string fileName = "c:\book1.xls";
            string[] sheets = _flexGrid.LoadExcelSheetNames(fileName);
            
            // load each sheet
            foreach (string sheetName in sheets)
            {
              // create a new grid for this sheet
              C1FlexGrid flex = new C1FlexGrid();
              flex.Dock = DockStyle.Fill;
              
              // load sheet into new grid
              flex.LoadExcel(fileName, sheetName);
              
              // add grid to the tabControl
              TabPage page = new TabPage();
              page.Controls.Add(flex);
              page.Text = sheetName;
              tabControl.TabPages.Add(page);
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellCursor(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell contains the grid cursor.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell contains the cursor, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellFixed(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell belongs to a fixed row or column.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell is fixed, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellSelected(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell is selected.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell is selected, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellValid(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a pair of cell coordinates are valid.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell coordinates are valid, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellHighlighted(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell is part of the selection and should be highlighted.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell should be highlighted, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsCellCheckBox(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether the cell contents are displayed as a checkbox.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell contents should be displayed as a checkbox, false otherwise.</returns>
            <remarks>
            <para>Boolean values are displayed as check boxes unless one of the following conditions is true:</para>
            <para>1) The cell has an associated <see cref="P:C1.Win.C1FlexGrid.RowCol.DataMap"/>. In this case the values specified 
            in the <b>DataMap</b> are displayed instead of check boxes.</para>
            <para>2) The cell has a multi-part <see cref="P:C1.Win.C1FlexGrid.RowCol.Format"/> string (such as "yes;no"). In this case
            the <b>Format</b> is used instead of check boxes.</para>
            <para>3) The cell belongs to a subtotal row and does not contain a Boolean value.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.String)">
            <summary>
            Saves the grid contents to an Xml document.
            </summary>
            <param name="fileName">Name of the file to save, including the path.</param>
            <remarks>
            <para>The grid serializes all its contents into the Xml document, including the 
            data stored in the cells, row and column properties, styles, images, etc.</para>
            <para>Objects of custom types stored in the grid are also serialized as long as
            they have an associated <see cref="T:System.ComponentModel.TypeConverter"/> that provides conversions to
            and from string.</para>
            <para>The <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.String)"/> method has several overloads that allow you to 
            save several grids into a single Xml document, along with other information stored
            in the Xml document.</para>
            </remarks>
            <example>
            The code below saves a grid into an Xml file:
            <code>
            // save a grid into am Xml file
            flex.WriteXml(fileName);
            </code>
            The code below saves two grids into an Xml file, then reads them back in reverse order:
            <code>
            // prepare XmlTextWriter
            XmlTextWriter w = new XmlTextWriter(fileName, new UTF8Encoding(false));
            w.Formatting = Formatting.Indented;
            w.WriteStartDocument();
            w.WriteStartElement("Grids");
            
            // save first grid
            w.WriteStartElement(c1FlexGrid1.Name);
            c1FlexGrid1.WriteXml(w);
            w.WriteEndElement();
            
            // save second grid
            w.WriteStartElement(c1FlexGrid2.Name);
            c1FlexGrid2.WriteXml(w);
            w.WriteEndElement();
            
            // close document
            w.WriteEndElement();
            w.Close();
            
            // load document from file
            XmlDocument doc = new XmlDocument();
            doc.Load(fileName);
            XmlNode n = doc.SelectSingleNode("Grids");
            
            // load grids in reverse order
            c1FlexGrid2.ReadXml(n.ChildNodes[0]);
            c1FlexGrid1.ReadXml(n.ChildNodes[1]);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.IO.TextWriter)">
            <summary>
            Saves the grid contents to an Xml document.
            </summary>
            <param name="tw">The <see cref="T:System.IO.TextWriter"/> where the document is saved.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.IO.Stream)">
            <summary>
            Saves the grid contents to an Xml document.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the document is saved.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Saves the grid contents to an Xml document.
            </summary>
            <param name="w">The <see cref="T:System.Xml.XmlTextWriter"/> where the document is saved.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.String)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="fileName">Name of the file to load, including the path.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.IO.TextReader)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="tr"><see cref="T:System.IO.TextReader"/> object to use for loading the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.IO.Stream)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object to use for loading the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="xr"><see cref="T:System.Xml.XmlReader"/> object to use for loading the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.Xml.XmlDocument)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="doc"><see cref="T:System.Xml.XmlDocument"/> object to use for loading the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ReadXml(System.Xml.XmlNode)">
            <summary>
            Loads the grid from an Xml document.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> object to use for loading the grid.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGridChanged(System.Object,C1.Win.C1FlexGrid.GridChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/> event.
            </summary>
            <param name="sender">Object raising the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.GridChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            Builds a rectangle that defines the scrollable portion of the control for a given pair of scroll offsets.
            </summary>
            <param name="dx">Horizontal scroll offset.</param>
            <param name="dy">Vertical scroll offset.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that defines the scrollable portion of the control.</returns>
            <remarks>
            This method is for internal use. It allows derived classes to customize the control scrolling behavior.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control background.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnThemeChanged">
            <summary>
            Called when the control receives a WM_THEMECHANGED message.
            </summary>
            <remarks>
            The WM_THEMECHANGED message is broadcast to every window following a 
            theme change event. Examples of theme change events are the activation of a 
            theme, the deactivation of a theme, or a transition from one theme to another. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnChangeScrollBarPosition(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculates the new position of a scrollbar in response to a user command.
            </summary>
            <param name="cmd">Scroll command (SB_LINEUP, etc).</param>
            <param name="verticalBar">True for the vertical scrollbar, false for the horizontal scrollbar.</param>
            <param name="curPos">Current scrollbar position.</param>
            <param name="trackPos">Scrollbar thumb position.</param>
            <returns>The new position for the scrollbar.</returns>
            <remarks>
            Derived classes may override this method to customize the scrolling behavior.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnValidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidated"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnRowValidating(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidating"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnRowValidated(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidated"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.MoveSelection(C1.Win.C1FlexGrid.MoveCursorEnum,System.Boolean)">
            <summary>
            Moves or extends the current selection.
            </summary>
            <param name="move"><see cref="T:C1.Win.C1FlexGrid.MoveCursorEnum"/> value that specifies the type of cursor movement.</param>
            <param name="extend">Whether to extend the current selection.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.MoveSelection(C1.Win.C1FlexGrid.MoveCursorEnum,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Moves or extends the selection from a given cell.
            </summary>
            <param name="move"><see cref="T:C1.Win.C1FlexGrid.MoveCursorEnum"/> value that specifies the type of cursor movement.</param>
            <param name="extend">Whether to extend the current selection.</param>
            <param name="row">Row index for the initial selection.</param>
            <param name="col">Column index for the initial selection.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.CheckNodeChildren(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a value that indicates what types of child nodes a row has.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize outline trees.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="level">Outline level.</param>
            <returns>Zero if the row has no children, 1 if it has regular data rows only, 
            2 if it has child nodes, and 3 if it has data and child nodes.
            </returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRectDisplay(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a rectangle representing the coordinates of a cell, row, or column.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way cell geometry
            is calculated.
            </remarks>
            <param name="row">Row index (or -1 to get column bounds).</param>
            <param name="col">Column index (or -1 to get row bounds).</param>
            <param name="clipHorz">Whether the rectangle should be horizontally clipped to the grid's client area.</param>
            <param name="clipVert">Whether the rectangle should be vertically clipped to the grid's client area.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> containing the display area for the row, column, or cell,
            in client coordinates and accounting for scroll position.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRectDisplay(System.Int32,System.Int32)">
            <summary>
            Gets a rectangle representing the coordinates of a cell, row, or column.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way cell geometry
            is calculated.
            </remarks>
            <param name="row">Row index (or -1 to get column bounds).</param>
            <param name="col">Column index (or -1 to get row bounds).</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> containing the display area for the row, column, or cell, 
            in client coordinates and accounting for scroll position.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRectEditor(System.Int32,System.Int32)">
            <summary>
            Gets a rectangle representing the coordinates of a cell editor.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way cell geometry
            is calculated. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>Rectangle used to position the cell editor.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.DrawRow(System.Windows.Forms.PaintEventArgs,System.Int32)">
            <summary>
            Draws a grid row.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains a <see cref="T:System.Drawing.Graphics"/>
            object where the row will be drawn.</param>
            <param name="row">Index of the row to draw.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.DrawCell(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Draws a grid cell.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains a <see cref="T:System.Drawing.Graphics"/>
            object where the cell will be drawn.</param>
            <param name="row">Index of the cell's row.</param>
            <param name="col">Index of the cell's column.</param>
            <returns>The index of the last column painted (may be greater than <paramref name="col"/> 
            if columns are merged).</returns>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetHeaderThemeState(System.Int32,System.Int32)">
            <summary>
            Gets the state for a Windows Xp theme while the mouse moves over a cell.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the 
            hot-tracking behavior. 
            </remarks>
            <param name="row">Row under the mouse.</param>
            <param name="col">Column under the mouse.</param>
            <returns>An integer representing the item state (2 for hot-tracking, 1 for normal).</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellGlyphs(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Image@,System.Drawing.Image@,System.Drawing.Image@)">
            <summary>
            Gets a cell glyph to show in a cell.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the display of the sorting glyphs. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="rc">Cell rectangle</param>
            <param name="glyphSort">Glyph to display above the cell content.</param>
            <param name="glyphLeft">Glyphs to display on the left of the cell.</param>
            <param name="glyphRight">Glyphs to display on the right of the cell.</param>
            <returns>True if any glyphs were assigned to the cell, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)">
            <summary>
            Gets the state of the checkbox in a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>One of the values in the <see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> enumeration.</returns>
            <remarks>
            <para>By default, the grid displays values in Boolean columns as check boxes (the column's
            data type determined by the <see cref="P:C1.Win.C1FlexGrid.RowCol.DataType"/> property). If you don't want Boolean 
            values displayed as check boxes, set the column's <see cref="P:C1.Win.C1FlexGrid.RowCol.Format"/> property to a 
            string containing the values that should be displayed for True and False values, separated by
            a semi-colon. For example:</para>
            <code>
            flex.Cols["CheckBoxes"].DataType = typeof(bool);
            flex.Cols["yesNo"].DataType = typeof(bool);
            flex.Cols["yesNo"].Format := "Yes;No";
            </code>
            <para>In unbound mode, you can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellCheck(System.Int32,System.Int32,C1.Win.C1FlexGrid.CheckEnum)"/> 
            methods to add check boxes to any cells. The check boxes will be displayed along with any text in 
            the cell, and you can set their position using the column's <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageAlign"/> property.</para>
            <para>There are two types of check boxes: Boolean and tri-state. Boolean check boxes toggle between 
            the <see cref="F:C1.Win.C1FlexGrid.CheckEnum.Checked"/> and <see cref="F:C1.Win.C1FlexGrid.CheckEnum.Unchecked"/> states. Tri-state check 
            boxes cycle through the settings <see cref="F:C1.Win.C1FlexGrid.CheckEnum.TSChecked"/>, <see cref="F:C1.Win.C1FlexGrid.CheckEnum.TSUnchecked"/>, 
            and <see cref="F:C1.Win.C1FlexGrid.CheckEnum.TSGrayed"/>.</para>
            <para>For example, the code below creates a Boolean checkbox in cell (3,3) and a tri-state checkbox 
            in cell (4,3):</para>
            <code>
            flex.SetCellCheck(3, 3, CheckEnum.Unchecked)   // Boolean;
            flex.SetCellCheck(4, 3, CheckEnum.TSUnchecked) // tri-state;
            </code>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellCheck(System.Int32,System.Int32,C1.Win.C1FlexGrid.CheckEnum)">
            <summary>
            Sets the state of the checkbox in a grid cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="check"><see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> value to assign to the cell.</param>
            <remarks>
            For details and examples, see the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellCheck(System.Int32,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetCellCheckEdit(System.Int32,System.Int32,C1.Win.C1FlexGrid.CheckEnum)">
            <summary>
            Applies a <see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> value to a cell or cell range.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way checkbox 
            data is applied to the cells when cells are edited. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="check">Value to apply to the cell.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Adjusts the width of a column range to fit the data in a cell range.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <param name="extraSpace">Amount of extra space, in pixels, to add to the column widths.</param>
            <param name="flags">Flags that control auto-sizing options.</param>
            <remarks>
            <para>By default, the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> method measures every cell in each column, 
            taking into account the cell contents and style.</para>
            <para>If the grid has a large number of rows, you can improve performance by using the 
            <paramref name="topRow"/> and <paramref name="bottomRow"/> parameters to specify a row range. 
            You can include only a few hundred rows in the process, and add some extra spacing for safety.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols">
            <summary>
            Adjusts the width of all columns to fit the data.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the width of columns in a range to fit the data.
            </summary>
            <param name="leftCol">Left column in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <param name="extraSpace">Amount of extra space, in pixels, to add to the column widths.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32)">
            <summary>
            Adjusts the width of all columns fit the data.
            </summary>
            <param name="extraSpace">Amount of extra space, in pixels, to add to the column widths.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCol(System.Int32)">
            <summary>
            Adjusts the width of a column to fit the data.
            </summary>
            <param name="col">Column index.</param>
            <remarks>
            This method measures every cell in the column, taking into account the cell contents and style. 
            If the grid has a large number of rows, consider using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> 
            method instead, because it allows you to specify a smaller set of rows and columns to measure.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCol(System.Int32,System.Int32)">
            <summary>
            Adjusts the width of a column to fit the data.
            </summary>
            <param name="col">Column index.</param>
            <param name="extraSpace">Amount of extra space, in pixels, to add to the column widths.</param>
            <remarks>
            This method measures every cell in the column, taking into account the cell contents and style. 
            If the grid has a large number of rows, consider using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> 
            method instead, because it allows you to specify a smaller set of rows and columns to measure.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Adjusts the height of a row range to fit the data in a cell range.
            </summary>
            <param name="topRow">Top row in the range.</param>
            <param name="leftCol">Left column in the range.</param>
            <param name="bottomRow">Bottom row in the range.</param>
            <param name="rightCol">Right column in the range.</param>
            <param name="extraSpace">Amount of extra space, in pixels, to add to the column widths.</param>
            <param name="flags">Flags that control auto-sizing options.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows">
            <summary>
            Adjusts the height of all rows to fit the data.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRow(System.Int32)">
            <summary>
            Adjusts the height of a row to fit the data.
            </summary>
            <param name="row">Row index.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Automatically size grid columns to fit the largest entry.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the cell contents.</param>
            <param name="row1">Index of the first row to be measured.</param>
            <param name="col1">Index of the first column to be measured.</param>
            <param name="row2">Index of the last row to be measured.</param>
            <param name="col2">Index of the first column to be measured.</param>
            <param name="extra">Extra space, in twips, to add to the largest entry.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AutoSizeFlags"/> value that specifies auto-sizing behavior.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Automatically size grid columns to fit the largest entry.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the cell contents.</param>
            <param name="row1">Index of the first row to be measured.</param>
            <param name="col1">Index of the first column to be measured.</param>
            <param name="row2">Index of the last row to be measured.</param>
            <param name="col2">Index of the first column to be measured.</param>
            <param name="extra">Extra space, in twips, to add to the largest entry.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AutoSizeFlags"/> value that specifies auto-sizing behavior.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special 
            key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.IsInputChar(System.Char)">
            <summary>
            Determines if a character is an input character that the control recognizes.
            </summary>
            <param name="charCode">The character to test.</param>
            <returns>True if the character should be sent directly to the control and not preprocessed, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Called when the grid contents scroll.
            </summary>
            <param name="sb"><see cref="T:System.Windows.Forms.ScrollBars"/> value that specifies the scroll direction.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid scrolling behavior. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnScrollTip(System.Int32)">
            <summary>
            Called when the grid contents scroll vertically, to update the value of the scroll tip.
            </summary>
            <param name="newValue">New value for the vertical scroll bar.</param>
            <remarks>
            This method processes the new scroll position and calls <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnShowScrollTip(C1.Win.C1FlexGrid.ToolTipEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragEnter"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragOver"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragDrop"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnBeforeScrollTip(C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            This method is obsolete. Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnShowScrollTip(C1.Win.C1FlexGrid.ToolTipEventArgs)"/> event instead.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShouldSerializeVisualStyle">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.VisualStyle"/> 
            property is set explicitly and should be persisted.
            </summary>
            <returns>True if the property was explicitly set by the user.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ResetVisualStyle">
            <summary>
            Resets the value of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.VisualStyle"/> ambient property.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.OnAmbientChangedVisualStyle">
            <summary>
            Method invoked when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.VisualStyle"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Cut">
            <summary>
            Cuts the content of the current selection to the clipboard.
            </summary>
            <remarks>
            This command copies the current selection to the clipboard, then deletes
            the editable content within the selection.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.Paste">
            <summary>
            Pastes the content of the clipboard onto the current selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ApplyFilters">
            <summary>
            Applies all column filters to the data on the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.EditFilter(System.Int32)">
            <summary>
            Edits the filter associated with a given column.
            </summary>
            <param name="col">Index of the column whose filter should be edited.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.EditFilter(C1.Win.C1FlexGrid.Column)">
            <summary>
            Edits the filter associated with a given column.
            </summary>
            <param name="col"><see cref="T:C1.Win.C1FlexGrid.Column"/> whose filter should be edited.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ClearFilter(System.Int32)">
            <summary>
            Clears the filter associated with a given column.
            </summary>
            <param name="col">Index of the column whose filter should be cleared.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.ClearFilter(C1.Win.C1FlexGrid.Column)">
            <summary>
            Clears the filter associated with a given column.
            </summary>
            <param name="col"><see cref="T:C1.Win.C1FlexGrid.Column"/> whose filter should be cleared.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetControl(C1.Win.C1FlexGrid.C1FlexGridBase,System.String)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetControls(C1.Win.C1FlexGrid.C1FlexGridBase)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetLocalizedString">
            <summary>
            Occurs when the filter localizes a string in the user interface.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> control automatically localizes the
            column filter based on the system's current culture and in the setting
            of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Language"/> property.</para>
            <para>This event allows you to customize the filter strings or to
            implement localization to languages that are not supported by the grid's
            built-in localization mechanism.</para>
            <para>To modify the content of any of the filter's UI elements, handle
            this event and set the <b>e.Value</b> parameter to the text you would
            like to display.</para>
            </remarks>
            <example>
            The example below shows how you can change the strings in the filter
            UI based on the string value and on the name of the controls being
            localized:
            <code>
            void Initialize()
            {
              // enable filtering
              _flex.AllowFiltering = true;
              
              // set GetLocalizedString handler
              _flex.GetLocalizedString += _flex_GetLocalizedString;
            }
            void _flex_GetLocalizedString(object sender, C1.Win.C1FlexGrid.GetLocalizedStringEventArgs e)
            {
              // customize item based on text value
              if (e.Value == "(Select All)")
              {
                e.Value = "(Select Everything)";
              }
              
              // customize item based on component name
              switch (e.ComponentName)
              {
                case "_btnApplyFilter":
                  e.Value = "OK";
                  break;
                case "_btnClearFilter":
                  e.Value = "Reset";
                  break;
                case "_btnCancel":
                  e.Value = "Close";
                  break;
              }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged">
            <summary>
            Fires when the grid or its contents change.
            </summary>
            <remarks>
            <para>This is a general event that fires before more specific events.
            For example, if the user drags a column with the mouse, the control fires the 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragColumn"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/>, and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragColumn"/> events.</para>
            <para>The <b>GridChanged</b> event allows you to create a centralized handler 
            for all types of grid events. It does not provide detailed arguments for 
            every event, nor the option of canceling user actions.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown">
            <summary>
            Fires before the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event is handled by the grid.
            </summary>
            <remarks>
            This event fires before the grid processes the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event, and
            gives the program a chance to customize the behavior of the control and optionally
            cancel the default handling of the mouse.
            </remarks>
            <example>
            The code below handles the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event to detect clicks 
            on row headers and provide OLE drag and drop functionality.
            <code>
            void _flex_BeforeMouseDown(object sender, C1.Win.C1FlexGrid.BeforeMouseDownEventArgs e)
            {
            	// start dragging when the user clicks the row headers
            	HitTestInfo hti = _flex.HitTest(e.X, e.Y);
            	if (hti.Type == HitTestTypeEnum.RowHeader)
            	{
            		e.Cancel = true;  // cancel default handling
            		HandleRowDragDrop(hti.Row); // handle row drag/drop
            	}
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDoubleClick">
            <summary>
            Fires before the DoubleClick event is handled by the grid.
            </summary>
            <remarks>
            This event fires before the grid processes the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event, and
            gives the program a chance to customize the behavior of the control and optionally
            cancel the default handling of the mouse.
            </remarks>
            <example>
            The code below handles the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDoubleClick"/> event to detect double-clicks 
            on cells in a specific column and provide a custom edit dialog instead of using the 
            built-in editor.
            <code>
            void _flex_BeforeDoubleClick(object sender, C1.Win.C1FlexGrid.BeforeMouseDownEventArgs e)
            {
            	// detect double-clicks on column "Customer"
            	HitTestInfo hti = _flex.HitTest(e.X, e.Y);
            	if (hti.Type == HitTestTypeEnum.Cell &amp;&amp; _flex[hti.Column].Name == "Customer")
            	{
            		e.Cancel = true;  // cancel default handling
            		ShowCustomEditDialog(hti.Row, hti.Column); // handle row drag/drop
            	}
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragRow">
            <summary>
            Fires before the user starts dragging a row.
            </summary>
            <remarks>
            <para>This event only fires when the user drags a row using the mouse.</para>
            <para>It does not fire when a row is moved using the <see cref="M:C1.Win.C1FlexGrid.RowCollection.Move(System.Int32,System.Int32)"/> method.</para>
            <para>You can prevent specific rows from being dragged by the user by setting their 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowDragging"/> property to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragRow">
            <summary>
            Fires after the user finishes dragging a row.
            </summary>
            <remarks>
            <para>This event only fires when the user drags a row using the mouse.</para>
            <para>It does not fire when a row is moved using the <see cref="M:C1.Win.C1FlexGrid.RowCollection.Move(System.Int32,System.Int32)"/> method.</para>
            <para>You can prevent specific rows from being dragged by the user by setting their 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowDragging"/> property to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragColumn">
            <summary>
            Fires before the user starts dragging a column.
            </summary>
            <remarks>
            <para>This event only fires when the user drags a column using the mouse.</para>
            <para>It is does not fire when a column is moved using the <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Move(System.Int32,System.Int32)"/> method.</para>
            <para>You can prevent specific columns from being dragged by the user by setting their 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowDragging"/> property to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragColumn">
            <summary>
            Fires after the user finishes dragging a column.
            </summary>
            <remarks>
            <para>This event only fires when the user drags a column using the mouse.</para>
            <para>It does not fire when a column is moved using the <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Move(System.Int32,System.Int32)"/> method.</para>
            <para>You can prevent specific columns from being dragged by the user by setting their 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowDragging"/> property to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSort">
            <summary>
            Fires before a column is sorted by a click on a column header.
            </summary>
            <remarks>
            <para>This event only fires if the sorting was caused by a click on a column header. It does not fire 
            before sorting with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method.</para>
            <para>This event is useful when you want to prevent the user from sorting certain columns or to specify 
            custom sorting orders for specific columns. You may do so by modifying the value of the 
            <see cref="F:C1.Win.C1FlexGrid.SortColEventArgs.Order"/> parameter.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSort">
            <summary>
            Fires after a column is sorted by a click on a column header.
            </summary>
            <remarks>
            <para>This event only fires if the sorting was caused by a click on a column header cell (see the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowSorting"/> property). It does not fire after sorting with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method.</para>
            <para>This event is useful if you want to update user interface elements to reflect the new sorting. 
            To prevent certain columns from being sorted, or to alter their default sorting order, use the 
            <see cref="P:C1.Win.C1FlexGrid.Column.AllowSorting"/> or handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSort"/> event.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAutosizeRow">
            <summary>
            Fires before a row is automatically resized by a double-click on a row header.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAutosizeColumn">
            <summary>
            Fires before a column is automatically resized by a double-click on a column header.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeRow">
            <summary>
            Fires before a row is resized by dragging the row header.
            </summary>
            <remarks>
            Use the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowResizing"/> property to determine whether users 
            are allowed to resize rows, columns, or both. 
            <para><see cref="T:C1.Win.C1FlexGrid.Row"/> and <see cref="T:C1.Win.C1FlexGrid.Column"/> 
            objects also have an <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowResizing"/> property 
            that allows you to prevent specific rows and columns from being resized.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow">
            <summary>
            Fires after a row is resized by dragging the row header.
            </summary>
            <remarks>
            This event is fired after a row is resized by the user, by dragging the edge 
            of the row header cell with the mouse (see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowResizing"/> property). 
            It is not fired when a row is resized by assigning a new value to the 
            <see cref="P:C1.Win.C1FlexGrid.Row.Height"/> property.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn">
            <summary>
            Fires before a column is resized by dragging the column header.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn">
            <summary>
            Fires after a column is resized by dragging the column header.
            </summary>
            <remarks>
            This event is fired after a column is resized by the user, by dragging the edge 
            of the column header cell with the mouse (see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowResizing"/> property). 
            It is not fired when a column is resized by assigning a new value to the 
            <see cref="P:C1.Win.C1FlexGrid.Column.Width"/> property.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFreezeRow">
            <summary>
            Fires before rows are frozen by dragging the frozen row divider.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing"/> property to enable or disable row and column freezing.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFreezeRow">
            <summary>
            Fires after rows are frozen by dragging the frozen row divider.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing"/> property to enable or disable row and column freezing.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFreezeColumn">
            <summary>
            Fires before columns are frozen by dragging the frozen column divider.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing"/> property to enable or disable row and column freezing.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFreezeColumn">
            <summary>
            Fires after columns are frozen by dragging the frozen column divider.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing"/> property to enable or disable row and column freezing.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseHoverCell">
            <summary>
            Fires when the mouse enters or leaves a cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseEnterCell">
            <summary>
            Fires when the mouse enters a cell.
            </summary>
            <remarks>
            <para>Many applications track mouse movement and react to the cell that is currently
            under the mouse. This can be done using the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event, but that 
            is not very efficient since the event fires many times while the mouse is over the 
            same cell.</para>
            <para>The <b>MouseEnterCell</b> event allows you to implement cell tracking 
            efficiently, since it only fires once until the mouse leaves the cell.</para>
            </remarks>
            <example>
            The code below tracks mouse movement and highlights the cell under the mouse:
            <code>
            void Form1_Load(object sender, EventArgs e)
            {
              // create style for tracking cell under the mouse
              CellStyle cs = _flex.Styles.Add("track");
              cs.BackColor = Color.Gold;
            }
            void _flex_MouseEnterCell(object sender, RowColEventArgs e)
            {
              // apply tracking style when mouse enters the cell
              _flex.SetCellStyle(e.Row, e.Col, _flex.Styles["track"]);
            }
            void _flex_MouseLeaveCell(object sender, RowColEventArgs e)
            {
              // remove tracking style when mouse leaves the cell
              _flex.SetCellStyle(e.Row, e.Col, (CellStyle)null);
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.MouseLeaveCell">
            <summary>
            Fires when the mouse leaves a cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScroll">
            <summary>
            Fires before the grid scrolls.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterScroll">
            <summary>
            Fires after the grid scrolls.
            </summary>
            <remarks>
            This event allows you to prevent the user from scrolling the grid while an operation 
            is being performed on the current selection.
            </remarks>
            <example>
            The code below prevents the grid from scrolling while the grid is in edit mode.
            <code>
            void _flex_BeforeScroll(object sender, C1.Win.C1FlexGrid.RangeEventArgs e)
            {
                if (_flex.Editor != null)
                    e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip">
            <summary>
            Fires before the vertical ScrollTip is displayed.
            </summary>
            <remarks>
            <para>This event fires only if the <b>ShowScrollTips</b> flag is set in the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ScrollOptions"/> property.</para>
            <para>It allows you to specify the text that will be displayed in the scroll tip.</para>
            </remarks>
            <example>
            The code below uses the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event to display a scroll tip showing the value of the
            first cell that will become visible when the user stops scrolling.
            <code>
            _flex.ScrollOptions = ScrollFlags.DelayedScroll | ScrollFlags.ShowScrollTips;
            void _flex_ShowScrollTip(object sender, ToolTipEventArgs e)
            {
                e.ToolTipText = string.Format("row {0}", e.Row);
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange">
            <summary>
            Fires before the current cell changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties).
            </summary>
            <remarks>
            <para>This event fires before the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties change, either as a 
            result of user actions or through code. It allows you to prevent the selection of certain cells, 
            thus creating "protected" ranges on a grid.</para>
            <para><see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/> fires only when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> 
            properties are about to change. To detect extended selections, you also need to handle the 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> event.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterRowColChange">
            <summary>
            Fires after the current cell changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties).
            </summary>
            <remarks>
            <para>This event fires before the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties change, either as a 
            result of user actions (mouse or keyboard) or through code. It allows you to display additional information 
            about the currently selected row, column, or cell.</para>
            <para>To perform validation or prevent certain cells from being selected, use the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/> 
            and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> events instead.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange">
            <summary>
            Fires before the selection changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties).
            </summary>
            <remarks>
            <para>This event fires before the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties change, either as a result 
            of user actions or through code. It allows you to prevent the selection of certain cells, thus creating 
            "protected" ranges on a grid.</para>
            <para>To prevent the selection of a range, you also need to handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/> event, which 
            is fired before the Row and Col properties change.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSelChange">
            <summary>
            Fires after the selection changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties).
            </summary>
            <remarks>
            <para>This event is fired after the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties change, either as 
            a result of user actions (mouse or keyboard) or through code.</para>
            <para>This event is useful if you want to display additional information about the current selection. To 
            perform validation or prevent certain cells from being selected, use the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/> and
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> events instead.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowColChange">
            <summary>
            Fires after the current cell changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties).
            </summary>
            <remarks>
            <para><see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowColChange"/> fires when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties change, either 
            as a result of user actions (mouse or keyboard) or through code.</para>
            <para>This event does not fire when the selection changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties) 
            but the active cell (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>) remains the same. In this case, the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SelChange"/> 
            event fires instead.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.SelChange">
            <summary>
            Fires after the selection changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties).
            </summary>
            <remarks>
            <para><see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SelChange"/> fires after the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, 
            or <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties change, either as a result of user actions (mouse or keyboard)
            or through code.</para>
            <para>This event also fires while the user extends the selection with the mouse.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveCell">
            <summary>
            Fires before the current cell changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties).
            </summary>
            <remarks>
            This event fires before the cursor leaves the current cell, either as a result of user actions 
            (mouse or keyboard), or through code.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.EnterCell">
            <summary>
            Fires after the current cell changes (<see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties).
            </summary>
            <remarks>
            This event fires after the cursor enters a cell, either as a result of user actions (mouse or keyboard), 
            or through code.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit">
            <summary>
            Fires before the grid enters edit mode, and also when the cell that has the
            focus needs to be painted.
            </summary>
            <remarks>
            <para>This event doesn't fire only when the grid is about to enter edit mode.</para>
            <para>It also fires while painting cells, in order to support drawing the editor's
            drop-down buttons.</para>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> event fires only when the grid is about to enter
            edit mode.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit">
            <summary>
            Fires before the control enters edit mode.
            </summary>
            <remarks>
            <para>This event fires before the control enters edit mode. It allows you to prevent 
            editing by setting the <b>Cancel</b> parameter to true, or to supply a list of choices 
            for a combo list using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property, or an edit mask using the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask"/> property.</para>
            <para>If the choices or the mask are the same for a whole column, you may set them more
            efficiently using the <see cref="P:C1.Win.C1FlexGrid.RowCol.ComboList"/> and <see cref="P:C1.Win.C1FlexGrid.RowCol.EditMask"/>
            properties for the <see cref="T:C1.Win.C1FlexGrid.Column"/> object. In this case, there's no need to handle 
            the <b>StartEdit</b> event at all.</para>
            <para>The grid also exposes a <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event. The difference between 
            the two is that <b>BeforeEdit</b> fires when the grid paints the cell that has the focus
            (so it can determine whether the cell has a drop-down button). <b>BeforeEdit</b> fires 
            more often than <b>StartEdit</b>, and does not always indicate that the grid is actually 
            entering edit mode.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterEdit">
            <summary>
            Fires after a cell has been edited.
            </summary>
            <remarks>
            <para>This event does not fire if the user cancels the edits by pressing the ESC key.</para>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveEdit"/> event fires whenever the grid leaves edit mode,
            even if the edits were canceled.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.LeaveEdit">
            <summary>
            Fires after the control leaves edit mode.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick">
            <summary>
            Fires after the user clicks a cell button.
            </summary>
            <remarks>
            <para>This event fires when the user clicks an edit button on a cell. Typically, 
            this event is used to pop up a custom editor for the cell (for example, dialogs for 
            selecting colors, dates, files, pictures, and so on).</para>
            <para>By default, cell edit buttons are displayed on the right side of a cell, 
            with an ellipsis caption ("..."). They are similar to the buttons displayed in the 
            <b>PropertyGrid</b> control, next to <b>Image</b> properties. You may customize 
            the button's appearance by assigning a picture to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonImage"/> property.</para>
            <para>To create an edit button on a cell, you must set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> 
            property to true and set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property (on the grid or on specific 
            columns) to an ellipsis ("...").</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetupEditor">
            <summary>
            Fires after a cell editor has been initialized by the grid, to allow additional custom initialization.
            </summary>
            <remarks>
            <para>This event can be used to customize the behavior of the cell editor by setting properties
            on the editor control.</para>
            <para>For example, the code below checks to see if the editor being used is a TextBox, and then
            sets the editor's CharacterCasing and MaxLength properties.</para>
            <code>
            void _flex_SetupEditor(object sender, RowColEventArgs e)
            {
                TextBox tb = _flex.Editor as TextBox;
                if (tb != null)
                {
                    if (_flex.Cols[e.Col].Name == "ID")
                        tb.MaxLength = 4;
                    else
                        tb.MaxLength = 32000;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit">
            <summary>
            Fires before the control exits cell edit mode, while the editor is still active.
            </summary>
            <remarks>
            <para>When this event fires, the contents of the editor have not been applied to the 
            grid. You can validate the editor contents and cancel the edits if necessary.</para>
            <para>To validate the editor contents, check the value contained in the <b>Editor.Text</b> 
            property. If the value is invalid for the cell, set the <b>Cancel</b> parameter to true 
            and the grid will remain in edit mode until the user types a valid entry.</para>
            <example>
            For example, the code below checks to make sure the value entered is an integer
            between 0 and 100:
            <code>
            void _flex_ValidateEdit(object sender, ValidateEditEventArgs e)
            {
                if (_flex.Cols[e.Col].Name = "Score")
                {
                    try
                    {
                        int value = int.Parse(_flex.Editor.Text);
                        if (value &gt;= 0 &amp;&amp; value &lt;= 50)
                            return; // accept edits
                    }
                    catch {}
                
                    // error or invalid range, refuse edits
                    e.Cancel = true;
                }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellChecked">
            <summary>
            Fires after a checkbox in a cell is checked or unchecked by the user.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.ChangeEdit">
            <summary>
            Fires in edit mode, after the contents of the editor change.
            </summary>
            <remarks>
            <para>This event fires while the grid is in edit mode and the contents of the editor change.
            This may be caused by the user typing into the editor or selecting a new item in a 
            drop down list.</para>
            <para>When this event fires, the new editor content has not been applied to the grid cell yet.
            You may check the new content using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property.</para>
            </remarks>
            <example>
            The code below shows a message when the text being edited contains more than 10 characters:
            <code>
            void _flex_ChangeEdit(object sender, EventArgs e)
            {
              // get text in editor
              string text = _flex.Editor.Text;
            
              // show message if it's too long
              statusStrip1.Text = text.Length &gt; 10
                ? "This text seems too long..."
                : "This text looks OK...";
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboDropDown">
            <summary>
            Fires in edit mode, when the dropdown portion of an editor opens.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboCloseUp">
            <summary>
            Fires in edit mode, when the dropdown portion of an editor closes.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyDownEdit">
            <summary>
            Fires in edit mode, when the user presses a key.
            </summary>
            <remarks>
            <para>The <b>KeyDownEdit</b> event corresponds to the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event, 
            except it fires when the grid is in edit mode (in this case, the control that received the 
            key is the editor, not the grid itself).</para>
            <para>The editor has three modes: text, drop-down combo, or drop-down list. The mode used is 
            determined by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> properties in the grid and column objects.</para>
            <para>While editing with the text editor or with a drop-down combo, you may set or retrieve 
            the contents of the editor by retrieving the editor control with the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> 
            property and casting it to the proper type.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyUpEdit">
            <summary>
            Fires in edit mode, when the user releases a key.
            </summary>
            <remarks>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyUpEdit"/> event corresponds to the <see cref="E:System.Windows.Forms.Control.KeyUp"/> 
            event, except it fires when the grid is in edit mode (in this case, the control that 
            receives the key is the editor, not the grid itself).</para>
            <para>The editor has three modes: text, drop-down combo, or drop-down list. The mode 
            used is determined by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> properties in the grid and column objects.</para>
            <para>While editing with the text editor or with a drop-down combo, you may set or retrieve 
            the contents of the editor by retrieving the editor control with the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> 
            property and casting it to the proper type.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyPressEdit">
            <summary>
            Fires in edit mode, when the user presses a character key.
            </summary>
            <remarks>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyPressEdit"/> event corresponds to the 
            <see cref="E:System.Windows.Forms.Control.KeyPress"/> event, except it fires when the 
            grid is in edit mode (in this case, the control that receives the 
            key is the editor, not the grid itself).</para>
            <para>The editor has three modes: text, drop-down combo, or drop-down list. 
            The mode used is determined by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> properties in the 
            grid and column objects.</para>
            <para>While editing with the text editor or with a drop-down combo, you may set
            or retrieve the contents of the editor by retrieving the editor control with the
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property and casting it to the proper type.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellChanged">
            <summary>
            Fires after the contents of a cell have changed.
            </summary>
            <remarks>
            <para>This event allows you to perform processing whenever the contents of a cell 
            change, regardless of how they were changed (for example, a user typed data into 
            the cell, data got loaded from a database, or data was assigned to the grid through code).</para>
            <para>This event can be used to provide conditional formatting and dynamic data summaries, 
            which get updated automatically whenever the data changes.</para>
            <para>This event fires in bound and unbound modes. In some bound more scenarios, the
            data source object may inform the grid that some data in the current row changed, without
            specifying which column changed. In this case, the <b>Col</b> parameter will be set to -1.
            Event handlers should be prepared to handle this situation without throwing exceptions.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDataRefresh">
            <summary>
            Fires after any data source change notifications.
            </summary>
            <remarks>
            <para>When the grid is used in bound mode, any changes to the data source cause the 
            grid to fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDataRefresh"/> event. This event is the ideal place 
            to put code that updates the grid with data-dependent elements such as subtotals and 
            outline trees.</para>
            <para><b>Note:</b> The <see cref="T:System.ComponentModel.ListChangedEventHandler"/> delegate is defined in 
            the <b>System.ComponentModel</b> namespace.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError">
            <summary>
            Fires after the data source reports an error condition.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue">
            <summary>
            Fires when the grid needs to retrieve data for an unbound cell.
            </summary>
            <remarks>
            <para>This event fires in bound mode when the grid contains unbound columns. 
            Unbound columns are columns that have the <b>Name</b> property set to values
            that do not map to columns in the data source. The information in unbound columns
            must be provided by the application, by setting the <b>Value</b> property of the
            <see cref="T:C1.Win.C1FlexGrid.UnboundValueEventHandler"/> parameter.</para>
            <para>The <see cref="T:System.Data.DataTable"/> class supports calculated columns that in many 
            situations can be used instead of unbound columns.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetUnboundValue">
            <summary>
            Fires when the grid needs to store data in an unbound cell.
            </summary>
            <remarks>
            <para>This event fires in bound mode when the grid contains unbound columns. 
            Unbound columns are columns that have the <b>Name</b> property set to values
            that do not map to columns in the data source. The information in unbound columns
            must be provided by the application using the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue"/> event.</para>
            <para>In most cases, unbound columns are read-only, and you don't need to handle this event. 
            However, if a value is assigned to an unbound cell, either through editing or programmatically, 
            the grid fires this event to allow the application to store the value using whatever mechanism 
            is appropriate.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataBindingComplete">
            <summary>
            Fires after a data-binding operation has finished.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataSourceChanged">
            <summary>
            Fires when the value of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.DataMemberChanged">
            <summary>
            Fires when the value of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeCollapse">
            <summary>
            Fires before a node row is collapsed or expanded.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterCollapse">
            <summary>
            Fires after a node row is collapsed or expanded.
            </summary>
            <para>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeCollapse"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterCollapse"/> events 
            fire before and after node rows are expanded or collapsed. You can determine 
            whether the node is being collapsed or expanded by checking the value of the 
            node's its <see cref="P:C1.Win.C1FlexGrid.Node.Expanded"/> property.</para>
            <para>These events allow you to populate outlines on demand, so you only need 
            to create the rows that will actually be shown to the user. For example, if 
            you are using the grid to display a directory tree, it would take a long time 
            to read each directory on the disk in order to populate the tree.</para>
            </para>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell">
            <summary>
            Fires before the grid draws a cell, when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DrawMode"/> property is set to <see cref="F:C1.Win.C1FlexGrid.DrawModeEnum.OwnerDraw"/>.
            </summary>
            <remarks>
            <para>The <b>OwnerDrawCell</b> event only fires when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DrawMode"/> property is 
            set to <see cref="F:C1.Win.C1FlexGrid.DrawModeEnum.OwnerDraw"/>.</para>
            <para>You can use this event to customize the appearance of any cell in the grid. 
            The event allows three main types of customization:</para>
            <list type="number">
            <item><term></term><description>
            Change the value of the <b>Text</b> and <b>Image</b> parameters to modify the values displayed 
            by the grid. You can use this type of customization to replace password strings with asterisks, 
            for example.</description></item>
            <item><term></term><description>
            Change the <b>Style</b> property to display the cell using a different style than the one 
            selected by the grid by default. You can use this type of customization to provide conditional 
            formatting, for example.</description></item>
            <item><term></term><description>
            Use the <b>Graphics</b> and <b>Bounds</b> parameters and draw the cell yourself. When drawing 
            cells this way, you may call the <see cref="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.DrawCell(C1.Win.C1FlexGrid.DrawCellFlags)"/> member to force 
            the grid to draw specific parts of the cell, while your code draws other parts. For example, 
            you could paint a custom background and then call <b>DrawCell</b> to have the grid paint the cell
            border and contents.
            </description></item>
            </list>
            <para>The <b>OwnerDrawCell</b> event also fires when the grid auto sizes rows or columns (see the 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> methods). This is done because the 
            grid needs to measure the cell using the same text, image, and style parameters that are used to 
            render it. In these cases, the <b>Measuring</b> parameter is set to true and the <b>Bounds</b>
            rectangle is empty.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforePageBreak">
            <summary>
            Fires while the control is being printed to provide control over page breaks.
            </summary>
            <remarks>
            <para>This event is fired while the control is being printed with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/>
            method to provide control over page breaks.</para>
            <para>Set the <b>Cancel</b> parameter to true to indicate that the given <b>Row</b> should 
            not be printed at the top of a page. In this case, the control will move the break point up 
            and fire the event again until it finds a valid break point. Note that you can only prevent
            page breaks, not force them.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeginPrint">
            <summary>
            Fires before the grid starts printing.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.EndPrint">
            <summary>
            Fires after the grid finishes printing.
            </summary>
            <remarks>
            <para>This event is typically used to update the user interface and provide
            feedback while printing the grid.</para>
            <para>Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> method to print the grid and specify the document 
            name, common printing options, headers and footers.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to specify less common printing 
            options such as header and footer fonts, page margins, orientation, and so on.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.PrintPage">
            <summary>
            Fires after the grid finishes printing a page.
            </summary>
            <remarks>
            <para>This event is typically used to provide feedback while printing the grid,
            and to offer the user a cancel button that can be used to stop the printing process.
            You can also use this event to add custom elements to the printed pages.</para>
            <para>Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> method to print the grid and specify the document name, 
            common printing options, headers and footers.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to specify less common printing options 
            such as header and footer fonts, page margins, orientation, and so on.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartDrag">
            <summary>
            Fires before the grid starts an automatic OLE drag operation.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeAddRow">
            <summary>
            Fires before a new row is added by the user.
            </summary>
            <remarks>
            <para>This event only fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> is set to true and 
            the user creates a new empty row by moving the cursor into the last row on the grid. 
            It does not fire when a new row is added to the grid programmatically or when a
            row is added to the grid's data source.</para>
            <para>You can use this event to cancel the creation of new rows by setting the 
            <b>Cancel</b> parameter to true. In this case, the cursor does not move into 
            the new row.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterAddRow">
            <summary>
            Fires after a new row is added by the user.
            </summary>
            <remarks>
            <para>This event only fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> property is set to true 
            and the user creates a new empty row by moving the cursor into the last row on the 
            grid.</para>
            <para>It does not fire when a new row is added to the grid programmatically or 
            through the grid's data source.</para>
            <para>You can use this event to initialize the new rows.</para>
            <para>When a new row is created this way, it is initially empty, and the user may 
            cancel the row by moving the cursor out of the new row before making any edits. 
            In this case, the grid fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CancelAddRow"/> event and the new 
            (empty) row is removed.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.CancelAddRow">
            <summary>
            Fires when the cursor leaves the new row without making any changes to it.
            </summary>
            <remarks>
            For details, see the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterAddRow"/> event.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDeleteRow">
            <summary>
            Fires before a row is deleted by the user.
            </summary>
            <remarks>
            <para>This event only fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDelete"/> is set to true and the 
            user deletes one or more rows by selecting them and pressing the DEL key. 
            It does not fire when rows are removed from the grid programmatically or through 
            the grid's data source.</para>
            <para>You can use this event to cancel the deletion of the rows by setting the 
            <b>Cancel</b> parameter to true.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDeleteRow">
            <summary>
            Fires after one or more rows are deleted by the user.
            </summary>
            <remarks>
            <para>This event only fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDelete"/> property is set to True 
            and the user deletes one or more rows by pressing the DEL key. It does not fire 
            when rows are removed from the grid programmatically or through the grid's data source.</para>
            <para>When this event fires, the rows have already been removed from the grid, so the 
            <b>Row</b> parameter is always set to E.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellErrorInfo">
            <summary>
            Fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowErrors"/> is set to true and the control needs error information for a cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetRowErrorInfo">
            <summary>
            Fires when <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowErrors"/> is set to true and the control needs error information for a row.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSubtotal">
            <summary>
            Fires before each subtotal row is added to the grid.
            </summary>
            <remarks>
            <para>Subtotal rows are added when the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method is invoked.</para>
            <para>The event handler may prevent the grid from adding a particular row, or it
            may customize the caption, style, and aggregate value used in the new subtotal row.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSubtotal">
            <summary>
            Fires after each subtotal row has been added to the grid.
            </summary>
            <remarks>
            Subtotal rows are added when the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method is invoked.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeFilter">
            <summary>
            Fires before the column filters are applied to the grid.
            </summary>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterFilter">
            <summary>
            Fires after the column filters have been applied to the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the data in a grid cell.
            </summary>
            <remarks>
            <para>This is one of the indexers you can use to get or set the data stored in grid cells.</para>
            <para>You can index cells using the row and column indices or using the row 
            index and column name.</para>
            <para>Using integer indices is more efficient, because the grid doesn't have to 
            look up the column. Using column names is more flexible, because references 
            remain valid even if the user moves columns to a new position.</para>
            <para>When assigning a value to a cell, the grid tries to convert it into the type 
            specified for the column (see the <see cref="P:C1.Win.C1FlexGrid.RowCol.DataType"/> property). If the 
            grid can't convert the value, it fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event and the 
            cell retains its original value.</para>
            </remarks>
            <example>
            The example below creates a column and assigns it a name, then sets the value of
            a cell using the column index and retrieves the value using the column name:
            <code>
            // create a column, assign it a name and get the new index
            Column myCol = flex.Cols.Add();
            myCol.Name = "address";
            myCol.DataType = typeof(string);
            int colIndex = myCol.Index;
            
            // assign a value to a cell using cell coordinates:
            flex[1, colIndex] = "555, Broadway";
            
            // get the value using the column name
            string address = (string)flex[1, "address"];
            MessageBox.Show("The address is " + address);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Item(System.Int32,System.String)">
            <summary>
            Gets or sets the data in a grid cell.
            </summary>
            <remarks>
            <para>This is one of the indexers you can use to get or set the data stored in grid cells.</para>
            <para>You can index cells using the row and column indices or using the row index and column name.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Text">
            <summary>
            This property is inherited from the <see cref="T:System.Windows.Forms.Control"/> base class.
            </summary>
            <remarks>
            This property is not used by the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> class.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowResizing">
            <summary>
            Gets or sets whether the user is allowed to resize rows and columns with the mouse.
            </summary>
            <remarks>
            <para>To resize rows or columns, the mouse must be over the fixed area of the grid, and 
            close to a border between rows or columns. The mouse pointer will change into a sizing 
            pointer and the user can drag the row or column to change the row height or column width.</para>
            <para>If a group of columns is selected (from first to last row) and the user resizes one 
            of them, all selected columns are resized. The same applies to rows.</para>
            <para>If column sizing is allowed, users may double-click the resizing area to resize a 
            column so it will automatically fit the longest entry.</para>
            <para>Rows with zero height and columns with zero width can't be resized by the user. 
            If you want to make them very small but still resizable, set their height or width to 
            one pixel, not to zero.</para>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeRow"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn"/> events fire 
            before resizing starts, and may be used to prevent resizing of specific rows and columns. 
            The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn"/> events fire after 
            resizing, and may be used to validate the user's action and to update the display.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing">
            <summary>
            Gets or sets whether the user is allowed to freeze rows and columns with the mouse.
            </summary>
            <remarks>
            <para>Frozen cells remain on the screen when the user scrolls the control 
            (like fixed cells), but they are selectable and editable (like scrollable cells). 
            They are painted using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Frozen"/> style.</para>
            <para>To freeze rows or columns at runtime, the mouse must be near the edge of the 
            frozen area. The mouse pointer will then change into a 'freeze' pointer (looks like 
            a padlock) and the user can drag the frozen boundary to a new row or column.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDragging">
            <summary>
            Gets or sets whether the user is allowed to drag rows and columns with the mouse.
            </summary>
            <remarks>
            <para>Row dragging may not work in bound mode. This is because some data sources
            do not allow absolute positioning of rows.</para>
            <para>ADO.NET DataTable object in particular do not support this.</para>
            <para>Column dragging is supported for any data source, and row dragging is always
            supported in unbound mode.</para>
            <para>You can prevent specific rows and columns from being dragged by setting 
            their <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowDragging"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.HighLight">
            <summary>
            Gets or sets when to highlight selected cells.
            </summary>
            <remarks>
            You can customize the appearance of highlighted cells by modifying the 
            <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Highlight"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.FocusRect">
            <summary>
            Gets or sets the type of focus rectangle to display.
            </summary>
            <remarks>
            <para>If the focus rectangle is drawn, then the current cell is painted using 
            the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Focus"/> style, which by default looks like a regular 
            scrollable cell (as in most spreadsheets and grids).</para>
            <para>If the focus rectangle is hidden (using the <see cref="F:C1.Win.C1FlexGrid.FocusRectEnum.None"/> setting), 
            the current cell is painted using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Highlight"/> style.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing">
            <summary>
            Gets or sets whether the user is allowed to edit grid contents.
            </summary>
            <remarks>
            <para>If you set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> to false, editing is disabled for the 
            entire grid.</para>
            <para>To enable editing on some rows and columns, set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> to true 
            for the grid and set the <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowEditing"/> or <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowEditing"/> 
            properties to false for the rows and columns that should not be editable.</para>
            <para>You can also disable editing of specific cells by handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/>
            event and setting the Cancel event parameter to true.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowButtons">
            <summary>
            Gets or sets when to display combo buttons in cells.
            </summary>
            <remarks>
            <para>By default, the grid will show editing buttons in cells only when they
            have the focus. This is the same behavior used by the <see cref="T:System.Windows.Forms.PropertyGrid"/>
            control.</para>
            <para>If you set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowButtons"/> to <see cref="F:C1.Win.C1FlexGrid.ShowButtonsEnum.Always"/>,
            the grid will display buttons on any cells that have associated lists, even if they
            don't have the focus.</para>
            <para>For details on how to associate lists with cells, see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/>,
            <see cref="P:C1.Win.C1FlexGrid.RowCol.ComboList"/>, and <see cref="P:C1.Win.C1FlexGrid.RowCol.DataMap"/> properties.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCursor">
            <summary>
            Gets or sets whether the grid displays a record selector image on the first fixed column.
            </summary>
            <remarks>
            <remarks>
            The record selector is a small triangle similar to the one used in Access and most data grids.
            </remarks>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowSort">
            <summary>
            Gets or sets whether the grid should display sorting glyphs (a triangle) on the headers of sorted columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowSortPosition">
            <summary>
            Gets or sets a value that determines the position of the sort glyphs within column header cells.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowErrors">
            <summary>
            Gets or sets whether the grid should display error information in cells and rows.
            </summary>
            <remarks>
            <para>Setting this property to true causes the grid to display error information in cells and 
            rows. Error information is displayed as error icons in the cells or row headers. Moving the 
            mouse over the error icons show tooltips containing an error description.</para>
            <para>The error information may be supplied directly by data sources that implement the 
            <see cref="T:System.ComponentModel.IDataErrorInfo"/> interface (for example, the DataTable class implements this 
            interface).</para>
            <para>If the grid is bound to a data source that doesn't support <see cref="T:System.ComponentModel.IDataErrorInfo"/>,
            you can provide error information using the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellErrorInfo"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetRowErrorInfo"/> 
            events.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCellLabels">
            <summary>
            Gets or sets whether the grid should display labels over cells whose contents are partially hidden.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowSorting">
            <summary>
            Gets or sets whether the user is allowed to sort columns using the mouse.
            </summary>
            <remarks>
            <para>When the grid is used in bound mode, the sorting is performed by the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> object. If the data source object does not support sorting, 
            this property has no effect.</para>
            <para>In unbound mode, you can also sort data using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ExtendLastCol">
            <summary>
            Gets or sets whether the last column should be extended to fill the control.
            </summary>
            <remarks>
            This property only affects painting. It does not modify the <see cref="P:C1.Win.C1FlexGrid.Column.Width"/> 
            property of the last column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row">
            <summary>
            Gets or sets the row that contains the cursor.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties to make a cell current or to find 
            out which row or column contains the current cell. Columns and rows are 
            numbered from zero, beginning at the top for rows and at the left for columns.</para>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property may be set to -1 to hide the selection, to a value
            between zero and Rows.Fixed-1 to select a cell in a fixed row, or to a value between 
            Rows.Fixed and Rows.Count-1 to select a cell in a scrollable row.</para>
            <para>Setting the Row and Col properties automatically collapses the selection to a 
            single cell, resetting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties. 
            To specify a block selection, you must set Row and Col, then RowSel and ColSel. Alternatively,
            you can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method to select an arbitrary range with a single statement.</para>
            <para>Setting the Row and Col properties does not ensure that the current cell is visible.
            To do that, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col">
            <summary>
            Gets or sets the column that contains the cursor.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties to make a cell current or to find 
            out which row or column contains the current cell. Columns and rows are 
            numbered from zero, beginning at the top for rows and at the left for columns.</para>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> property may be set to -1 to hide the selection, to a value
            between zero and Cols.Fixed-1 to select a cell in a fixed column, or to a value between 
            Cols.Fixed and Cols.Count-1 to select a cell in a scrollable column.</para>
            <para>Setting the Row and Col properties automatically collapses the selection to a 
            single cell, resetting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties. 
            To specify a block selection, you must set Row and Col, then RowSel and ColSel. Alternatively,
            you can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method to select an arbitrary range with a single statement.</para>
            <para>Setting the Row and Col properties does not ensure that the current cell is visible.
            To do that, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel">
            <summary>
            Gets or sets the last row in the current selection.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties to modify a 
            selection or to determine which cells are currently selected. Columns and rows are 
            numbered from zero, beginning at the top for rows and at the left for columns.</para>
            <para>Setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties automatically 
            collapses the selection to a single cell, resetting the RowSel and ColSel properties. 
            Therefore, to specify a block selection, you must Row and Col, then RowSel and ColSel. 
            Alternatively, you may use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method to select a range with a 
            single statement.</para>
            <para>If the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.SelectionMode"/> property is set to <see cref="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox"/>,
            you should use the <see cref="P:C1.Win.C1FlexGrid.RowCol.Selected"/> property on individual row objects to 
            select and deselect rows.</para>
            <para>When a range is selected, the value of <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> may be greater than or 
            less than <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> may be greater than or less than <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/>.
            This is inconvenient when you need to set up bounds for loops. In these cases, you can 
            use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Selection"/> property to retrieve a normalized <see cref="T:C1.Win.C1FlexGrid.CellRange"/> 
            object, where r1 &lt;= r2 and c1 &lt;= c2.</para>
            <para>See the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> property for an example.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel">
            <summary>
            Gets or sets the last column in the current selection.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties to modify a 
            selection or to determine which cells are currently selected. Columns and rows are 
            numbered from zero, beginning at the top for rows and at the left for columns.</para>
            <para>Setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> properties automatically 
            collapses the selection to a single cell, resetting the RowSel and ColSel properties. 
            Therefore, to specify a block selection, you must Row and Col, then RowSel and ColSel. 
            Alternatively, you may use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Select(C1.Win.C1FlexGrid.CellRange,System.Boolean)"/> method to select a range with a 
            single statement.</para>
            <para>When a range is selected, the value of <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> may be greater than or 
            less than <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/> may be greater than or less than <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/>.
            This is inconvenient when you need to set up bounds for loops. In these cases, you can 
            use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Selection"/> property to retrieve a normalized <see cref="T:C1.Win.C1FlexGrid.CellRange"/> 
            object, where r1 &lt;= r2 and c1 &lt;= c2.</para>
            </remarks>
            <example>
            The code below loops though the cells in the current selection:
            <code>
            CellRange rg = flex.Selection;
            for (int r = rg.r1; r &lt;= rg.r2; r++)
              for (int c = rg.c1; c &lt;= rg.c2; c++)
                Console.WriteLine("the value at {0} {1} is {2}", r, c, flex[r, c]);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows">
            <summary>
            Gets the collection of <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> objects in the grid.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows"/> property returns a reference to the list of rows 
            that make up the grid. With this reference, you can add, remove, move, 
            and count the rows. For more information on the tasks that can be performed 
            with this collection, see the <see cref="T:C1.Win.C1FlexGrid.RowCollection"/> object.</para>
            <para>This property is read-only. The grid creates and manages the row collection for you.</para>
            <para>Upgrade Note: In the VSFlexGrid ActiveX control, the Rows and FixedRows properties 
            corresponded to the number of rows and fixed rows on the grid. In C1FlexGrid, use Rows.Count 
            and Rows.Fixed.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Cols">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects in the grid.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Cols"/> property returns a reference to the list of columns
            that make up the grid. With this reference, you can add, remove, move, 
            and count the columns. For more information on the tasks that can be performed 
            with this collection, see the <see cref="T:C1.Win.C1FlexGrid.ColumnCollection"/> object.</para>
            <para>This property is read-only. The grid creates and manages the column collection for you.</para>
            <para>Upgrade Note: In the VSFlexGrid ActiveX control, the <b>Cols</b> and <b>FixedCols</b> properties 
            corresponded to the number of columns and fixed columns on the grid. In C1FlexGrid, use 
            <b>Cols.Count</b> and <b>Cols.Fixed</b> instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColumnInfo">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol">
            <summary>
            Gets or sets the first visible column in the scrollable area.
            </summary>
            <remarks>
            <para>Setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> property causes the grid to scroll horizontally 
            so that the given column becomes the leftmost visible column. This is often useful when 
            you want to synchronize two or more grids so that when one of them scrolls, the other 
            scrolls as well. To scroll vertically, use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> property.</para>
            <para>When setting this property, the largest possible column number is the total 
            number of columns minus the number of columns that will fit the display. Attempting 
            to set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> to a greater value will cause the grid to set it to the 
            largest possible value (no error will occur).</para>
            <para>The value returned by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> properties 
            may correspond to partially visible rows or columns.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> properties to scroll using 
            cells as units. Use the <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> property to scroll the grid using 
            pixel units.</para>
            <para>To ensure that a given cell is visible, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow">
            <summary>
            Gets or sets the first visible row in the scrollable area.
            </summary>
            <remarks>
            <para>Setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> property causes the grid to scroll vertically
            so that the given row becomes the topmost visible row. This is often useful when 
            you want to synchronize two or more grids so that when one of them scrolls, the other 
            scrolls as well. To scroll horizontally, use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> property.</para>
            <para>When setting this property, the largest possible row number is the total 
            number of rows minus the number of rows that will fit the display. Attempting 
            to set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> to a greater value will cause the grid to set it to the 
            largest possible value (no error will occur).</para>
            <para>The value returned by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> properties 
            may correspond to partially visible rows or columns.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> properties to scroll using 
            cells as units. Use the <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> property to scroll the grid using 
            pixel units.</para>
            <para>To ensure that a given cell is visible, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.RightCol">
            <summary>
            Gets the last visible column in the scrollable area.
            </summary>
            <remarks>
            <para>The index returned may correspond to a column that is only partially visible.</para>
            <para>This property is read-only. To scroll the contents of the grid, see the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/>, and <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> properties.</para>
            <para>To ensure that a cell is visible, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.BottomRow">
            <summary>
            Gets the last visible row in the scrollable area.
            </summary>
            <remarks>
            <para>The index returned may correspond to a row that is only partially visible.</para>
            <para>This property is read-only. To scroll the contents of the grid, see the
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/>, and <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> properties.</para>
            <para>To ensure that a cell is visible, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ShowCell(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.SelectionMode">
            <summary>
            Gets or sets the grid's selection behavior.
            </summary>
            <remarks>
            <para>In most selection modes, you can obtain the current selection using the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Selection"/> property.</para>
            <para>When <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.SelectionMode"/> is set to <see cref="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox"/>, 
            however, the selection may consist of a non-continuous range of rows. In this case,
            you can check the selection state of individual rows using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Highlight"/> 
            property or obtain a collection of selected rows using the <see cref="P:C1.Win.C1FlexGrid.RowCollection.Selected"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Selection">
            <summary>
            Gets the selected range in normalized form.
            </summary>
            <remarks>
            The range returned corresponds to the current selection, defined by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>,
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RowSel"/>, and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ColSel"/> properties. 
            The range is normalized, so range.r1 &lt;= range.r2 and range.c1 &lt;= range.c2. This makes 
            it easy to loop through the selection. For example:
            <code>
            int total = 0;
            CellRange rg = flex.Selection;
            for (int r = rg.r1; r &lt;= rg.r2; r++)
              for (int c = rg.c1; c &lt;= rg.c2; c++)
                total += (int)flex[r,c];
            Console.WriteLine("The total is: {0}", total);
            </code>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.CursorCell">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that contains the cell at coordinates <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/>, <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Col"/>.
            </summary>
            <remarks>
            To get a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that spans the entire selection, use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Selection"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles">
            <summary>
            Gets the collection of cell styles defined in the grid.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles"/> property enables you to obtain a reference to the list of 
            styles that are currently defined in the grid. With this reference, you can add, remove, 
            and count the styles. For more information on the tasks that can be performed with this 
            collection, see the <see cref="T:C1.Win.C1FlexGrid.CellStyleCollection"/> class reference topics. For information 
            on cell formatting, see the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> reference topics.</para>
            <para>This property is read-only. The grid creates and manages the collection for you.</para>
            <para>Upgrade Note: The VSFlexGrid ActiveX control had many properties that affected the way 
            the grid was displayed (e.g. BackColor, BackColorAlternate, BackColorBkg, BackColorFixed, 
            BackColorFrozen, BackColorSel, and so on). The C1FlexGrid control replaces all these 
            properties with a collection of <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects. This makes the object 
            model simpler, more consistent, and more powerful. You can change the built-in styles or 
            define your own, and assign them to rows, columns, or arbitrary cell ranges.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.StyleInfo">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch">
            <summary>
            Gets or sets whether the grid should move the cursor searching for entries as the user types.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> is on, the grid will search the current column as the user 
            types, automatically moving the cursor and highlighting matches using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Search"/> style. 
            The search is case-insensitive. The search is canceled when the user presses the ESC key or 
            moves the selection with the mouse or cursor keys.</para>
            <para>When the user stops typing for about a second, the search buffer is reset. This amount of 
            time can be changed by setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearchDelay"/> property.</para>
            <para>If <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> is on and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> is set to true, the user 
            will need to hit ENTER, SPACE, or F2 to start editing cells. Other keys are used for searching.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearchDelay">
            <summary>
            Gets or sets the delay (in seconds) before the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> buffer is reset.
            </summary>
            <remarks>
            See the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.KeyActionEnter">
            <summary>
            Gets or sets the action to be performed when the user presses the ENTER key.
            </summary>
            <remarks>
            <para>By default, the grid will move the selection down to the next visible row when the 
            user presses the ENTER key. If the grid is editable, pressing ENTER will cause the grid 
            to enter edit mode, and pressing ENTER while in edit mode will cause the cursor to move down.</para>
            <para>This property allows you to modify this behavior and disable cell navigation with the
            ENTER key, or cause it to move the selection to the next column instead of row.</para>
            <para>Note that the <see cref="F:C1.Win.C1FlexGrid.KeyActionEnum.MoveAcrossOut"/> and as <see cref="F:C1.Win.C1FlexGrid.KeyActionEnum.MoveAcross"/>
            settings have the same effect when applied to this property. Pressing the ENTER key will
            move the selection within the grid, but will not move the focus to the next control on the form.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.KeyActionTab">
            <summary>
            Gets or sets the action to be performed when the user presses the TAB key.
            </summary>
            <remarks>
            By default, the grid will ignore the TAB key and it will be handled by the form, moving the focus to 
            the next control in the tab order. If you set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.KeyActionTab"/> property to a value 
            other than <see cref="F:C1.Win.C1FlexGrid.KeyActionEnum.None"/>, the grid will trap the TAB key and use it for navigating cells.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonImage">
            <summary>
            Gets or sets the image to be used in cell buttons.
            </summary>
            <remarks>
            <para>This property allows you to customize the appearance of cell buttons. For details on how to 
            create and handle cell buttons, see the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/> event.</para>
            <para>If you want to use a single picture for all cell buttons on the grid, assign the picture to the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonImage"/> property at design time. To change pictures depending on the row, column, or cell 
            being edited, set the picture in response to the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event.</para>
            <para>The pictures used for cell buttons should fit within the button (larger pictures are truncated). 
            They should also be transparent, so the button face can be seen through the empty parts of the picture.
            For best results, use small icons (16 x 16 pixels) and draw the picture in the upper left 12 x 12 
            rectangle within the icon.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseRow">
            <summary>
            Gets the index of the row under the cursor.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseRow"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseCol"/> properties are often useful when 
            handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event, to provide custom mouse handling. 
            They are also useful when handling mouse events that do not change the selection and for 
            detecting clicks on the fixed areas of the grid.</para>
            <para>Typical uses for these properties include displaying help information or tooltips when 
            the user moves the mouse over a selection, and the implementation of manual drag-and-drop 
            manipulation of OLE objects.</para>
            <para><see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseRow"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseCol"/> return -1 if the mouse is not over
            any rows or columns.</para>
            <para>To obtain more detailed hit-testing information, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseCol">
            <summary>
            Gets the index of the column under the cursor.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseRow"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseCol"/> properties are often useful when 
            handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event, to provide custom mouse handling. 
            They are also useful when handling mouse events that do not change the selection and for 
            detecting clicks on the fixed areas of the grid.</para>
            <para>Typical uses for these properties include displaying help information or tooltips when 
            the user moves the mouse over a selection, and the implementation of manual drag-and-drop 
            manipulation of OLE objects.</para>
            <para><see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseRow"/> and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.MouseCol"/> return -1 if the mouse is not over
            any rows or columns.</para>
            <para>To obtain more detailed hit-testing information, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest(System.Int32,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Redraw">
            <summary>
            Gets or sets whether the grid should paint its contents.
            </summary>
            <remarks>
            This property is deprecated. Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.BeginUpdate"/> and
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.EndUpdate"/> methods instead.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DrawMode">
            <summary>
            Gets or sets whether the control should fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event.
            </summary>
            <remarks>
            <para>If you set this property to <see cref="F:C1.Win.C1FlexGrid.DrawModeEnum.OwnerDraw"/>, the grid will 
            fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event whenever a cell needs to be painted.
            You can handle the event and customize the way each cell is painted, either by changing 
            the cell contents and style, or by taking over the painting and doing it yourself.</para>
            <para>For more details and examples, see the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DoubleBuffer">
            <summary>
            Gets or sets whether the control should use an off-screen buffer when painting to reduce flicker.
            </summary>
            <remarks>
            <para>This property is set to true by default, and rarely needs to be changed.</para>
            <para>Setting <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DoubleBuffer"/> to false may increase performance of applications
            running under terminal server software.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators">
            <summary>
            Gets or sets the characters used as row and column separators in clip strings.
            </summary>
            <remarks>For details and an example, see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Clip"/> property.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Clip">
            <summary>
            Gets or sets the contents of the selected range.
            </summary>
            <remarks>
            <para>The string assigned to (or returned by) the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Clip"/> property may contain 
            multiple cells. By default, tab characters (\t) indicate column breaks, and carriage return 
            characters (\n) indicate row breaks.</para>
            <para>The default row and column delimiters may be changed using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators"/> property.</para>
            <para>When a string is assigned to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Clip"/> property, only the selected 
            cells are affected. If there are more cells in the selected region than are described in the 
            clip string, the remaining cells are ignored. If there are more cells described in the clip 
            string than in the selected region, the extra portion of the clip string is ignored. Empty 
            entries in the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Clip"/> string will clear existing cell contents.</para>
            <para>To get or set a clip string for an arbitrary range, use a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object.</para>
            <para>The value returned is affected by the setting of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipboardCopyMode"/> 
            property.</para>
            </remarks>
            <example>
            The code below puts text into a selected area two rows high and two columns wide.
            <code>
            // build clip string
            string s = "r1 c1\tr1 c2\nr2 c1\tr2 c2";
            
            // select a 2 x 2 range and apply clip string to selection
            flex.Select(2, 2, 4, 4);
            flex.Clip = s;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor">
            <summary>
            Gets or sets a reference to the cell editor that is currently active.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property returns a reference to the cell editor that is 
            currently active. This may be one of the built-in editors (a TextBox, a ComboBox, or a 
            DateTimePicker control), a custom editor, or null (if the grid is not in edit mode).</para>
            <para>You can use this property to programmatically access the editor, or to find out 
            if the grid is in edit mode.</para>
            <para>If you don't want to use the grid's built-in editors, you can use any other control 
            instead. To do this, either associate the external editor with a specific grid row, column, 
            or <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> using the <see cref="P:C1.Win.C1FlexGrid.CellStyle.Editor"/> property, which you can 
            get and set at any time.</para>
            <para>Alternatively, you can handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> event and assign any control 
            directly to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property. (Note that the grid's Editor property can only 
            be assigned while handling the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> event, and is automatically reset to 
            null when the grid exits edit mode.)</para>
            <para>Any control can be used as an external editor, but to achieve complete integration with 
            the grid, the external editor should implement the IC1EmbeddedEditor interface. Some controls 
            implement this interface natively and don't require any extra code to be used as grid editors 
            (like the ones in the C1Input library). Most, however, will require you to implement at least 
            a few of the methods in IC1EmbeddedEditor.</para>
            <para>For examples of custom editors, please see Using Custom Editors and Creating Custom Editors 
            in this documentation, or visit our on-line sample library at http://helpcentral.componentone.com/ProductResources.aspx 
            and download the "CustomEditors" sample.</para>
            </remarks>
            <example>
            The code below uses the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetupEditor"/> event to customize the current editor 
            by setting two properties.
            <code>
            void _flex_SetupEditor(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
            {
                TextBox tb = _flex.Editor as TextBox;
                if (tb != null)
                {
                    tb.CharacterCasing = CharacterCasing.Upper;
                    tb.MaxLength = 12;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList">
            <summary>
            Gets or sets the list of items to be used by the drop-down editor.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property specifies the type of editor to be used when 
            editing a cell. You may use a text box, drop-down list, drop-down combo, or an edit button 
            to pop up custom editor forms.</para>
            <para>To use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> property 
            to true and respond to the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event by setting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> 
            property to a string that describes the type of editing you want to use for that cell.
            The options are described below:</para>
            <para>1. To edit the cell using a regular text box, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property to an empty string. 
            For example:</para>
            <code>flex.ComboList = string.Empty;</code>
            <para>2. To edit the cell using a drop-down list, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property to a string containing the 
            available options, separated by pipe characters. For example:</para>
            <code>flex.ComboList = "Item 1|Item 2|Item 3";</code>
            <para>3. To edit the cell using a drop-down combo, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property to a string containing the 
            available options, separated by pipe characters ("|") and starting with a pipe character. For example:</para>
            <code>flex.ComboList = "|Item 1|Item 2|Item 3";</code>
            <para>4. To display an edit button, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property to a string containing an ellipsis ("..."). 
            Edit buttons look like regular push buttons, aligned to the right of the cell, with an ellipsis as a caption. 
            When the user clicks on the edit button, the grid fires the CellButtonClick event. In this case, the user can't 
            edit the cell contents directly. For example:</para>
            <code>flex.ComboList = "...";</code>
            <para>5. To display an edit button next to an editable cell, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property to a string 
            containing a pipe and an ellipsis ("|..."). In this case, you get a regular edit button but the user can also edit the
            cell contents directly. For example:</para>
            <code>flex.ComboList = "|...";</code>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property is especially useful in cases where different rows in 
            the same column may contain different types of data (for example a control such as the PropertyGrid).
            In this case, the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property allows you to adjust the type of editing you 
            want to provide depending on the current row.</para>
            <para>If all rows in the column contain the same type of data, use the Column's <see cref="P:C1.Win.C1FlexGrid.RowCol.ComboList"/> 
            property instead. This way, the grid will automatically select the list depending on the column 
            being edited and you don't need to handle any events.</para>
            <para>Note that the <b>ComboList</b> allows you to specify lists of strings only. Cells will store and display 
            these strings. If you want to store a certain type of data and display values associated with that data, see
            the <see cref="P:C1.Win.C1FlexGrid.RowCol.DataMap"/> property. The <b>DataMap</b> property allows you to store values in the cells 
            (for example a CustomerID) and display strings associated with that data (for example the customer name).</para>
            </remarks>
            <example>
            The code below handles the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event and assigns a value to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/>
            property so that the grid displays buttons on every other row.
            <code>
            void _flex_BeforeEdit(object sender, RowColEventArgs e)
            {
              _flex.ComboList = string.Empty;
              if (e.Row % 2 == 0) _flex.ComboList = "...";
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask">
            <summary>
            Gets or sets the input mask to use when editing cells.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask"/> specifies an input mask for automatic input formatting and 
            validation. The mask syntax is similar to the one used by the Microsoft MaskedEdit ActiveX 
            control and by Microsoft Access and is described below.</para>
            <para>Set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask"/> property in response to the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event, 
            in the same way you would set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboList"/> property.</para>
            <para>If the same mask is used to edit all values in a column, use the column's <see cref="P:C1.Win.C1FlexGrid.RowCol.EditMask"/> 
            property. This simplifies your code because you don't need to handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/> event.</para>
            <para>When the user is done editing a cell with a mask, the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit"/> event fires.
            The <cref name="ValidateEditEventArgs.Cancel"/> event parameter will be set to true if the mask was not filled 
            out properly, so in most cases you don't have to implement the handler. The default behavior ensures that 
            only valid data will be entered.</para>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask"/> string is composed of the following symbols:</para>
            <para></para>
            <para>1) Wildcards</para>
            <para>0	digit</para>
            <para>9	digit or space</para>
            <para>#	digit, space, or sign</para>
            <para>L	letter</para>
            <para>?	letter or space</para>
            <para>A	letter or digit</para>
            <para>a	letter, digit, or space</para>
            <para>&amp;	any character</para>
            <para></para>
            <para>2) Localized characters</para>
            <para>.	localized decimal separator</para>
            <para>,	localized thousand separator</para>
            <para>:	localized time separator</para>
            <para>/	localized date separator</para>
            <para></para>
            <para>3) Command characters</para>
            <para>\	next character is taken as a literal</para>
            <para>&gt;	translate letters to uppercase</para>
            <para>&lt;	translate letters to lowercase</para>
            <para></para>
            <para>4) Placeholder specification</para>
            <para>;	next character is used as a placeholder (the default is an underscore)</para>
            </remarks>
            <example>
            The code below sets the edit mask so the user can enter a phone number, with optional 
            area code, and a state in uppercase letters. The space-holder used is an asterisk ("*").
            <code>
            flex.EditMask = "(###) 000-0000 St\ate\: &gt;LL;*";
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree">
            <summary>
            Gets a reference to the <see cref="T:C1.Win.C1FlexGrid.GridTree"/> object that controls the appearance 
            of the outline tree in the grid.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> can group data hierarchically and display it with a 
            collapsible tree similar to the one in the Microsoft TreeView control.
            The <see cref="T:C1.Win.C1FlexGrid.GridTree"/> object is used to specify the position and appearance 
            of the outline tree.</para>
            <para>For details on create outlines, see the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method and
            the <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Nodes">
            <summary>
            Gets an array containing all zero-level <see cref="T:C1.Win.C1FlexGrid.Node"/>
            rows on the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember">
            <summary>
            Gets or sets the specific list in a <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> object that the grid should display.
            </summary>
            <remarks>
            <para>If a <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> contains multiple sources of data, you should set the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> property to one of the sources.</para>
            <para>For example, if the DataSource is a <see cref="T:System.Data.DataSet"/> contains three tables named Customers, 
            Orders, and OrderDetails, you must specify one of the tables to bind to.</para>
            <para>If the <see cref="T:System.Data.DataSet"/> contains only one <see cref="T:System.Data.DataTable"/>, you may set the 
            DataMember property to an empty string.</para>
            <para>You can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetDataBinding(System.Object,System.String)"/> method to set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> 
            and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> properties at the same time.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource">
            <summary>
            Gets or sets the data source for the grid.
            </summary>
            <remarks>
            <para>Any object that implements the <see cref="T:System.Collections.IList"/> or <see cref="T:System.ComponentModel.IListSource"/> 
            interfaces can be used as a data source.</para>
            <para>Specifically, the following ADO.NET data sources are valid: DataTable, DataView,
            DataSet, and DataViewManager.</para>
            <para>The following ComponentOne DataObjects components are also valid data sources:
            C1ExpressTable, C1ExpressVew, C1ExpressConnection, C1DataView, C1DataTableSource, and C1DataSet.</para>
            <para>If the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> reference contains more than one table, you must 
            also set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> property a string that specifies the table to bind to.
            For example, if the DataSource is a DataSet or DataViewManager that contains three tables named 
            Customers, Orders, and OrderDetails, you must specify one of the tables to bind to.</para>
            <para>You can use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SetDataBinding(System.Object,System.String)"/> method to set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> 
            and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataMember"/> properties simultaneously.</para>
            <para>You can also assign another <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> object to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> 
            property. In this case, the controls will share the same grid model, including the data, display styles, 
            selection, etc. This can be used to implement split views, where different controls display different 
            parts of the same data.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoResize">
            <summary>
            Gets or sets whether column widths are automatically adjusted when data is loaded.
            </summary>
            <remarks>
            <para>This property works when the control is bound to a <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/>.</para>
            <para>If <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoResize"/> is set to true, the control automatically resizes its 
            columns to fit the widest entry every time new data is read from the data source.</para>
            <para>If the data source contains a large number of rows and columns, the automatic
            resizing may take a relatively long time. In these cases, you should consider setting 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoResize"/> to false and setting the column widths directly in code.</para>
            <para>You may also use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> method to adjust the column widths
            automatically.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoGenerateColumns">
            <summary>
            Gets or sets whether columns are automatically created when the grid is bound to a data source.
            </summary>
            <remarks>
            By default, assigning a new <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/> to the grid resets the column collection
            to reflect the data source schema. If you set <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoGenerateColumns"/> to false, the 
            existing column layout will be preserved.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.SubtotalPosition">
            <summary>
            Gets or sets whether node rows appear above or below the data.
            </summary>
            <remarks>
            <para>This property determines how the outline tree is drawn, and it also determines
            whether the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method should add subtotal rows (which are node rows) 
            above or below the data being summarized.</para>
            <para>Changing this property clears any existing nodes.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.GridPrinter"/> object that specifies printing parameters for the grid.
            </summary>
            <remarks>
            <para>Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> method to print the grid and specify the document name, 
            common printing options, headers and footers.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.PrintParameters"/> property to specify less common printing options 
            such as header and footer fonts, page margins, and page orientation.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DropMode">
            <summary>
            Gets or sets a value that determines if the control can accept data that the user drags onto it.
            </summary>
            <remarks>
            <para>This property allows you to use the control as a target for OLE drag-drop operations.</para>
            <para>If set to <see cref="F:C1.Win.C1FlexGrid.DropModeEnum.None"/> (the default value), the control does not act as a drop target.</para>
            <para>If set to <see cref="F:C1.Win.C1FlexGrid.DropModeEnum.Manual"/>, the control fires the standard drag-drop events 
            and the programmer is responsible for handling them. The main events involved are <see cref="E:System.Windows.Forms.Control.DragOver"/> and 
            <see cref="E:System.Windows.Forms.Control.DragDrop"/>. These events are provided by the standard System.Windows.Forms.Control object.</para>
            <para>If set to <see cref="F:C1.Win.C1FlexGrid.DropModeEnum.Automatic"/>, the control handles the <see cref="E:System.Windows.Forms.Control.DragOver"/> and
            <see cref="E:System.Windows.Forms.Control.DragDrop"/> events automatically by performing the following actions:</para>
            <para>1) Query the data object for data in text or filename formats.</para>
            <para>2) Scroll if the user drags an object near the edges of the control.</para>
            <para>3) Paste the contents of the data object when the user drops valid data on the control.</para>
            <para>Note: This property replaces and extends the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDrop"/> property provided by the 
            base <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DragMode">
            <summary>
            Gets or sets a value that determines if the user can drag data from the control.
            </summary>
            <remarks>
            <para>This property allows you to use the control as a source for OLE drag-drop operations. If 
            set to any of the automatic settings, the control provides the following services:</para>
            <para>1) Detect when the mouse is near the edge of a selected cell or range and display the 
            OLE drag cursor.</para>
            <para>2) If the user clicks the mouse while the OLE drag cursor is displayed, initiate a 
            drag operation with a data object containing the current selection.</para>
            <para>In manual mode, the programmer is responsible for starting drag-drop operations using 
            the <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDrop">
            <summary>
            This property is inherited from the <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
            <remarks>
            <para>This property is used internally by the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> control.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DropMode"/> property instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew">
            <summary>
            Gets or sets whether the grid should display a new row template after the last data row.
            </summary>
            <remarks>
            <para>If the user enters data into the new row template, a new row is automatically added to the grid.</para>
            <para>This property works in bound mode (if the data source supports adding new rows) and also in 
            unbound mode.</para>
            <para>Note that if this property is set to true, the Rows.Count property will return a value 
            that includes the new row template. If you set the Rows.Count property, the grid will set the 
            number of data rows and will automatically add the new row template. For example:</para>
            <code>
            flex.AllowAddNew = true;
            flex.Rows.Count = 10;
            Console.WriteLine("Row count is {0}.", _flex.Rows.Count);
               Row count is 11.
            </code>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDelete">
            <summary>
            Gets or sets whether the grid should monitor the keyboard and handle the DEL key.
            </summary>
            <remarks>
            <para>If this property is set to true, the user can delete rows by selecting them and then pressing 
            the DEL key.</para>
            <para>This property works in bound mode (if the data source supports deleting rows) and in unbound mode.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Glyphs">
            <summary>
            Gets the collection of control glyphs (images used to show sorting, check boxes, etc).
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Glyphs"/> property returns a <see cref="T:C1.Win.C1FlexGrid.GridGlyphs"/> collection with an indexer 
            of type <see cref="T:C1.Win.C1FlexGrid.GlyphEnum"/>. This collection allows you to get or set the images used to 
            indicate column sorting, collapsed and expanded outline groups, check boxes, cursors, 
            error information, etc.</para>
            <para>Note: Setting a glyph to null restores the default (built-in) image. If you want to make a glyph 
            invisible, set it to a small blank image instead.</para>
            </remarks>
            <example>
            For example, the code below causes the grid to use custom images to display the column sorting order 
            (instead of the built-in hollow triangles):
            <code>
            flex.Glyphs[GlyphEnum.Ascending]  = imgAscending;
            flex.Glyphs[GlyphEnum.Descending] = imgDescending;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoClipboard">
            <summary>
            Gets or sets whether the grid should handle the clipboard keys and automatically 
            perform cut, copy, paste, and delete operations.
            </summary>
            <remarks>
            <para>Setting this property to true causes the grid to monitor the keyboard for the
            following clipboard keys:</para>
            <para>Copy:	CTRL-INS, CTRL-C</para>
            <para>Cut:	CTRL-X, SHIFT-DEL</para>
            <para>Paste:	CTRL-V, SHIFT-INS</para>
            <para>Delete:	DEL</para>
            <para>Cut, paste, and delete actions are performed only if the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> 
            property is set to true.</para>
            <para>If you want to handle only a subset of the supported keys, add a handler to the 
            <see cref="E:System.Windows.Forms.Control.KeyDown"/> event and set the Handled parameter to true to disable some of the keys.</para>
            <para>Automatic clipboard operations only affect the grid data. Styles and images are 
            not copied, pasted, or deleted.</para>
            <para>Values copied to the clipboard are affected by the setting of the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipboardCopyMode"/> 
            property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.CustomComparer">
            <summary>
            Gets or sets a custom comparer object used by the grid to perform grouping, 
            merging, and searching operations.
            </summary>
            <remarks>
            <para>The grid has a default <see cref="T:System.Collections.IComparer"/> implementation that is used to compare 
            cells and determine if their contents are equivalent. This implementation is used when merging, 
            grouping, or searching for values (see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging"/> property and the 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.FindRow(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)"/> methods).</para>
            <para>The default implementation is case-sensitive and takes leading and trailing blanks into account.</para>
            <para>If you want to merge cells using a case-insensitive comparison or trimming blanks, 
            write a custom class that implements the <see cref="T:System.Collections.IComparer"/> interface and assign an 
            instance of it to the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.CustomComparer"/> property.</para>
            <para>Setting this property to null (Nothing in Visual Basic) restores the default behavior.</para>
            </remarks>
            <example>
            The code below replaces the built-in comparer with a <see cref="T:System.Collections.CaseInsensitiveComparer"/>. 
            This causes the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method to group items that differ only in case into the
            same groups:
            <code>
            // use case-insensitive comparer
            flex.CustomComparer = new CaseInsensitiveComparer(); 
            
            // add groups ignoring case
            flex.Subtotal(AggregateEnum.Sum, 0, groupOn, totalOn);
            
            // restore default (case-sensitive) comparer
            flex.CustomComparer = null; 
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditOptions">
            <summary>
            Gets or sets an <see cref="T:C1.Win.C1FlexGrid.EditFlags"/> flags that affect the grid's editing behavior.
            </summary>
            <remarks>
            The default value for this property is <see cref="F:C1.Win.C1FlexGrid.EditFlags.All"/>, which enables
            all editing options. See the <see cref="T:C1.Win.C1FlexGrid.EditFlags"/> enumeration for a list of 
            options available.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.UseCompatibleTextRendering">
            <summary>
            Specifies whether text rendering should be compatible with previous releases of WinForms.
            </summary>
            <remarks>
            
            <para>This property determines whether the control should render text using the <see cref="T:System.Drawing.Graphics"/> 
            class (compatible with previous versions), or the new <see cref="T:System.Windows.Forms.TextRenderer"/> class 
            (available in .NET 2.0 and later).</para>
            <para>The <see cref="T:System.Windows.Forms.TextRenderer"/> class supports complex scripts and Uniscribe APIs, making 
            it better suited for some international applications.</para>
            <para>However, the <see cref="T:System.Windows.Forms.TextRenderer"/> class seems to render about 25% slower than the 
            traditional method.</para>
            <para>You may want to try both modes and select the one that matches the appearance of other 
            controls and forms in your application.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboBoxEditor">
            <summary>
            Gets a <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboBoxEditor"/> object that provides easy access to properties of the currently
            active <b>ComboBox</b> editor.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ComboBoxEditor"/> object can be used to get and set properties on the currently 
            active <b>ComboBox</b> editor without casting the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property.</para>
            <para>If no editor is active, or if the editor is not a <see cref="T:System.Windows.Forms.ComboBox"/>, these properties 
            return null or -1, and cannot be set.</para>
            </remarks>
            <example>
            The code below shows two equivalent ways of accessing the selected index of the currently active <b>ComboBox</b> editor:
            <code>
            // with the ComboBoxEditor property:
            Console.WriteLine("The current combo index is {0}",
                _flex.ComboBoxEditor.SelectedIndex);
            
            // without the ComboBoxEditor property:
            ComboBox cb = _flex.Editor as ComboBox;
            int index = (cb != null) ? cb.SelectedIndex : -1;
            Console.WriteLine("The current combo index is {0}",
                index);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ScrollOptions">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1FlexGrid.ScrollFlags"/> value that specifies the grid scrolling behavior.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ScrollableRectangle">
            <summary>
            Gets a rectangle that defines the scrollable portion of the control.
            </summary>
            <remarks>
            The value returned corresponds to the control's client area minus any fixed 
            and frozen rows and columns.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <remarks>
            This is the color used to paint the background of the scrollable cells, also defined by the
            <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> cell style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ForeColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
            <remarks>
            This is the color used to paint the text in scrollable cells, also defined by the
            <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> cell style.
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidating">
            <summary>
            Fires when a row is losing focus and needs to be validated.
            </summary>
            <remarks>
            <para>This event is analogous to the <see cref="E:System.Windows.Forms.Control.Validating"/> event.</para>
            <para>Use this event to perform validation on all the values of a row.
            If the row does not pass validation, set the <see cref="F:C1.Win.C1FlexGrid.RowColEventArgs.Cancel"/> property to true.</para>
            <para>Canceling this event prevents the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidated"/> event from occurring, 
            and also prevents the user from leaving the invalid row.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.RowValidated">
            <summary>
            Fires after a row lost focus and has been validated.
            </summary>
            <remarks>
            <para>This event is analogous to the <see cref="E:System.Windows.Forms.Control.Validated"/> event.</para>
            <para>Use this event to perform post-processing on a row of values.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.SortColumn">
            <summary>
            Gets a reference to the column that defines the current sort applied to the grid.
            </summary>
            <remarks>
            <para>The grid may be sorted by a call to the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method, by a user clicking
            a column header, or as a result of sorting applied directly to the object that is being
            used as the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.DataSource"/>.</para>
            <para>To determine the current sort direction, use the sorted column's <see cref="P:C1.Win.C1FlexGrid.Column.Sort"/>
            property.</para>
            <para>If the grid is not currently sorted, this property returns null.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowThemedHeaders">
            <summary>
            Gets or sets whether the control should use Xp themes for displaying row or column headers.
            </summary>
            <remarks>
            <para>This property only has an effect if the application is themed. To enable themes for
            an application, you can either call the <b>Application.EnableVisualStyles</b> method or use 
            a manifest file. Please refer to MSDN for details.</para>
            <para>Setting the <see cref="T:System.Windows.Forms.BorderStyle"/> property to <b>BorderStyleEnum.XpThemes</b> 
            automatically sets this property to <b>ShowThemedHeadersEnum.Both.</b></para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScrollTip">
            <summary>
            This event is obsolete. Use the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.VisualStyle">
            <summary>
            Gets or sets a value that determines the overall appearance of the control.
            </summary>
            <remarks>
            <para>This property allows you to quickly customize the appearance of the grid so
            it matches the appearance of your application.</para>
            <para>The settings available include <b>System</b>, various Microsoft Office color 
            schemes, and <b>Custom</b>, which relies on the control's standard styles and 
            appearance properties.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Renderer">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> used to customize the look and
            feel of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.NewRowWatermark">
            <summary>
            Gets or sets a string that is displayed over the new row template
            when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> property is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipboardCopyMode">
            <summary>
            Gets or sets what parts of the grid are copied to the clipboard when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoClipboard"/>
            property is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFiltering">
            <summary>
            Gets or sets whether the user is allowed to filter the data.
            </summary>
            <remarks>
            <para>When this property is set to true, the grid displays filter icons
            on the column headers. Users may click the icons to define filters to be
            applied to the data.</para>
            <para>When a filter is applied, the grid hides rows that don't match the
            filter by setting their <see cref="P:C1.Win.C1FlexGrid.RowCol.Visible"/> property to false. The
            filter is not applied to the data source.</para>
            <para>You may specify the type of filter to use for each individual column
            by setting the columns <see cref="P:C1.Win.C1FlexGrid.Column.AllowFiltering"/> property.</para>
            <para>You may also create custom filters by creating classes the implement
            the <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilter"/> interface and assigning instances of that
            class to the column's <see cref="P:C1.Win.C1FlexGrid.Column.Filter"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.IgnoreDiacritics">
            <summary>
            Gets or sets a value that determines whether the filter should ignore diacritics
            (accents) when comparing values.
            </summary>
            <remarks>
            <para>By default, the filter compares values as they appear in the data source. 
            For example, if you are looking for values that contain the string "fac", you 
            will find "factory" but not "façade".</para>
            <para>If you set this property to true, the filter will remove any diacritics
            before performing the comparisons. In this case, looking for the string "fac"
            will return both "factory" and "façade".</para>
            <para>This property is especially useful in applications localized for languages
            that contain many accents, such as French, Spanish, Portuguese, etc.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.FilterDefinition">
            <summary>
            Gets or sets an XML string containing the current filter state.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.Language">
            <summary>
            Gets or sets the language to use when localizing the column filters.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.DesignerActive">
            <summary>
            This property is intended for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridBase.ShowHiddenColumns">
            <summary>
            This property is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.#ctor(System.String)">
            <summary>
            This constructor supports the infrastructure and is not intended to be used directly.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetMergedRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the merged range of cells that includes a given cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="clip">Whether the range should be clipped to the visible area of the grid.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that contains the given cell.</returns>
            <remarks>
            <para>Cell merging is controlled by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging"/> property.
            The <see cref="M:C1.Win.C1FlexGrid.C1FlexGrid.GetMergedRange(System.Int32,System.Int32,System.Boolean)"/> method allows you to determine whether a cell is 
            merged with adjacent cells.</para>
            <para>You can override the <see cref="M:C1.Win.C1FlexGrid.C1FlexGrid.GetMergedRange(System.Int32,System.Int32,System.Boolean)"/> method to implement custom merging
            logic. If you do this, make sure the merging method is consistent and efficient, since
            it gets called frequently and affects the grid's appearance and behavior.</para>
            </remarks>
            <example>
            The code below checks the current cell after a selection to see if it is part
            of a merged range:
            <code>
            private void _flex_SelChange(object sender, System.EventArgs e)
            {
              CellRange rg = this._flex.GetMergedRange(_flex.Row, _flex.Col, false);
              if (!rg.IsSingleCell)
              {
                Console.WriteLine("selection is merged: {0},{1}-{2},{3}",
                rg.TopRow, rg.LeftCol, rg.BottomRow, rg.RightCol);
              }
            }
            </code>
            The code below shows how you can override the <see cref="M:C1.Win.C1FlexGrid.C1FlexGrid.GetMergedRange(System.Int32,System.Int32,System.Boolean)"/> method
            to provide custom merging:
            <code>
            public class CustomMerge : C1FlexGrid
            {
              public CustomMerge()
              {
                // allow free merging by default
                AllowMerging = AllowMergingEnum.Free;
                for (int r = 0; r &lt; Rows.Count; r++) Rows[r].AllowMerging = true;
                for (int c = 0; c &lt; Cols.Count; c++) Cols[c].AllowMerging = true;
              }
              override public CellRange GetMergedRange(int row, int col, bool clip)
              {
                // merge cells in range (1,1)-(3,3)
                if (row &gt;= 1 &amp;&amp; row &lt;= 3 &amp;&amp; col &gt;= 1 &amp;&amp; col &lt;= 3)
                  return GetCellRange(1, 1, 3, 3);
                  
                // don't merge anything else
                return GetCellRange(row, col);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetMergedRange(System.Int32,System.Int32)">
            <summary>
            Returns the merged range of cells that includes a given cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>A <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object that contains the given cell.</returns>
            <remarks>
            This method returns the entire range, including invisible cells.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.Clear">
            <summary>
            Overridden to clear merged ranges.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetHeaderThemeState(System.Int32,System.Int32)">
            <summary>
            Gets the state for a Windows XP theme while the mouse moves over a cell.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the hot-tracking behavior. 
            </remarks>
            <param name="row">Row under the mouse.</param>
            <param name="col">Column under the mouse.</param>
            <returns>An integer representing the item state (2 for hot-tracking, 1 for normal).</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetCellGlyphs(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Image@,System.Drawing.Image@,System.Drawing.Image@)">
            <summary>
            Gets a cell glyph to show in a cell.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the display of the sorting glyphs. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="rc">Cell rectangle</param>
            <param name="glyphSort">Glyph to display above the cell content.</param>
            <param name="glyphLeft">Glyphs to display on the left of the cell.</param>
            <param name="glyphRight">Glyphs to display on the right of the cell.</param>
            <returns>True if any glyphs were assigned to the cell, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.SetDataEdit(System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
            Applies a value to a cell or cell range.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way data
            coming from cell editors is applied to the cells. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="data">Data to be applied to the cell.</param>
            <param name="coerce">Whether the data should be coerced into the cell's data type.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.SetCellCheckEdit(System.Int32,System.Int32,C1.Win.C1FlexGrid.CheckEnum)">
            <summary>
            Applies a <see cref="T:C1.Win.C1FlexGrid.CheckEnum"/> value to a cell or cell range.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way checkbox 
            data is applied to the cells. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="check">Value to apply to the cell.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.Invalidate(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Invalidates a cell range, causing it to be repainted.
            </summary>
            <param name="rg">Range to be invalidated.</param>
            <remarks>
            This method is rarely used by the programmer, since the grid automatically 
            performs invalidation as needed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetCellRectDisplay(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a rectangle representing the coordinates of a cell, row, or column.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way cell geometry
            is calculated.
            </remarks>
            <param name="row">Row index (or -1 to get column bounds).</param>
            <param name="col">Column index (or -1 to get row bounds).</param>
            <param name="clipHorz">Whether the rectangle should be horizontally clipped to the grid's client area.</param>
            <param name="clipVert">Whether the rectangle should be vertically clipped to the grid's client area.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> containing the display area for the row, column, or cell, in client
            coordinates and accounting for scroll position.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.GetCellRectEditor(System.Int32,System.Int32)">
            <summary>
            Gets a rectangle representing the coordinates of a cell editor.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the way cell geometry
            is calculated. 
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>Rectangle used to position the cell editor.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.StartEditing(System.Int32,System.Int32,System.Char,System.Boolean)">
            <summary>
            Starts editing a cell in response to a key press.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the editing process.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="key">Key that initiated the edit process.</param>
            <param name="force">Whether editing should start even in non-editable cells (e.g. fixed cells).</param>
            <returns>True if the editing process was started successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.StartEditing(System.Int32,System.Int32,System.Drawing.Point,System.Boolean)">
            <summary>
            Starts editing a cell in response to a mouse action.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the editing process.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="ptMouse">Mouse position in client coordinates.</param>
            <param name="dblClick">Whether the action was a double-click.</param>
            <returns>True if the editing process was started successfully, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.IsCellCursor(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell contains the grid cursor.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell contains the cursor, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.IsCellHighlighted(System.Int32,System.Int32)">
            <summary>
            Gets a value that determines if a cell is part of the selection and should be highlighted.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>True if the cell should be highlighted, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.CheckNodeChildren(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a value that indicates what types of child nodes a row has.
            </summary>
            <remarks>
            This method is for internal use. It allows inherited classes to customize outline trees.
            </remarks>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="level">Outline level.</param>
            <returns>Zero if the row has no children, 1 if it has regular data rows only, 
            2 if it has child nodes, and 3 if it has data and child nodes.
            </returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.DrawRow(System.Windows.Forms.PaintEventArgs,System.Int32)">
            <summary>
            Draws a grid row.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains a <see cref="T:System.Drawing.Graphics"/>
            object where the row will be drawn.</param>
            <param name="row">Index of the row to draw.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.DrawCell(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Draws a grid cell.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains a <see cref="T:System.Drawing.Graphics"/>
            object where the cell will be drawn.</param>
            <param name="row">Index of the cell's row.</param>
            <param name="col">Index of the cell's column.</param>
            <returns>The index of the last column painted (may be greater than <paramref name="col"/> 
            if columns are merged).</returns>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.DrawCellImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws a grid cell.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the cell will be drawn.</param>
            <param name="row">Index of the cell's row.</param>
            <param name="col">Index of the cell's column.</param>
            <param name="rcBounds"><see cref="T:System.Drawing.Rectangle"/> that defines the cell position.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.MoveSelection(C1.Win.C1FlexGrid.MoveCursorEnum,System.Boolean)">
            <summary>
            Moves or extends the current selection.
            </summary>
            <param name="move"><see cref="T:C1.Win.C1FlexGrid.MoveCursorEnum"/> value that specifies the type of cursor movement.</param>
            <param name="extend">Whether to extend the current selection.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.AutoSizeCols(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Automatically size grid columns to fit the largest entry.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the cell contents.</param>
            <param name="row1">Index of the first row to be measured.</param>
            <param name="col1">Index of the first column to be measured.</param>
            <param name="row2">Index of the last row to be measured.</param>
            <param name="col2">Index of the first column to be measured.</param>
            <param name="extra">Extra space, in twips, to add to the largest entry.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AutoSizeFlags"/> value that specifies auto sizing behavior.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.AutoSizeRows(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)">
            <summary>
            Automatically size grid columns to fit the largest entry.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the cell contents.</param>
            <param name="row1">Index of the first row to be measured.</param>
            <param name="col1">Index of the first column to be measured.</param>
            <param name="row2">Index of the last row to be measured.</param>
            <param name="col2">Index of the first column to be measured.</param>
            <param name="extra">Extra space, in twips, to add to the largest entry.</param>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.AutoSizeFlags"/> value that specifies auto-sizing behavior.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid appearance. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.OnGridChanged(System.Object,C1.Win.C1FlexGrid.GridChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/> event.
            </summary>
            <param name="sender">Object raising the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1FlexGrid.GridChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGrid.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Called when the grid contents scroll.
            </summary>
            <param name="sb"><see cref="T:System.Windows.Forms.ScrollBars"/> value that specifies the scroll direction.</param>
            <remarks>
            This method is for internal use. It allows inherited classes to customize the grid scrolling behavior. 
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging">
            <summary>
            Gets or sets how cells should be merged.
            </summary>
            <remarks>
            <para>Merging cells allows you to display data in a clear, appealing way,
            because it highlights groups of identical information. It also gives you 
            flexibility to build tables similar to the ones you can create in HTML or 
            using Microsoft Word, both of which support merged cells.</para>
            <para>To create tables with merged cells, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging"/> 
            property to a value other than <see cref="F:C1.Win.C1FlexGrid.AllowMergingEnum.None"/>, and 
            set the <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowMerging"/> property of individual rows and 
            columns true for the rows and columns you wish to merge. After these 
            properties are set, the grid will  automatically merge adjacent cells 
            that have the same contents.</para>
            <para>Whenever the cell contents change, the grid updates the merging state.</para>
            </remarks>
            <example>
            The code below causes the grid to merge cells with the same data in column 1:
            <code>
            flex.AllowMerging = AllowMergingEnum.Free;
            flex.Cols[1].AllowMerging = true; // merge values in column 1
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMergingFixed">
            <summary>
            Gets or sets how non-scrollable cells should be merged.
            </summary>
            <remarks>
            <para>By default, this property is set to <see cref="F:C1.Win.C1FlexGrid.AllowMergingEnum.Default"/>, which 
            causes fixed cells to be merged with the same setting as scrollable cells.</para>
            <para>If you specify a different value for this property, you can use different merging
            modes for fixed cells such as column headers than the setting used for scrollable cells.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGrid.MergedRanges">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.CellRangeCollection"/> that determines which grid
            cells are merged when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGrid.AllowMerging"/> property is set to
            <see cref="F:C1.Win.C1FlexGrid.AllowMergingEnum.Custom"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1FlexGrid.MergedRangeDictionary">
            <summary>
            This is a specialized dictionary that does _very_ efficient range
            lookups based on Point keys (much faster than a Hashtable or SortedList).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowResizingEnum">
            <summary>
            Specifies whether the user should be able to resize rows and columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.None">
            <summary>
            The user may not resize rows or columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.Columns">
            <summary>
            The user may resize columns with the mouse by dragging the edge of the column headers.
            Double-clicking the edge of a column header automatically sizes the column to fit the widest entry.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.Rows">
            <summary>
            The user may resize rows with the mouse by dragging the edge of the row headers.
            Double-clicking the edge of a row header automatically sizes the row to fit the tallest entry.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.Both">
            <summary>
            The user may resize rows and columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.ColumnsUniform">
            <summary>
            The user may change the default column width with the mouse.
            Resizing any column will resize all columns that don't have a specific width assigned to them.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.RowsUniform">
            <summary>
            The user may change the default row height with the mouse.
            Resizing any row will resize all rows that don't have a specific height assigned to them.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowResizingEnum.BothUniform">
            <summary>
            The user may change the default column width or row height with the mouse.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowFreezingEnum">
            <summary>
            Specifies whether the user should be able to freeze rows and columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFreezingEnum.None">
            <summary>
            The user may not freeze rows or columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFreezingEnum.Columns">
            <summary>
            The user may freeze columns by dragging the frozen region vertical boundary with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFreezingEnum.Rows">
            <summary>
            The user may freeze rows by dragging the frozen region horizontal boundary with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFreezingEnum.Both">
            <summary>
            The user may freeze rows and columns by dragging the frozen region boundaries with the mouse.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowDraggingEnum">
            <summary>
            Specifies whether the user should be able to drag rows and columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowDraggingEnum.None">
            <summary>
            The user may not drag rows or columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowDraggingEnum.Columns">
            <summary>
            The user may drag columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowDraggingEnum.Rows">
            <summary>
            The user may drag rows with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowDraggingEnum.Both">
            <summary>
            The user may drag rows and columns with the mouse.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowSortingEnum">
            <summary>
            Specifies whether the user should be able to sort columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowSortingEnum.None">
            <summary>
            The user may not sort columns with the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn">
            <summary>
            The user may sort single columns by clicking on its header cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowSortingEnum.MultiColumn">
            <summary>
            The user may sort a range of columns by clicking on the header cell 
            of the rightmost column in the range.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.HighLightEnum">
            <summary>
            Specifies whether the grid should highlight the selected range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HighLightEnum.Never">
            <summary>
            Never highlight the selected range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HighLightEnum.Always">
            <summary>
            Always highlight the selected range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HighLightEnum.WithFocus">
            <summary>
            Highlight the selected range when the control has focus.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.FocusRectEnum">
            <summary>
            Specifies the appearance of the focus rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.None">
            <summary>
            No focus rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.Light">
            <summary>
            Show a light focus rectangle (dotted, 1-pixel wide). This is the default setting.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.Heavy">
            <summary>
            Show a heavy focus rectangle (dotted, 2-pixel wide).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.Solid">
            <summary>
            Show a solid focus rectangle. The color of the rectangle is determined by the 
            <b>BackColor</b> property of the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Highlight"/> style.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.Raised">
            <summary>
            Show a raised focus rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FocusRectEnum.Inset">
            <summary>
            Show an inset focus rectangle.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AutoSizeFlags">
            <summary>
            Specifies options that control auto-sizing.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSizeFlags.None">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSizeFlags.SameSize">
            <summary>
            All rows (or columns) in the range are set to the same size.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSizeFlags.IgnoreHidden">
            <summary>
            Ignore invisible rows (or columns) when auto-sizing.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSizeFlags.IgnoreMerged">
            <summary>
            Ignore merged cells when auto-sizing.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DrawModeEnum">
            <summary>
            Specifies whether cells should be drawn entirely by the grid or with 
            help from custom drawing code.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawModeEnum.Normal">
            <summary>
            Grid cells are drawn by the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawModeEnum.OwnerDraw">
            <summary>
            The grid fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event to allow custom
            cell drawing.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DrawCellFlags">
            <summary>
            Specifies which elements of the cell should be drawn by the grid.
            </summary>
            <remarks>
            <para>This enumeration is used when rendering owner-drawn cells.</para>
            <para>If you set the <see cref="T:System.Windows.Forms.DrawMode"/> property to <see cref="F:C1.Win.C1FlexGrid.DrawModeEnum.OwnerDraw"/>, 
            the grid will fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event to allow custom cell drawing.</para>
            <para>The <see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> parameter passed to the event handler has a 
            <see cref="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.DrawCell(C1.Win.C1FlexGrid.DrawCellFlags)"/> method that allows you to use the standard 
            drawing routines for rendering parts of the cell. For example, you can paint a custom background 
            and use the standard drawing routines for the cell borders and content.</para>
            <para>See the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event for an example.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawCellFlags.Background">
            <summary>
            Draw the cell background.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawCellFlags.Border">
            <summary>
            Draw the cell border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawCellFlags.Content">
            <summary>
            Draw the cell content (text, images, check boxes, etc).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DrawCellFlags.All">
            <summary>
            Draw all cell elements (background, border, and contents).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ShowButtonsEnum">
            <summary>
            Specifies when the grid should display combo buttons in cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowButtonsEnum.WhenEditing">
            <summary>
            Show buttons only while editing the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowButtonsEnum.WithFocus">
            <summary>
            Show buttons when the cell has the focus. This is the default setting.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowButtonsEnum.Always">
            <summary>
            Always show buttons.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.EditFlags">
            <summary>
            Specifies options that customize the grid's editing behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.None">
            <summary>
            No special behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.AutoSearch">
            <summary>
            Search for entries in lists as the user types.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.CycleOnDoubleClick">
            <summary>
            Cycle to the next item on the list when the user double-clicks a cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.MultiCheck">
            <summary>
            Check and uncheck all check boxes in a selection simultaneously.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.UseNumericEditor">
            <summary>
            Use built-in numeric editor when editing numeric types.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.DelayedCommit">
            <summary>
            Commit changes to data source only when changing rows or moving focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.ExitOnLeftRightKeys">
            <summary>
            Exit editor if user presses the right arrow key at the end of the content 
            or the left arrow key at the start of the content.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.EditOnRequest">
            <summary>
            Enter edit mode only in response to mouse or keyboard events. Setting this
            flag to false causes the grid to enter edit mode when the control gets the
            focus or when the user moves the cursor.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.EditFlags.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ShowThemedHeadersEnum">
            <summary>
            Specifies whether the control should use themes for displaying row or column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowThemedHeadersEnum.Auto">
            <summary>
            Use themed headers when the <see cref="T:System.Windows.Forms.BorderStyle"/> property is set to <b>XpThemes</b>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowThemedHeadersEnum.None">
            <summary>
            Do not use themed headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowThemedHeadersEnum.Rows">
            <summary>
            Use themed headers for row headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowThemedHeadersEnum.Columns">
            <summary>
            Use themed headers for column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowThemedHeadersEnum.Both">
            <summary>
            Use themed headers for row and column headers.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ScrollFlags">
            <summary>
            Specifies options that customize scrollbar behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ScrollFlags.None">
            <summary>
            Use the default scrolling behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ScrollFlags.AlwaysVisible">
            <summary>
            Keep scrollbars visible even when they are disabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ScrollFlags.ScrollByRowColumn">
            <summary>
            Scroll by rows and columns (instead of by pixel).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ScrollFlags.DelayedScroll">
            <summary>
            Do not scroll the control contents until the user releases the scrollbar thumb.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ScrollFlags.ShowScrollTips">
            <summary>
            Fire the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event and display a tooltip next to 
            the vertical scrollbar while scrolling vertically.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ClipboardCopyModeEnum">
            <summary>
            Specifies what parts of the grid should be copied to the clipboard when the
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoClipboard"/> property is set to true.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClipboardCopyModeEnum.DataOnly">
            <summary>
            Only the selected data is copied.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClipboardCopyModeEnum.DataAndColumnHeaders">
            <summary>
            Copy the selected data and include the column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClipboardCopyModeEnum.DataAndRowHeaders">
            <summary>
            Copy the selected data and include the row headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClipboardCopyModeEnum.DataAndAllHeaders">
            <summary>
            Copy the selected data and include row and column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClipboardCopyModeEnum.Disabled">
            <summary>
            Do not copy any data to the clipboard.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ShowSortPositionEnum">
            <summary>
            Specifies the position of the sort glyphs within the column header cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowSortPositionEnum.None">
            <summary>
            Do not show sort glyphs.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowSortPositionEnum.Right">
            <summary>
            Show sort glyphs on the right of the column header cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowSortPositionEnum.Top">
            <summary>
            Show sort glyphs on the top of the column header cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ShowSortPositionEnum.Auto">
            <summary>
            Show sort glyphs on the top of the column header cells if filtering 
            is enabled, and on the right otherwise.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SortFlags">
            <summary>
            Specifies how grid columns should be sorted.
            </summary>
            <remarks>
            This enumeration contains flags that can be combined to customize the sorting process.
            </remarks>
            <example>
            For example, the code below sorts two grid columns ignoring case.
            <code>
            // C#
            SortFlags order = SortFlags.Ascending | SortFlags.IgnoreCase;
            _flex.Sort(order, col1, col2);
            
            ' VB
            Dim order As SortFlags = SortFlags.Ascending Or SortFlags.IgnoreCase
            _flex.Sort(order, col1, col2)
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.None">
            <summary>
            Do not sort. This setting is useful for skipping certain columns when sorting column ranges.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.Ascending">
            <summary>
            Sort in ascending order.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.Descending">
            <summary>
            Sort in descending order.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.AsDisplayed">
            <summary>
            Sort using the string representation of the data. In this mode, "100" appears before "2".
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.IgnoreCase">
            <summary>
            Ignore case when sorting strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortFlags.UseColSort">
            <summary>
            Use the flags stored in the <see cref="P:C1.Win.C1FlexGrid.Column.Sort"/> property of individual <see cref="T:C1.Win.C1FlexGrid.Column"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ClearFlags">
            <summary>
            Specifies which elements of the grid should be cleared by the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Clear(C1.Win.C1FlexGrid.ClearFlags,C1.Win.C1FlexGrid.CellRange)"/> method.
            </summary>
            <remarks>
            This enumeration contains flags that can be combined to customize the sorting process.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClearFlags.Content">
            <summary>
            Clear cell content, including data, images, and check boxes if any.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClearFlags.Style">
            <summary>
            Clear custom styles assigned to cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClearFlags.UserData">
            <summary>
            Clear user data associated with cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ClearFlags.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CheckEnum">
            <summary>
            Specifies the type of checkbox to draw in a cell.
            </summary>
            <remarks>
            <para>There are two types of check boxes: regular and tri-state.</para>
            <para>Regular check boxes are used to display simple Boolean values.
            They cycle through settings <c>Checked</c> and <c>Unchecked</c> when clicked with the mouse.</para>
            <para>Tri-state check boxes are used to display values that may be true, false, or 
            indeterminate (grayed). They cycle through settings <c>TSChecked</c>, <c>TSGrayed</c>, and 
            <c>TSUnchecked</c> when clicked with the mouse.</para>
            <para>Visually, <c>Checked</c> and <c>Unchecked</c> look the same as <c>TSChecked</c> and <c>TSUnchecked</c>.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.None">
            <summary>
            No check box.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.Checked">
            <summary>
            Check box with a check mark in it.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.Unchecked">
            <summary>
            Empty check box.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.Grayed">
            <summary>
            Check box in undefined state.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.TSChecked">
            <summary>
            Tri-state check box with a check mark in it.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.TSUnchecked">
            <summary>
            Tri-state empty check box.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CheckEnum.TSGrayed">
            <summary>
            Tri-state check box in undefined state.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AggregateEnum">
            <summary>
            Specifies the type of aggregate function to calculate with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.AggregateFlags)"/> and 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.None">
            <summary>
            No aggregate. This setting is used with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method to create an 
            outline tree without any numerical aggregates.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Clear">
            <summary>
            Clear existing aggregates. This setting is used with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method 
            to clear any existing subtotals, usually before calculating new subtotals.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Sum">
            <summary>
            Returns the sum of all values in the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Percent">
            <summary>
            Percent of grand total. This setting is used with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method to 
            calculate the percentage of the grand total represented by each sub group. (This setting can't 
            be used with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.AggregateFlags)"/> method).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Count">
            <summary>
            Returns the count of non-empty cells in a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Average">
            <summary>
            Returns the average value of the non-empty cells in a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Max">
            <summary>
            Returns the maximum value in a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Min">
            <summary>
            Returns the minimum value in a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Std">
            <summary>
            Returns the sample standard deviation of the values in a range (uses the formula based on n-1).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.Var">
            <summary>
            Returns the sample variance of the values in a range (uses the formula based on n-1).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.StdPop">
            <summary>
            Returns the population standard deviation of the values in a range (uses the formula based on n).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateEnum.VarPop">
            <summary>
            Returns the population variance of the values in a range (uses the formula based on n).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AggregateFlags">
            <summary>
            Specifies options to use when calculating aggregates with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Aggregate(C1.Win.C1FlexGrid.AggregateEnum,C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.AggregateFlags)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.None">
            <summary>
            Default setting. Include all rows and use numerical values only.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.ExcludeNodes">
            <summary>
            Exclude node rows from aggregate. This option is useful when the grid contains subtotal rows, 
            which are marked as nodes and contain values that are subtotals and should thus be excluded 
            from aggregates.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.AggregateDates">
            <summary>
            Calculate aggregates for dates instead of numerical values. Only a few aggregate functions 
            are meaningful for dates: count, maximum, and minimum.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.AggregateBooleans">
            <summary>
            Calculate aggregates for Boolean values. This flag causes the value True to be interpreted as one,
            and False as zero. This option is useful for counting the number of checked check boxes in a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.ExcludeHiddenCells">
            <summary>
            Exclude hidden rows and columns from the aggregate.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.ExcludeCollapsedCells">
            <summary>
            Exclude collapsed rows from the aggregate.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AggregateFlags.ExcludeHiddenRows">
            <summary>
            Exclude hidden rows from the aggregate.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SubtotalPositionEnum">
            <summary>
            Specifies whether subtotals rows created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method should be
            inserted above or below the data they refer to.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalPositionEnum.AboveData">
            <summary>
            Subtotal rows are inserted above the data (tree-style).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalPositionEnum.BelowData">
            <summary>
            Subtotal rows are inserted below the data (spreadsheet-style).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridChangedTypeEnum">
            <summary>
            Specifies the type of change that occurred when the controls fires the 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.GridChanged">
            <summary>
            The number of grid rows or columns has changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.LayoutChanged">
            <summary>
            The number of fixed grid rows or columns has changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.StyleChanged">
            <summary>
            A style definition has changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.StyleApplied">
            <summary>
            A style has been applied to a range.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RepaintGrid">
            <summary>
            The grid has been invalidated and will be repainted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.CellChanged">
            <summary>
            The value in a cell has changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RepaintRange">
            <summary>
            A range has been invalidated and will be repainted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.Update">
            <summary>
            The grid will be repainted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.BeforeCollapse">
            <summary>
            A tree node is about to be collapsed or expanded.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.AfterCollapse">
            <summary>
            A tree node has just been collapsed or expanded.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.EnsureVisible">
            <summary>
            A tree node will be scrolled into view.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.Select">
            <summary>
            A tree node will be selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RowMoved">
            <summary>
            A row has been moved into a new position.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RowAdded">
            <summary>
            A row has been added to the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RowRemoved">
            <summary>
            A row has been removed from the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.RowSelected">
            <summary>
            A row has been selected or de-selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.ColMoved">
            <summary>
            A column has been moved into a new position.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.ColAdded">
            <summary>
            A column has been added to the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.ColRemoved">
            <summary>
            A column has been removed from the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.ColSelected">
            <summary>
            A column has been selected or de-selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.BeforeSelChange">
            <summary>
            The selection is about to change.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedTypeEnum.AfterSelChange">
            <summary>
            The selection has just changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridChanged"/> event handler.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedEventArgs.GridChangedType">
            <summary>
            The type of action that caused the event to fire.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedEventArgs.r1">
            <summary>
            Range of cells affected by the event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedEventArgs.c1">
            <summary>
            Range of cells affected by the event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedEventArgs.r2">
            <summary>
            Range of cells affected by the event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridChangedEventArgs.c2">
            <summary>
            Range of cells affected by the event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridModel">
            <summary>
            GridModel
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridAccessibleObject">
            <summary>
            Exposes the grid as a hierarchical structure of Accessible objects.
            
            There are three types of accessible objects here: 
            1) Grid: contains rows and columns
            2) Rows: contain cells
            3) Cells: don't contain anything
            
            To use, override the grid's CreateAccessibilityInstance() and return
            an instance of this class.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowAccessibleObject">
            <summary>
            Implements accessibility for a Row object
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellAccessibleObject">
            <summary>
            Implements accessibility for a Cell
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridAddNewHandler">
            <summary>
            Summary description for GriAddNewHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellRange">
            <summary>
            Represents cell ranges, allowing the caller to set properties for multiple cells
            with a single statement.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1FlexGrid.CellRange"/> structure does not have a public constructor. To create a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> 
            object, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRange(System.Int32,System.Int32)"/> method.</para>
            <para>Note that <see cref="T:C1.Win.C1FlexGrid.CellRange"/> is a structure, not a class. This means the object is used as a value, 
            not as a reference. If you pass a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> to a method and change the object within that method, 
            the original value is not modified.</para>
            <para>Ranges are defined by two rows and two columns (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.r2"/>, and
            <see cref="F:C1.Win.C1FlexGrid.CellRange.c2"/>). These values do not have to be in order (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/> may be smaller or greater than 
            <see cref="F:C1.Win.C1FlexGrid.CellRange.r2"/>). To obtain the values in order, use the <see cref="M:C1.Win.C1FlexGrid.CellRange.Normalize"/> method or the <see cref="P:C1.Win.C1FlexGrid.CellRange.TopRow"/>,
            <see cref="P:C1.Win.C1FlexGrid.CellRange.BottomRow"/>, <see cref="P:C1.Win.C1FlexGrid.CellRange.LeftCol"/>, and <see cref="P:C1.Win.C1FlexGrid.CellRange.RightCol"/> properties.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellRange.r1">
            <summary>
            Gets or sets the range's first row index.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellRange.c1">
            <summary>
            Gets or sets the range's first column index.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellRange.r2">
            <summary>
            Gets or sets the range's last row index.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellRange.c2">
            <summary>
            Gets or sets the range's last column index.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.ContainsRow(System.Int32)">
            <summary>
            Determines whether the range contains a given row.
            </summary>
            <param name="row">Index of the row to check.</param>
            <returns>True if the range contains the row, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.ContainsCol(System.Int32)">
            <summary>
            Determines whether the range contains a given column.
            </summary>
            <param name="col">Index of the column to check.</param>
            <returns>True if the range contains the column, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a given cell.
            </summary>
            <param name="row">Index of the row to check.</param>
            <param name="col">Index of the column to check.</param>
            <returns>True if the range contains the cell, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.Normalize">
            <summary>
            Normalizes the range so that <see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/> is the <see cref="P:C1.Win.C1FlexGrid.CellRange.TopRow"/>, 
            <see cref="F:C1.Win.C1FlexGrid.CellRange.r2"/> is the <see cref="P:C1.Win.C1FlexGrid.CellRange.BottomRow"/>, 
            <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/> is the <see cref="P:C1.Win.C1FlexGrid.CellRange.LeftCol"/>, 
            and <see cref="F:C1.Win.C1FlexGrid.CellRange.c2"/> is the <see cref="P:C1.Win.C1FlexGrid.CellRange.RightCol"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.Clear(C1.Win.C1FlexGrid.ClearFlags)">
            <summary>
            Clears selected elements from the range.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value that specifies which elements 
            should be cleared.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRange.ToString">
            <summary>
            Gets a string representation for this object.
            </summary>
            <returns>A string representation for this object.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.IsSingleCell">
            <summary>
            Gets a value that indicates if the range contains a single cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.IsValid">
            <summary>
            Gets a value that indicates if the range contains valid row and column indices.
            </summary>
            <remarks>
            This property returns true if the range coordinates are valid. The range is valid
            if both r1 and r2 are between 0 <b>Rows.Count-1</b>, both c1 and c2 are between 0 and 
            <b>Cols.Count-1</b>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.TopRow">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.BottomRow">
            <summary>
            Gets the index of the bottom row in the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.LeftCol">
            <summary>
            Gets the index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.RightCol">
            <summary>
            Gets the index of the right column in the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.Data">
            <summary>
            Gets or sets the data stored in the range.
            </summary>
            <remarks>
            When getting, this property returns the value in the first cell of
            the range (r1, c1). When setting, it stores the given value in every 
            cell within the range.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.DataDisplay">
            <summary>
            Gets the value in cell (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>), formatted as a string.
            </summary>
            <remarks>
            This property is similar to the <see cref="P:C1.Win.C1FlexGrid.CellRange.Clip"/> property, except <b>Clip</b>
            returns a tab-delimited string containing data in the entire range, and <b>DataDisplay</b>
            returns the contents of the first cell only (r1, c1).
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.Style">
            <summary>
            Gets or sets the style used to display every cell in the range.
            </summary>
            <remarks>
            Getting or setting the range style ensures that every cell in the range has 
            the same style. If the range does not contain any cells with custom styles,
            this property returns null.
            </remarks>
            <example>
            The code below creates a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> structure and uses it to 
            apply a custom style to the entire range.
            <code>
            // create a style
            CellStyle cs = _flex.Styles.Add("red");
            cs.BackColor = Color.Red;
            
            // create a cell range and assign it a style
            CellRange rg = _flex.GetCellRange(1, 1, 5, 5);
            rg.Style = cs;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.StyleNew">
            <summary>
            Gets or sets the style used to display every cell in the range, creating a new style if necessary.
            </summary>
            <remarks>
            This property never returns null. If the range does not have a style assigned to it, a new style
            will be created automatically.
            </remarks>
            <example>
            The code below creates a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> structure and uses it to apply a custom style to 
            the entire range.
            <code>
            // create a cell range
            CellRange rg = _flex.GetCellRange(1, 1, 5, 5);
            
            // make sure range is red
            rg.StyleNew.BackColor = Color.Red;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.StyleDisplay">
            <summary>
            Gets the style used to render cell (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>).
            </summary>
            <remarks>
            This property never returns null. It will return the custom style assigned to the
            first cell in the range, to the cell's row, column, or a built-in style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.Checkbox">
            <summary>
            Gets or sets the state of the checkbox in the range.
            </summary>
            <remarks>
            When getting, this property returns the checkbox value that corresponds to cell 
            (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>). When setting, it applies the new value to all
            cells in the range.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.Image">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1FlexGrid.CellRange.Image"/> assigned to cells in the range.
            </summary>
            <remarks>
            When getting, this property returns the <see cref="P:C1.Win.C1FlexGrid.CellRange.Image"/> assigned to cell 
            (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>). When setting, it applies the new value to all
            cells in the range.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.UserData">
            <summary>
            Gets or sets arbitrary used data assigned to cells in the range.
            </summary>
            <remarks>
            When getting, this property returns the user data assigned to cell 
            (<see cref="F:C1.Win.C1FlexGrid.CellRange.r1"/>, <see cref="F:C1.Win.C1FlexGrid.CellRange.c1"/>). When setting, it applies the new value to all
            cells in the range.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRange.Clip">
            <summary>
            Gets or sets a string containing the values of all cells in the range.
            </summary>
            <remarks>
            <para>The cell values are delimited by characters specified by the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators"/> 
            property.</para>
            <para>By default, columns are separated by tabs (\t or vbTab) and rows by line breaks (\n or vbCr).</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellRangeCollection">
            <summary>
            Collection of <see cref="T:C1.Win.C1FlexGrid.CellRange"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.#ctor(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.CellRangeCollection"/>.
            </summary>
            <param name="flexGrid">Grid that owns the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Add(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object to the collection.
            </summary>
            <param name="value">Object to add to the collection.</param>
            <returns>The index of the object in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Add(C1.Win.C1FlexGrid.CellRange,System.Boolean)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object to the collection, optionally
            removing other overlapping ranges from the collection.
            </summary>
            <param name="value">Object to add to the collection.</param>
            <param name="clearOverlappingRanges">Whether to remove overlapping 
            ranges from the collection before adding the new range.</param>
            <returns>The index of the object in the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Contains(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Determines whether a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object is a member of the collection.
            </summary>
            <param name="item">Object to locate in the collection.</param>
            <returns>True if the object is a member of the collection, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.IndexOf(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Gets the index of a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object in the collection.
            </summary>
            <param name="item">Object to locate in the collection.</param>
            <returns>The index of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of the first <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object in the collection that contains the specified row and column.
            </summary>
            <param name="row">Index of the row contained in the range.</param>
            <param name="col">Index of the column contained in the range.</param>
            <returns>The index of the object in the collection, or -1 if no range could be found containing the specified row and column.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Insert(System.Int32,C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object in the collection at a specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.Remove(C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Removes a <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object from the collection.
            </summary>
            <param name="obj">Object to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removed the object at a specified index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object at a specified index.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Win.C1FlexGrid.CellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ConditionFilter">
            <summary>
            Represents a filter based on one or two logical conditions.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilter.Clone">
            <summary>
            Creates a clone of this <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter;
            False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ConditionFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Control"/> that is used to modify the filter at run time.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ConditionFilter.Condition1">
            <summary>
            Gets the first filter condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ConditionFilter.Condition2">
            <summary>
            Gets the second filter condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ConditionFilter.AndConditions">
            <summary>
            Gets or sets whether the filter conditions should be combined
            with an 'And' or with an 'Or' operator.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ConditionFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ConditionOperator">
            <summary>
            Represents operators used in filter conditions.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.None">
            <summary>
            Disables the operator.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.Equals">
            <summary>
            Return true if the value equals the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.NotEquals">
            <summary>
            Return true if the value does not equal the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.GreaterThan">
            <summary>
            Return true if the value is greater than the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.LessThan">
            <summary>
            Return true if the value is less than the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.GreaterThanOrEqualTo">
            <summary>
            Return true if the value is greater than or equal to the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.LessThanOrEqualTo">
            <summary>
            Return true if the value is less than or equal to the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.Contains">
            <summary>
            Return true if the string representation of the value contains the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.DoesNotContain">
            <summary>
            Return true if the string representation of the value does not contain the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.BeginsWith">
            <summary>
            Return true if the string representation of the value begins with the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ConditionOperator.EndsWith">
            <summary>
            Return true if the string representation of the value ends with the operator parameter.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Condition">
            <summary>
            Represents a condition within a <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.
            </summary>
            <remarks>
            Each <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/> contains up to two conditions that
            can be combined with 'And' or 'Or' operators.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Condition.Clear">
            <summary>
            Clears this condition by setting the <see cref="P:C1.Win.C1FlexGrid.Condition.Operator"/> to 'None' 
            and the <see cref="P:C1.Win.C1FlexGrid.Condition.Parameter"/> to null.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Condition.Apply(System.Object)">
            <summary>
            Applies the condition to a given value.
            </summary>
            <param name="value">Value to test.</param>
            <returns>True if the value satisfies the condition, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Condition.IsActive">
            <summary>
            Gets a value that indicates whether the condition is active.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Condition.Operator">
            <summary>
            Gets or sets the operator used by this condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Condition.Parameter">
            <summary>
            Gets or sets the parameter used by this condition.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridDataSource">
            <summary>
            Summary description for GridDataSource.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DropModeEnum">
            <summary>
            Specifies the behavior of the control as an OLE drag-drop target.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DropModeEnum.None">
            <summary>
            The control can't be used as a drop target.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DropModeEnum.Manual">
            <summary>
            The control fires drag-drop events that can be handled to provide drop target functionality.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DropModeEnum.Automatic">
            <summary>
            The control automatically handles dropping of text or filename data.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DragModeEnum">
            <summary>
            Specifies the behavior of the control as an OLE drag-drop source.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragModeEnum.Manual">
            <summary>
            The control does not provide any drag support. The caller can still initiate drag-drop operations
            using the <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragModeEnum.Automatic">
            <summary>
            The control provides automatic dragging of data. If the mouse hovers near the edges of the selected range, 
            the cursor will change and allow the user to move or copy data (pressing the CTRL key to copy).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragModeEnum.AutomaticCopy">
            <summary>
            Same as Automatic, except the data is always copied (never moved).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragModeEnum.AutomaticMove">
            <summary>
            Same as Automatic, except the data is always moved (never copied).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridDropHandler">
            <summary>
            Summary description for GridDropHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridDragHandler">
            <summary>
            Summary description for GridDragHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.BeforeMouseDownEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeMouseDown"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.X">
            <summary>
            Gets the x-coordinate of a mouse click.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.Y">
            <summary>
            Gets the y-coordinate of a mouse click.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the BeforeMouseDownEventArgs class.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> with mouse event information.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.BeforeMouseDownEventArgs.#ctor(C1.Win.C1FlexGrid.C1FlexGridBase,System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
            Initializes a new instance of the BeforeMouseDownEventArgs class.
            </summary>
            <param name="view">Control that will fire the event.</param>
            <param name="buttons"><see cref="T:System.Windows.Forms.MouseButtons"/> value that indicates which button was pressed.</param>
            <param name="clicks">Number of times the button was pressed and released.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DragRowColEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragColumn"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragRow"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragColumn"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragRow"/> events.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.DragRowColEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DragRowColEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragColumn"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeDragRow"/>,
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragColumn"/>, and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterDragRow"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragRowColEventArgs.Row">
            <summary>
            Gets the original index of the row that was dragged by the user.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragRowColEventArgs.Col">
            <summary>
            Gets the original index of the column that was dragged by the user.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragRowColEventArgs.Position">
            <summary>
            Gets the new index of the column or row that was dragged by the user.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DragRowColEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the drag operation should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.DragRowColEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DragRowColEventArgs class.
            </summary>
            <param name="row">The original index of the row that was dragged by the user.</param>
            <param name="col">The original index of the column that was dragged by the user.</param>
            <param name="position">The new index of the column or row.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SortColEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSort"/> and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSort"/> events.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.SortColEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SortColEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSort"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSort"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortColEventArgs.Col">
            <summary>
            Gets the column that is being sorted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortColEventArgs.Order">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that determines the sorting order.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortColEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the drag operation should be canceled.
            </summary>
            <remarks>
            Setting this parameter to true cancels the built-in sort operation and leaves the sorting glyph unchanged.
            </remarks>		
        </member>
        <member name="F:C1.Win.C1FlexGrid.SortColEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the drag operation has been handled by the event handler.
            </summary>
            <remarks>
            Setting this parameter to true cancels the built-in sort but updates the sorting glyph as if the 
            sort had been performed. This is useful when the event handler performs custom sorting.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.SortColEventArgs.#ctor(System.Int32,C1.Win.C1FlexGrid.SortFlags)">
            <summary>
            Initializes a new instance of the SortColEventArgs class.
            </summary>
            <param name="col">The column that is being sorted.</param>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that determines the sorting order.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowColEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterEdit"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforePageBreak"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeRow"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboCloseUp"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboDropDown"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetupEditor"/>, and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> events. 
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.RowColEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowColEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterEdit"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeEdit"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforePageBreak"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeRow"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboCloseUp"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ComboDropDown"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetupEditor"/>, and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.StartEdit"/> events. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RowColEventArgs.Row">
            <summary>
            Gets the index of the row that caused the event.
            </summary>
            <remarks>
            This value may be set to -1 if the event was caused by a column.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RowColEventArgs.Col">
            <summary>
            Gets the index of the column that caused the event.
            </summary>
            <remarks>
            This value may be set to -1 if the event was caused by a row.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RowColEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RowColEventArgs class.
            </summary>
            <param name="row">Index of the row that caused the event.</param>
            <param name="col">Index of the column that caused the event.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterRowColChange"/>,
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterScroll"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSelChange"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScroll"/>, and
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> events. 
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.RangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RangeEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterRowColChange"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterScroll"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSelChange"/>, <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeRowColChange"/>, 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeScroll"/>, and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSelChange"/> events. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RangeEventArgs.OldRange">
            <summary>
            Gets the range selected before the event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RangeEventArgs.NewRange">
            <summary>
            Gets the range that will be selected after the event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.RangeEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the new selection should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RangeEventArgs.#ctor(C1.Win.C1FlexGrid.CellRange,C1.Win.C1FlexGrid.CellRange)">
            <summary>
            Initializes a new instance of the RangeEventArgs class.
            </summary>
            <param name="rgOld">The range selected before the event.</param>
            <param name="rgNew">The range that will be selected after the event.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowColToolTipEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.ToolTipEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ToolTipEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ShowScrollTip"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ToolTipEventArgs.ToolTipText">
            <summary>
            Gets or sets the text to be displayed in the tooltip.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ToolTipEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the ToolTipEventArgs class.
            </summary>
            <param name="row">Index of the row that caused the event.</param>
            <param name="col">Index of the column that caused the event.</param>
            <param name="toolTipText">Text to display in the ToolTip</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.KeyEditEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyDownEdit"/> and
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyUpEdit"/> events. 
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.KeyEditEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyDownEdit"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyUpEdit"/> events. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Row">
            <summary>
            Gets the row index of the cell being edited when the key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Col">
            <summary>
            Gets the column index of the cell being edited when the key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.KeyValue">
            <summary>
            Gets the integer representation of the <see cref="F:C1.Win.C1FlexGrid.KeyEditEventArgs.KeyData"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.KeyCode">
            <summary>
            Gets the key code for the event, which will be one of the <see cref="T:System.Windows.Forms.Keys"/> values.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.KeyData">
            <summary>
            Gets the key code for the key that was pressed, combined with modifier flags that indicate which 
            combination of CTRL, SHIFT, and ALT keys were pressed at the same time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Modifiers">
            <summary>
            Gets the modifier flags, as defined in Keys. This indicates which combination of modifier keys 
            (CTRL, SHIFT, and ALT) were pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Alt">
            <summary>
            Gets a value indicating whether the ALT key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Control">
            <summary>
            Gets a value indicating whether the CTRL key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Shift">
            <summary>
            Gets a value indicating whether the SHIFT key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyEditEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled and should be ignored by the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.KeyEditEventArgs.#ctor(System.Int32,System.Int32,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Initializes a new instance of the KeyEditEventArgs class.
            </summary>
            <param name="row">The row index of the cell being edited when the key was pressed.</param>
            <param name="col">The column index of the cell being edited when the key was pressed.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> object containing the keyboard data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.KeyPressEditEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyPressEdit"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.KeyPressEditEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.KeyPressEdit"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyPressEditEventArgs.Row">
            <summary>
            Gets the row index of the cell being edited when the key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyPressEditEventArgs.Col">
            <summary>
            Gets the column index of the cell being edited when the key was pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyPressEditEventArgs.KeyChar">
            <summary>
            Gets the character corresponding to the key pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyPressEditEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled and should be ignored by the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.KeyPressEditEventArgs.#ctor(System.Int32,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the KeyPressEditEventArgs class.
            </summary>
            <param name="row">The row index of the cell being edited when the key was pressed.</param>
            <param name="col">The column index of the cell being edited when the key was pressed.</param>
            <param name="key">The character corresponding to the key pressed.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ValidateEditEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ValidateEditEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.ValidateEdit"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ValidateEditEventArgs.Row">
            <summary>
            Gets the row index of the cell being edited.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ValidateEditEventArgs.Col">
            <summary>
            Gets the column index of the cell being edited.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ValidateEditEventArgs.Checkbox">
            <summary>
            If the cell contains a checkbox, the new checkbox state about to be applied to the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ValidateEditEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the edit operation should be canceled.
            </summary>
            <remarks>
            If this parameter is set to true, the edits are considered invalid. The editor will remain open
            and the current cell selected until the user provides a valid entry or cancels the edit operation
            by pressing the ESC key.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ValidateEditEventArgs.#ctor(System.Int32,System.Int32,C1.Win.C1FlexGrid.CheckEnum)">
            <summary>
            Initializes a new instance of the ValidateEditEventArgs class.
            </summary>
            <param name="row">The row index of the cell being edited.</param>
            <param name="col">The column index of the cell being edited.</param>
            <param name="check">The new checkbox state about to be applied to the cell, if any.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Row">
            <summary>
            Gets the row index of the cell where the error was detected.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Col">
            <summary>
            Gets the column index of the cell where the error was detected.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Exception">
            <summary>
            Gets the <see cref="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Exception"/> object that contains information about the error.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the error situation has been handled by the control.
            </summary>
            <remarks>
            If this value is set to False, the grid will throw the exception.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridErrorEventArgs.#ctor(System.Int32,System.Int32,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the GridErrorEventArgs class.
            </summary>
            <param name="row">The row index of the cell where the error was detected.</param>
            <param name="col">The column index of the cell where the error was detected.</param>
            <param name="exception">The <see cref="F:C1.Win.C1FlexGrid.GridErrorEventArgs.Exception"/> object that contains information about the error.</param>
            <param name="handled">Whether the error was handled internally and no exception should be thrown.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GetErrorInfoEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellErrorInfo"/> and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetRowErrorInfo"/> events.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GetErrorInfoEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellErrorInfo"/> and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetRowErrorInfo"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetErrorInfoEventArgs.Row">
            <summary>
            Gets the index of the row that may contain errors.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetErrorInfoEventArgs.Col">
            <summary>
            Gets the index of the column that may contain errors (or -1 if checking for row errors).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetErrorInfoEventArgs.ErrorText">
            <summary>
            Gets or sets a message that describes the error.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GetErrorInfoEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1FlexGrid.GetErrorInfoEventArgs"/> class.
            </summary>
            <param name="row">The row index when error information is needed for a cell or row.</param>
            <param name="col">The column index when error information is needed for a cell or row.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.OwnerDrawCellEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Graphics">
            <summary>
            Gets the <see cref="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Graphics"/> object used to draw the cell.  Use this object to draw custom elements in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Row">
            <summary>
            Get the row index of the cell being painted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Col">
            <summary>
            Get the column index of the cell being painted.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Bounds">
            <summary>
            Get the rectangle where the cell will be painted (in client coordinates).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Measuring">
            <summary>
            Gets a value that determines if the event was fired only to measure the cell.
            </summary>
            <remarks>
            This occurs while auto-sizing rows and columns, since the event handler may change the 
            value displayed in the cell while handling this event.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Handled">
            <summary>
            Gets or sets whether the event has finished drawing the cell.
            </summary>
            <remarks>
            <para>If this parameter is set to true, the grid assumes the call has been painted by the event handler. If it
            is set to false, the grid will paint the cell when the event returns.</para>
            <para>Note that calling the <see cref="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.DrawCell"/> method automatically sets this parameter to true.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.#ctor(C1.Win.C1FlexGrid.C1FlexGridBase,System.Drawing.Graphics,System.Int32,System.Int32,C1.Win.C1FlexGrid.CellStyle,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the OwnerDrawCellEventArgs class.
            </summary>
            <param name="view">The <see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> control that contains the cell being painted.</param>
            <param name="g">The <see cref="F:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Graphics"/> object where the cell will be painted.</param>
            <param name="row">The row index of the cell being painted.</param>
            <param name="col">The column index of the cell being painted.</param>
            <param name="s">The <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> that will be used to paint the cell.</param>
            <param name="rc">The bounds of the cell being painted.</param>
            <param name="text">The text that will be displayed in the cell.</param>
            <param name="img">The image that will be displayed in the cell.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.DrawCell(C1.Win.C1FlexGrid.DrawCellFlags)">
            <summary>
            Causes the grid to paint parts of the cell (background, foreground, border, etc.)
            </summary>
            <param name="flags"><see cref="T:C1.Win.C1FlexGrid.DrawCellFlags"/> that specifies the parts of the cell.</param>
            <remarks>
            <para>This method is typically called in <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> handlers when the code
            intends to draw some elements of the cell but not everything.</para>
            <para>For example, the code may want to draw a custom border only. In this case, it could call
            <b>e.DrawCell(DrawCellFlags.Background | DrawCellFlags.Content)</b> to draw the cell background and content, 
            and later draw the custom border. 
            Or the code could want to draw a custom marker in a cell (like a note indicator in Excel). In this case, it 
            should call <b>e.DrawCell()</b> to draw the entire cell, and later add the note marker (little red triangle 
            on the top right corner of the cell).</para>
            <para>If the owner-draw code draws the entire cell (including the background), then there's no need to call 
            <b>e.DrawCell</b> at all.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.DrawCell">
            <summary>
            Causes the grid to paint the whole cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Text">
            <summary>
            Gets or sets the text that will be displayed in the cell.
            </summary>
            <remarks>
            Changing this value is an easy way to modify the text displayed in a cell without any custom drawing code.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Image">
            <summary>
            Gets or sets the image that will be displayed in the cell.
            </summary>
            <remarks>
            Changing this value is an easy way to modify the image displayed in a cell without any custom drawing code.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs.Style">
            <summary>
            Sets or sets the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object used to paint the cell.
            </summary>
            <remarks>
            <para>This parameter is often used to provide dynamic formatting based on cell contents. For example,
            if the cell contains a value outside a given range, the event handler may assign a new style to
            this parameter.</para>
            <para>Although it is legal to modify the members of the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> parameter in this
            event, this is not recommended, since the change will affect other cells that may be using this style.</para>
            </remarks>
            <example>
            The code below uses the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.OwnerDrawCell"/> event to highlight cells that 
            indicate low stock levels.
            <code>
            // create style used to display low-stock items
            CellStyle cs = _flex.Styles.Add("Critical");
            cs.BackColor = Color.Red;
            
            private void _flex_OwnerDrawCell(object sender, C1.Win.C1FlexGrid.OwnerDrawCellEventArgs e)
            {
                // ignore fixed cells
                if (e.Row &lt; _flex.Rows.Fixed || e.Col &lt; _flex.Cols.Fixed)
                    return;
                    
                // apply custom style if reorder level is critical
                if (_flex.Cols[e.Col].Name == "UnitsInStock")
                {
                    // change the style by applying the "Critical" style to the Style parameter
                    // (do not change the e.Style.BackColor property directly since that would
                    // affect other cells that use this style)
                    if ((short)_flex[e.Row, "UnitsInStock"] &lt; (short)_flex[e.Row, "ReorderLevel"])
                        e.Style = _flex.Styles["Critical"];
                }
            }
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1FlexGrid.UnboundValueEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue"/> and
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetUnboundValue"/> events.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> object that raised the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.UnboundValueEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.UnboundValueEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue"/> and 
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.SetUnboundValue"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.UnboundValueEventArgs.Row">
            <summary>
            Gets the row index for the cell that has an unbound value.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.UnboundValueEventArgs.Col">
            <summary>
            Gets the column index for the cell that has an unbound value.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.UnboundValueEventArgs.Value">
            <summary>
            Gets or sets the unbound value that should be displayed in the cell.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.UnboundValueEventArgs.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the UnboundValueEventArgs class.
            </summary>
            <param name="row">Row index for the cell that has an unbound value.</param>
            <param name="col">Column index for the cell that has an unbound value.</param>
            <param name="value">Unbound value that should be displayed in the cell.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SubtotalEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSubtotal"/> and
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSubtotal"/> events.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> object that raised the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.SubtotalEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SubtotalEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeSubtotal"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterSubtotal"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Function">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate..
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Level">
            <summary>
            Outline level to assign to the new subtotal rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.GroupFrom">
            <summary>
            Gets the index of the first column in the range used to detect group breaks.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.GroupTo">
            <summary>
            Gets the index of the last column in the range used to detect group breaks.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.TotalOn">
            <summary>
            Gets the index of the column that contains values being aggregated.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Caption">
            <summary>
            Gets or sets the text to insert in the new subtotal row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.NewRowIndex">
            <summary>
            Gets the index of the new subtotal row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.IsNewRow">
            <summary>
            Gets a value that determines whether the subtotal row is a new row or the 
            subtotal is being added to an existing subtotal row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Top">
            <summary>
            Gets the index of the top row in the group.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Bottom">
            <summary>
            Gets the index of the bottom row in the group.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.AggregateValue">
            <summary>
            Gets or sets the calculated aggregate value for the group.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Style">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> to be applied to the new subotal row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SubtotalEventArgs.Cancel">
            <summary>
            Whether to cancel the creation of the new subtotal row.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.SubtotalEventArgs.#ctor(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Object,C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.SubtotalEventArgs"/> object.
            </summary>
            <param name="function"><see cref="T:C1.Win.C1FlexGrid.AggregateEnum"/> value that specifies the type of aggregate to calculate.</param>
            <param name="level">Outline level to assign to the new subtotal rows. This parameter allows the creation of multi-level subtotals and affects the display of the outline tree.</param>
            <param name="groupFrom">First column in the range used to detect group breaks.</param>
            <param name="groupTo">Last column in the range used to detect group breaks.</param>
            <param name="totalOn">Column that contains values being aggregated.</param>
            <param name="caption">Text to insert in the new subtotal row.</param>
            <param name="newRowIndex">Index of the new subtotal row.</param>
            <param name="isNewRow">Whether the subtotal row is a new row or the subtotal is being added to an existing subtotal row.</param>
            <param name="top">Index of the top row in the group.</param>
            <param name="bottom">Index of the bottom row in the group.</param>
            <param name="aggregateValue">Calculated aggregate value for the group.</param>
            <param name="style"><see cref="T:C1.Win.C1FlexGrid.CellStyle"/> to be applied to the new subotal row.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GetLocalizedStringEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetLocalizedString"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> object that raised the event.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetLocalizedString"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs.Value">
            <summary>
            Gets or sets the value of the localized string.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs.ComponentName">
            <summary>
            Gets the name of the component being localized.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs.Parent">
            <summary>
            Parent of the component being localized.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs.Component">
            <summary>
            Component being localized.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs.#ctor(System.String,System.String,System.Windows.Forms.Control,System.ComponentModel.Component)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GetLocalizedStringEventArgs"/>.
            </summary>
            <param name="value">Value to be localized.</param>
            <param name="componentName">Name of the component being localized.</param>
            <param name="parent">Parent of the component being localized.</param>
            <param name="component">Component being localized.</param>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AllowFiltering">
            <summary>
            Specifies the type of filter to be used for a <see cref="T:C1.Win.C1FlexGrid.Column"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFiltering.Default">
            <summary>
            Filter column using a <see cref="T:C1.Win.C1FlexGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFiltering.ByValue">
            <summary>
            Filter column by values using a <see cref="T:C1.Win.C1FlexGrid.ValueFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFiltering.ByCondition">
            <summary>
            Filter column by conditions using a <see cref="T:C1.Win.C1FlexGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFiltering.Custom">
            <summary>
            Filter column using a filter specified by the caller.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AllowFiltering.None">
            <summary>
            Do not provide a filter for this column.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridFilterHandler">
            <summary>
            GridFilterHandler
            Handles cell/range selection for the FlexGridBase class
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GlyphEnum">
            <summary>
            Specifies a type of glyph (image) used by the grid to convey information about a row, column, or cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Ascending">
            <summary>
            Indicates column sorted in ascending order (default is hollow triangle pointing up).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Descending">
            <summary>
            Indicates column sorted in descending order (default is hollow triangle pointing down).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Checked">
            <summary>
            Checkbox in checked state.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Unchecked">
            <summary>
            Checkbox in unchecked state.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Grayed">
            <summary>
            Checkbox in gray (undefined) state.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Collapsed">
            <summary>
            Collapsed tree node (default is plus sign).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.Expanded">
            <summary>
            Expanded tree node (default is minus sign).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.DBCursor">
            <summary>
            Indicates current record (default is black triangle pointing right).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.DBAdd">
            <summary>
            Indicates row being added to data source (default is asterisk).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.ErrorInfo">
            <summary>
            Indicates row or cell error (default is red exclamation sign).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.FilterEditor">
            <summary>
            Indicates that a column has a drop-down filter editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.GlyphEnum.FilteredColumn">
            <summary>
            Indicates that a column has a filter currently active.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridGlyphs">
            <summary>
            Represents a collection of glyphs (images) indexed by glyph type (<see cref="T:C1.Win.C1FlexGrid.GlyphEnum"/> type).
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1FlexGrid.GridGlyphs"/> collection contains the images used by the grid to indicate column 
            sorting direction, collapsed and expanded outline groups, check boxes, cursors, error information, etc.</para>
            <para>You can use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Glyphs"/> property get or set these images.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridGlyphs.Item(C1.Win.C1FlexGrid.GlyphEnum)">
            <summary>
            Gets or sets the glyph for a particular <see cref="T:C1.Win.C1FlexGrid.GlyphEnum"/> value.
            </summary>
            <remarks>
            Setting a glyph to null causes the grid to use the default image for the glyph. To suppress
            a glyph, assign it a small transparent image.</remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.AutoSearchEnum">
            <summary>
            Specifies where the grid should start searching for cells when using the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSearchEnum.None">
            <summary>
            No auto-searching.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSearchEnum.FromTop">
            <summary>
            Search from the first scrollable row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.AutoSearchEnum.FromCursor">
            <summary>
            Search from the current row.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.KeyActionEnum">
            <summary>
            Specifies the action to perform when the ENTER and TAB keys are pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyActionEnum.None">
            <summary>
            No special action (allow system to handle the key). For example, the TAB key is normally 
            used to cycle through the controls on a form.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyActionEnum.MoveDown">
            <summary>
            Move to the next row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyActionEnum.MoveAcross">
            <summary>
            Move to the next column. At the end of the row, wrap to the start of the next row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.KeyActionEnum.MoveAcrossOut">
            <summary>
            <para>Same as <b>MoveAcross</b>, but move the focus to the next control in the tab order when 
            the last cell in the grid is reached.</para>
            <para>This setting applies only to the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.KeyActionTab"/> property;
            when used with  <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.KeyActionEnter"/> it behaves like <b>MoveAcross</b>.</para>
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridKbdHandler">
            <summary>
            GridKbdHandler
            Mouse-handling logic for the FlexGridBase class
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.HitTestTypeEnum">
            <summary>
            Type of grid element at a specific point on the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.None">
            <summary>
            The point is in the grid's empty area.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.Cell">
            <summary>
            The point is on a grid cell. (The cell coordinates are stored in the <see cref="F:C1.Win.C1FlexGrid.HitTestInfo.Row"/> 
            and <see cref="F:C1.Win.C1FlexGrid.HitTestInfo.Column"/> properties).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.ColumnHeader">
            <summary>
            The point is on a fixed row, over a column.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.ColumnResize">
            <summary>
            The point is near the right edge of a fixed cell, in the column resizing area.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.ColumnFreeze">
            <summary>
            The point is near the right edge of the last frozen column, in the column freezing area.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.RowHeader">
            <summary>
            The point is on a fixed column, next to a row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.RowResize">
            <summary>
            The point is near the bottom edge of a fixed cell, in the row resizing area.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.RowFreeze">
            <summary>
            The point is near the bottom edge of the last frozen row, in the row freezing area.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.Checkbox">
            <summary>
            The point is on a check box.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.EditButton">
            <summary>
            The point is on an edit button (drop down, popup editors).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.OutlineBar">
            <summary>
            The point is on the outline bar (visible when the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree"/> property 
            has a <see cref="P:C1.Win.C1FlexGrid.GridTree.Style"/> that contains the <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.ButtonBar"/> flag).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.OutlineTree">
            <summary>
            The point is on the collapse/expand button on an outline tree (visible when the grid's 
            <see cref="P:C1.Win.C1FlexGrid.GridTree.Style"/> property contains the <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols"/> flag).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestTypeEnum.FilterIcon">
            <summary>
            The point is on the filter icon on a column header cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridMouseHandler">
            <summary>
            -------------------------------------------------------------------
            GridMouseHandler
            Mouse-handling logic for the FlexGridBase class
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Marquee">
            <summary>
            Marquee is a simple class for drawing/tracking resizing marquees
            while the user drags the mouse around.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.HitTestInfo">
            <summary>
            Contains information, such as the row and column indexes, about a specific coordinate pair 
            in the <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> control.
            </summary>
            <remarks>
            Use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.HitTest(System.Int32,System.Int32)"/> method to obtain a <see cref="T:C1.Win.C1FlexGrid.HitTestInfo"/> value.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestInfo.Row">
            <summary>
            Get the index of the row at the point being tested (if the point does not correspond to a cell, it returns -1).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestInfo.Column">
            <summary>
            Get the index of the column at the point being tested (if the point does not correspond to a cell, it returns -1).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestInfo.Point">
            <summary>
            The point on the control surface, in pixels.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.HitTestInfo.Type">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.HitTestTypeEnum"/> that describes the type of element described by a <see cref="T:C1.Win.C1FlexGrid.HitTestInfo"/>.
            </summary>
            <remarks>
            This property allows you to determine whether the point corresponds to a grid cell or
            to special elements such as row and column headers, resizing areas, and so on.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.HitTestInfo.X">
            <summary>
            The X coordinate of a point on the control surface, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.HitTestInfo.Y">
            <summary>
            The Y coordinate of a point on the control surface, in pixels.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.NodeTypeEnum">
            <summary>
            Specifies a node with respect to another given node.
            </summary>
            <remarks>
            This enumeration is used with the <see cref="M:C1.Win.C1FlexGrid.Node.GetNode(C1.Win.C1FlexGrid.NodeTypeEnum)"/> method.
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.Root">
            <summary>
            The node's top-level parent.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.Parent">
            <summary>
            The node's immediate parent.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.FirstChild">
            <summary>
            The node's first child.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.LastChild">
            <summary>
            The node's last child.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.FirstSibling">
            <summary>
            The node's first sibling (node with same level and same parent).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.LastSibling">
            <summary>
            The node's last sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.NextSibling">
            <summary>
            The node's next sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.PreviousSibling">
            <summary>
            The node's previous sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.FirstVisibleSibling">
            <summary>
            The node's first visible sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.LastVisibleSibling">
            <summary>
            The node's last visible sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.NextVisibleSibling">
            <summary>
            The node's next visible sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.PreviousVisibleSibling">
            <summary>
            The node's previous visible sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeTypeEnum.FirstVisibleChild">
            <summary>
            The node's first visible child.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.NodeMoveEnum">
            <summary>
            Specifies the destination of nodes when they are moved with the <see cref="M:C1.Win.C1FlexGrid.Node.Move(C1.Win.C1FlexGrid.NodeMoveEnum,C1.Win.C1FlexGrid.Node)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.In">
            <summary>
            Move the node one level in, deeper into the outline.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.Out">
            <summary>
            Move the node one level out, towards the root.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.Up">
            <summary>
            Move the node to the position before its previous sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.Down">
            <summary>
            Move the node to the position after its next sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.First">
            <summary>
            Move the node to the position before its first sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.Last">
            <summary>
            Move the node to the position after its last sibling.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.NodeMoveEnum.ChildOf">
            <summary>
            Make the node a child of the specified node.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Node">
            <summary>
            The <see cref="T:C1.Win.C1FlexGrid.Node"/> class encapsulates properties and methods used for manipulating node rows
            (collapsing, expanding, moving, and sorting them).
            </summary>
            <remarks>
            You can create node rows using the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method or by setting the
            <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property to true.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.GetCellRange">
            <summary>
            Returns a CellRange object containing this row and all its child rows.
            </summary>
            <returns>A CellRange object containing this row and all its child rows.</returns>
            <remarks>
            The <see cref="T:C1.Win.C1FlexGrid.CellRange"/> object returned includes all columns.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.GetNode(C1.Win.C1FlexGrid.NodeTypeEnum)">
            <summary>
            Returns a reference to a node located at a given position relative to this node.
            </summary>
            <param name="position">A value from the <see cref="T:C1.Win.C1FlexGrid.NodeTypeEnum"/> enumeration that specifies
            the position relative to this node.</param>
            <returns>A node object.</returns>
            <remarks>
            If the node requested does not exist, <see cref="M:C1.Win.C1FlexGrid.Node.GetNode(C1.Win.C1FlexGrid.NodeTypeEnum)"/> returns null (for example,
            the root node does not have a previous sibling).
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.AddNode(C1.Win.C1FlexGrid.NodeTypeEnum,System.Object,System.Object,System.Drawing.Image)">
            <summary>
            Creates a node row at a specified position relative to this node.
            </summary>
            <param name="position">A value from the <see cref="T:C1.Win.C1FlexGrid.NodeTypeEnum"/> enumeration that specifies 
            where the new node will be added with respect to this node (e.g. Child, Sibling).</param>
            <param name="data">Value of the <see cref="P:C1.Win.C1FlexGrid.Node.Data"/> property for the new node.</param>
            <param name="key">Value of the <see cref="P:C1.Win.C1FlexGrid.Node.Key"/> property for the new node.</param>
            <param name="img">Value of the <see cref="P:C1.Win.C1FlexGrid.Node.Image"/> property for the new node.</param>
            <returns>A reference to the new <see cref="T:C1.Win.C1FlexGrid.Node"/> added to the grid.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.AddNode(C1.Win.C1FlexGrid.NodeTypeEnum,System.Object)">
            <summary>
            Creates a node row at a specified position relative to this node.
            </summary>
            <param name="position">A value from the <see cref="T:C1.Win.C1FlexGrid.NodeTypeEnum"/> enumeration that specifies 
            where the new node will be added with respect to this node (e.g. Child, Sibling).</param>
            <param name="data">Value of the <see cref="P:C1.Win.C1FlexGrid.Node.Data"/> property for the new node.</param>
            <returns>A reference to the new <see cref="T:C1.Win.C1FlexGrid.Node"/> added to the grid.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.RemoveNode">
            <summary>
            Removes this node row and all its child rows (nodes and data) from the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Move(C1.Win.C1FlexGrid.NodeMoveEnum,C1.Win.C1FlexGrid.Node)">
            <summary>
            Moves a node to a new position.
            </summary>
            <param name="moveTo">A value from the <see cref="T:C1.Win.C1FlexGrid.NodeMoveEnum"/> enumeration that specifies
             where the node will be moved with respect to its current position.</param>
            <param name="targetNode"><see cref="T:C1.Win.C1FlexGrid.Node"/> object to use as a target when the <paramref name="moveTo"/>
            parameter is set to <see cref="F:C1.Win.C1FlexGrid.NodeMoveEnum.ChildOf"/>.</param>
            <returns>Returns true if the method was successful, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Move(C1.Win.C1FlexGrid.NodeMoveEnum)">
            <summary>
            Moves a node to a new position.
            </summary>
            <param name="moveTo">A value from the <see cref="T:C1.Win.C1FlexGrid.NodeMoveEnum"/> enumeration that specifies where
            the node will be moved with respect to its current position.</param>
            <returns>Returns true if the method was successful, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.EnsureVisible">
            <summary>
            Ensures that this node is visible, expanding its parent nodes and scrolling it into view if necessary.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Select">
            <summary>
            Selects the node.
            </summary>
            <remarks>
            This method sets the control's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Row"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)">
            <summary>
            Sorts this node's child nodes in the specified order.
            </summary>
            <param name="order">One or more values from the <see cref="T:C1.Win.C1FlexGrid.SortFlags"/> enumeration that specify 
            the type of sorting to be applied (e.g. ascending, descending, case-sensitive, etc).</param>
            <param name="col1">Start of a range of columns to sort.</param>
            <param name="col2">End of a range of columns to sort.</param>
            <remarks>
            <para>The grid recognizes two types of row: regular rows which contain data, and node rows which are used
            to group data. This method only sorts the row nodes; it does not reorder the data rows within each node.</para>
            <para>To sort the data rows, use the grid's <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method instead.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Sort(C1.Win.C1FlexGrid.SortFlags)">
            <summary>
            Sorts this node's child nodes in the specified order.
            </summary>
            <param name="order">One or more values from the <see cref="T:C1.Win.C1FlexGrid.SortFlags"/> enumeration that specify
            the type of sorting to be applied (e.g. ascending, descending, case-sensitive, etc).</param>
            <remarks>
            <para>The grid recognizes two types of row: regular rows which contain data, and node rows which are used
            to group data. This method only sorts the row nodes; it does not reorder the data rows within each node.</para>
            <para>To sort the data rows, use the grid's <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method instead.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Node.Sort(System.Collections.IComparer)">
            <summary>
            Sorts this node's child nodes using a given <see cref="T:System.Collections.IComparer"/> object to determine the node order.
            </summary>
            <param name="comparer">An object that implements the <see cref="T:System.Collections.IComparer"/> interface used
            to compare <see cref="P:C1.Win.C1FlexGrid.Node.Row"/> objects. This can be used to provide custom sorting.</param>
            <remarks>
            <para>The grid recognizes two types of row: regular rows which contain data, and node rows which are used
            to group data. This method only sorts the row nodes; it does not reorder the data rows within each node.</para>
            <para>To sort the data rows, use the grid's <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Level">
            <summary>
            Gets or sets the outline level for this node.
            </summary>
            <remarks>
            Higher levels mean deeper nesting. Set the level to zero to create root nodes, 
            or set the level to negative values to create nodes that do not appear on the outline tree.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Collapsed">
            <summary>
            Gets or sets whether this node is collapsed.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Expanded">
            <summary>
            Gets or sets whether this node is expanded.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Children">
            <summary>
            Gets the number of child nodes under this node.
            </summary>
            <remarks>
            Only immediate children are included in the count. Grand-children are not included.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Image">
            <summary>
            Gets or sets the image on this node row at the column that contains the outline tree.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Key">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1FlexGrid.RowCol.UserData"/> associated with this node row.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Data">
            <summary>
            Gets or sets the data on this node row at the column that contains the outline tree.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Checked">
            <summary>
            Gets or sets the checkbox value associated with this node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Row">
            <summary>
            Returns a reference to the <see cref="P:C1.Win.C1FlexGrid.Node.Row"/> object that corresponds to this node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Parent">
            <summary>
            Gets the parent node of this node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.PrevNode">
            <summary>
            Gets the previous sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.PrevVisibleNode">
            <summary>
            Gets the previous visible sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.NextNode">
            <summary>
            Gets the next sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.NextVisibleNode">
            <summary>
            Gets the next visible sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.FirstChild">
            <summary>
            Gets the first child node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.FirstVisibleChild">
            <summary>
            Gets the first visible child node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.LastChild">
            <summary>
            Gets the last child node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.FirstSibling">
            <summary>
            Gets the first sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.LastSibling">
            <summary>
            Gets the last sibling node.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Index">
            <summary>
            Gets the index of this node in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Node.Nodes">
            <summary>
            Gets an array containing the children of this node.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.PrintGridFlags">
            <summary>
            Contains flags that specify printing options to use with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ActualSize">
            <summary>
            Print the grid in actual (screen size). If the grid is too wide to fit on a page, columns spill onto
            separate pages. If the grid is too tall to fit on a page, rows spill onto additional pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.FitToPageWidth">
            <summary>
            Scale the grid so its width will fit on a single page. If the grid is too tall to fit on a page, 
            rows spill onto additional pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.FitToPage">
            <summary>
            Scale the grid so it will fit on a single page (rows and columns).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ShowPageSetupDialog">
            <summary>
            Show a page setup dialog before printing so the user can select paper size, orientation, and margins.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ShowPrintDialog">
            <summary>
            Show a print setup dialog before printing so the user can select the printer to use.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ShowPreviewDialog">
            <summary>
            Show a print preview dialog before printing so the user can inspect the document before printing it.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ShowHighlight">
            <summary>
            Show highlighted selection while printing.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.PrintGridFlags.ExtendLastCol">
            <summary>
            Extend the last column on each printed page.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridPrinter">
            <summary>
            Represents a class that encapsulates the control printing functionality, including page and printer 
            settings, headers, and footers.
            </summary>
            <remarks>
            See also the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> method.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.PrintDocument">
            <summary>
            Gets the <see cref="T:System.Drawing.Printing.PrintDocument"/> object that specifies page and printer settings.
            </summary>
            <remarks>
            The <see cref="P:C1.Win.C1FlexGrid.GridPrinter.PrintDocument"/> class is part of the .NET framework, defined in the 
            <b>System.Drawing.Printing</b> namespace. It contains properties that specify printer and page settings for the document.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.HeaderFont">
            <summary>
            Specifies the font to use for rendering page headers.
            </summary>
            <remarks>
            See also the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.Header"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.FooterFont">
            <summary>
            Specifies the font to use for rendering page footers.
            </summary>
            <remarks>
            See also the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.Footer"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.PageNumber">
            <summary>
            Gets the number of the page being printed (the first page is numbered one).
            </summary>
            <remarks>
            Applications typically use this property to provide user feedback while printing grids.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.PageCount">
            <summary>
            Gets the total number of the pages in the print document.
            </summary>
            <remarks>
            <para>The value returned is accurate only while the document is printing. Before or after
            a document is done printing, this property returns zero.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.PrintPreviewDialog">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.PrintPreviewDialog"/> used to display the grid's print preview.
            </summary>
            <remarks>
            Use this property to customize the size and position of the preview dialog when printing the grid 
            with the <see cref="F:C1.Win.C1FlexGrid.PrintGridFlags.ShowPrintDialog"/> option.
            </remarks>
            <example>
            The code below uses the <b>PrintPreviewDialog</b> property to display the preview dialog with a 
            custom caption and in a maximized state:
            <code>
            Form dlg = _flex.PrintParameters.PrintPreviewDialog as Form;
            dlg.Text = "Custom Caption";
            dlg.StartPosition = FormStartPosition.Manual;
            dlg.WindowState = FormWindowState.Maximized;
            _flex.PrintGrid("test", PrintGridFlags.ShowPreviewDialog);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.PrintGridFlags">
            <summary>
            Gets or sets the flags that specify printing options to use with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> 
            method. See the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.PrintGridFlags"/> enumeration for details.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.Header">
            <summary>
            Gets or sets a string that contains the page headers.
            </summary>
            <remarks>
            <para>The string may be divided by tab characters into up to three sections. The sections are then
            left, center, and right-aligned at the top of each page.</para>
            <para>The string may contain placeholders "{0}" and "{1}" which are replaced with the current
            page number and total page count.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.HeaderFont"/> property to select the font used to render the header.</para>
            </remarks>
            <example>
            The code below specifies a right-aligned header with a "Page n of m" display using a 10-point Tahoma font.
            <code>
            _flex.Header = "\t\tPage {0} of {1}";
            _flex.HeaderFont = new Font("Tahoma", 10);
            _flex.PrintGrid("Header");
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridPrinter.Footer">
            <summary>
            Gets or sets a string that contains the page footers.
            </summary>
            <remarks>
            <para>The string may be divided by tab characters into up to three sections. The sections are then
            left, center, and right-aligned at the top of each page.</para>
            <para>The string may contain placeholders "{0}" and "{1}" which are replaced with the current
            page number and total page count.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.GridPrinter.FooterFont"/> property to select the font used to render the footer.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.PrintDocumentGridRenderer">
            <summary>
            Represents an object that renders a <see cref="T:C1.Win.C1FlexGrid.C1FlexGrid"/> into a 
            paged <see cref="T:System.Drawing.Printing.PrintDocument"/>.
            </summary>
            <remarks>
            <para>This class may be used to print multiple grids, along with other 
            custom content, into an existing <see cref="T:System.Drawing.Printing.PrintDocument"/> object.</para>
            <para>To use it, create one <b>PrintDocumentGridRenderer</b> for each
            grid you want to print. Then handle the document events and call the
            <see cref="M:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.PrintPage(System.Drawing.Printing.PrintPageEventArgs)"/> event for the renderers until the value of the
            <see cref="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.CurrentPage"/> property equals <see cref="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.PageCount"/>.</para>
            <example>
            The code below renders two grids into a <see cref="T:System.Drawing.Printing.PrintDocument"/>:
            <code>
            // print two grids into an existing PrintDocument
            private void button1_Click(object sender, EventArgs e)
            {
              using (var dlg = new PrintPreviewDialog())
              {
                dlg.Document = this.printDocument1;
                dlg.ShowDialog(this);
              }
            }
            
            // event handlers for the PrintDocument object on the form
            PrintDocumentGridRenderer _g1, _g2;
            void printDocument1_BeginPrint(object sender, System.Drawing.Printing.PrintEventArgs e)
            {
              // create and configure grid renderer for the first grid
              _g1 = new PrintDocumentGridRenderer(c1FlexGrid1);
              _g1.Options = PrintGridFlags.FitToPageWidth | PrintGridFlags.ExtendLastCol;
              
              // create and configure grid renderer for the second grid
              _g2 = new PrintDocumentGridRenderer(c1FlexGrid2);
              _g2.Options = PrintGridFlags.FitToPageWidth | PrintGridFlags.ExtendLastCol;
            }
            void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
            {
              // render first grid
              if (_g1.CurrentPage &lt; _g1.PageCount)
              {
                _g1.PrintPage(e);
                e.HasMorePages = true;
              }
              
              // render second grid
              else if (_g2.CurrentPage &lt; _g2.PageCount)
              {
                _g2.PrintPage(e);
                e.HasMorePages = _g2.CurrentPage &lt; _g2.PageCount;
              }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.#ctor(C1.Win.C1FlexGrid.C1FlexGridBase)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.PrintDocumentGridRenderer"/>.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that will be painted by
            this renderer.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Renders the current page into the document.
            </summary>
            <param name="e"><see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that provides parameters for rendering the page.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.PrintPage(System.Drawing.Printing.PrintPageEventArgs,System.Int32)">
            <summary>
            Renders a specific page into the document.
            </summary>
            <param name="e"><see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that provides parameters for rendering the page.</param>
            <param name="pageIndex">Index of the page to print.</param>
            <remarks>
            This method is used to render specific ranges of pages within the document. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.Setup(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Calculates the zoom factor and page breaks in the document.
            </summary>
            <param name="e"><see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that contains the page information.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.Options">
            <summary>
            Gets or sets the flags that specify printing options to use with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.PrintGrid(System.String,C1.Win.C1FlexGrid.PrintGridFlags)"/> 
            method. See the <see cref="T:C1.Win.C1FlexGrid.PrintGridFlags"/> enumeration for details.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.CurrentPage">
            <summary>
            Gets the index of the page being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.PageCount">
            <summary>
            Gets the total number of pages in the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.PrintDocumentGridRenderer.FirstPageY">
            <summary>
            Gets or sets the Y coordinate of the first block of cells rendered on 
            the document.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowColFlags">
            <summary>
            Flags common to rows/columns
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowCol">
            <summary>
            Base class for grid rows and columns (<see cref="T:C1.Win.C1FlexGrid.Row"/> and <see cref="T:C1.Win.C1FlexGrid.Column"/> classes).
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1FlexGrid.RowCol"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCol.Clear(C1.Win.C1FlexGrid.ClearFlags)">
            <summary>
            Clears the contents of the row or column.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value specifying which elements of the row or
            column should be cleared.</param>
            <remarks>
            Use this method to reset column properties to their default values (width, visibility, style, 
            user data, and so on). This method only clears the column object itself, it does not clear 
            the contents of the cells in the column.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCol.Move(System.Int32)">
            <summary>
            Moves this row or column to a new position in the collection.
            </summary>
            <param name="indexNew">An integer specifying the new position.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCol.Invalidate">
            <summary>
            Invalidates an individual row or column, causing it to be repainted.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Visible">
            <summary>
            Gets or sets whether a Row or Column is visible.
            </summary>
            <remarks>
            <para>This property returns true even if the row or column has been scrolled out of view.</para>
            <para>To determine whether a row is currently within view, check the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.TopRow"/> 
            and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.BottomRow"/> properties.</para>
            <para>To determine whether a column is currently within view, check the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.LeftCol"/> 
            and <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.RightCol"/> properties.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.IsCollapsed">
            <summary>
            Gets whether this row is collapsed.
            </summary>
            <remarks>
            Rows are collapsed when one of their parent nodes is collapsed.
            Collapsed rows are not visible to the user even if their 
            <see cref="P:C1.Win.C1FlexGrid.RowCol.Visible"/> property is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.IsVisible">
            <summary>
            Gets whether this row is currently visible to the user.
            </summary>
            <remarks>
            <para>This property returns true if the <see cref="P:C1.Win.C1FlexGrid.RowCol.Visible"/> property
            is set to true and the row is collapsed (<see cref="P:C1.Win.C1FlexGrid.RowCol.IsCollapsed"/> 
            property returns false).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Selected">
            <summary>
            Gets or sets whether this row or column is selected.
            </summary>
            <remarks>
            Use this property to get or set the selection state for individual rows when the grid's 
            <see cref="T:System.Windows.Forms.SelectionMode"/> property is set to <see cref="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.UserData">
            <summary>
            Gets or sets user data associated with this row or column.
            </summary>
            <remarks>
            The UserData value is not used internally by the grid. It is reserved for additional data that 
            the application may associate with rows or columns.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.AllowDragging">
            <summary>
            Gets or sets whether the user can drag this row or column with the mouse.
            </summary>
            <remarks>
            <para>The grid object also has an <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDragging"/> property.
            If dragging is disabled at the grid level, the user will not be able to drag any rows or columns.</para>
            <para>If dragging is allowed by the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowDragging"/> property, then
            dragging of individual rows and columns can still be disabled by setting this property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.AllowResizing">
            <summary>
            Gets or sets whether the user can resize this row or column with the mouse.
            </summary>
            <remarks>
            <para>To resize rows or columns, the mouse must be over the fixed area of the grid, and close to a border 
            between rows or columns. The mouse pointer will then change into a sizing pointer and the user can drag 
            the row or column to change the row height or column width.</para>
            <para>If a group of columns is selected (from first to last row) and the user resizes one of them, all 
            selected columns are resized. The same applies to rows.</para>
            <para>If column sizing is allowed, users may double-click the resizing area to resize a column so it will 
            automatically fit the longest entry.</para>
            <para>Rows with zero height and columns with zero width can't be resized by the user. If you want to make 
            them very small but still resizable, set their height or width to one pixel, not to zero.</para>
            <para>The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeRow"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.BeforeResizeColumn"/> 
            events fire before resizing starts, and may be used to prevent resizing of specific rows and columns. 
            The <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeRow"/> and <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.AfterResizeColumn"/> 
            fire after resizing, and may be used to validate the user's action and to update the display.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.AllowMerging">
            <summary>
            Specifies whether adjacent cells with similar contents will be merged.
            </summary>
            <remarks>
            <para>Merging cells allows you to display data in a clear, appealing way because it highlights groups of identical 
            information. It also gives you flexibility to build tables similar to the ones you can create in HTML or using 
            Microsoft Word, both of which support merged cells.</para>
            <para>To create tables with merged cells, you must set the <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowMerging"/> property to a value other 
            than <see cref="F:C1.Win.C1FlexGrid.AllowMergingEnum.None"/>, and then set the <see cref="P:C1.Win.C1FlexGrid.RowCol.AllowMerging"/> property of individual 
            rows and columns true for the rows and columns you wish to merge.</para>
            <para>After these properties are set, the grid will automatically merge adjacent cells that have the same 
            contents. Whenever the cell contents change, the grid updates the merging state.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.AllowEditing">
            <summary>
            Gets or sets whether cells on this row or column can be edited by the user.
            </summary>
            <remarks>
            <para>The grid object also has an <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> property.
            If editing is disabled at the grid level, the user will not be able to edit any cells.</para>
            <para>If editing is allowed by the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> property, then
            editing of individual rows and columns can still be disabled by setting this property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.DataType">
            <summary>
            Gets or sets the type of object stored in this row or column.
            </summary>
            <remarks>
            <para>By default, the column's DataType property is set to <see cref="T:System.Object"/>, which allows you to store 
            any data values in the column.</para>
            <para>If you set a row or column's DataType to a specific type, the grid will try to convert any values assigned 
            to cells in that column to the specified data type. If the conversion fails, the grid will fire a
            <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GridError"/> event and the cell value will not be changed.
            </para>
            <para>The DataType property affects how values are stored internally in the grid, how they are sorted, and the 
            type of control that is used to edit the values in the column. For example, a <see cref="T:System.Windows.Forms.DateTimePicker"/> 
            control is used to edit values in <see cref="T:System.DateTime"/> columns, and check boxes are used to display and edit 
            values in Boolean columns.</para>
            <para>If you want to store times (not dates) in a column, you can still use the DateTime type, but you should 
            use a <see cref="P:C1.Win.C1FlexGrid.RowCol.Format"/> that displays only the time, not the date.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Format">
            <summary>
            Gets or sets a string that specifies how to format the data on this column.
            </summary>
            <remarks>
            <para>The Format property affects how values are formatted for display, not the values stored internally. 
            To retrieve the formatted value of a cell, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetDataDisplay(System.Int32,System.Int32)"/> property.</para>
            <para>The Format string has the same semantics as the format argument in the .NET <see cref="M:System.String.Format(System.String,System.Object)"/>
            method. For details and a complete set of examples, see the .NET documentation.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.EditMask">
            <summary>
            Gets or sets the input mask to use when editing cells on this column.
            </summary>
            <remarks>
            The grid also has an <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.EditMask"/> property that applies to the entire grid. 
            For details and mask syntax, refer to that property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Index">
            <summary>
            Gets the index of this row or column in its parent collection.
            </summary>
            <remarks>
            <para>This property returns -1 if the row or column is not a member of the collection.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Style">
            <summary>
            Gets or sets a custom <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> associated with this row or column.
            </summary>
            <remarks>
            If the row or column does not have a custom style, this property returns null.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.StyleNew">
            <summary>
            Gets or sets a custom <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> associated with this row or column, creating a new
            style if necessary.
            </summary>
            <remarks>
            This property never returns null. If this element does not have a custom style, a new one will be
            created automatically and returned.
            </remarks>
            <example>
            The code below sets a column's background color to red.
            <code>
            // get the style associated with column 1 (create a new one if necessary)
            CellStyle cs = _flex.Cols[1].StyleNew.BackColor;
            
            // set the new style's back color to red
            cs.BackColor = Color.Red;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.StyleDisplay">
            <summary>
            Gets the style used to display this row or column.
            </summary>
            <remarks>
            This property never returns null. If the row or column has a custom style, this property returns that style. 
            Otherwise, it returns the stock style used to display the row (e.g., Normal, Alternate, Fixed, Frozen).
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.StyleFixed">
            <summary>
            Gets the stock <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> used to paint fixed cells in this row or column.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.StyleFixedNew">
            <summary>
            Gets the custom style associated with fixed cells on this row or column, creating a new one of necessary.
            </summary>
            <remarks>
            If the row or column has a custom style associated with its fixed cells, this property returns that style. 
            Otherwise, it creates a new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>, assigns it to the row or column, and returns a reference 
            to the new style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.StyleFixedDisplay">
            <summary>
            Gets the style used to display fixed cells on this row or column.
            </summary>
            <remarks>
            If the row or column has a custom style associated with its fixed cells, this property returns that style. 
            Otherwise, it returns the stock style used to display the column (e.g., Normal, Fixed).
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.TextAlign">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1FlexGrid.TextAlignEnum"/> value that determines how text is aligned in 
            scrollable cells on this row or column.
            </summary>
            <remarks>
            This property gets or sets the alignment value specified by the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>
            object associated with the column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.TextAlignFixed">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1FlexGrid.TextAlignEnum"/> value that determines how text is aligned in 
            fixed cells on this row or column.
            </summary>
            <remarks>
            This property gets or sets the alignment value specified by the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>
            object associated with the fixed cells in the row or column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.ImageAlign">
            <summary>
            Gets or sets an <see cref="T:C1.Win.C1FlexGrid.ImageAlignEnum"/> value that determines how images are aligned in 
            scrollable cells on this row or column.
            </summary>
            <remarks>
            This property gets or sets the alignment value specified by the <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>
            object associated with the column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.ImageAlignFixed">
            <summary>
            Gets or sets an <see cref="T:C1.Win.C1FlexGrid.ImageAlignEnum"/> value that determines how images are aligned in 
            fixed cells on this row or column.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.ImageMap">
            <summary>
            Gets or sets an <see cref="T:System.Collections.IDictionary"/> object used to translate data values into images for this row or column.
            </summary>
            <remarks>
            <para>Use this property to associate data values in this row or column with images. For example, if a column contains 
            country names, you can use this property to display the corresponding flags.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageAndText"/> property to determine whether the image is displayed instead of or in 
            addition to the cell text.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.ImageAndText">
            <summary>
            Gets or sets a value that determines whether images found in this row or column's <see cref="P:C1.Win.C1FlexGrid.RowCol.ImageMap"/> should 
            be displayed instead of or in addition to the cell text.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.DataMap">
            <summary>
            Gets or sets an <see cref="T:System.Collections.IDictionary"/> object used to translate data values into display values 
            for this row or column.
            </summary>
            <remarks>
            <para>The <b>DataMap</b> property allows you to implement "translated" rows or columns. In translated rows or columns, 
            the grid does not display the values stored in the cells. Instead, it looks up those values in the column's 
            <b>DataMap</b> and displays the mapped value.</para>
            <para>The grid also uses the <b>DataMap</b> value to populate drop-down lists when the column is editable.</para>
            <para>Note that the <b>DataMap</b> property has no effect when the <see cref="P:C1.Win.C1FlexGrid.RowCol.ComboList"/> property is also
            set. Using both properties on a single row or column is legal, but it effectively disables the <b>DataMap</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.ComboList">
            <summary>
            Gets or sets a list of items to be used by the drop-down editor.
            </summary>
            <remarks>
            <para>The <b>ComboList</b> property specifies the type of editor to be used when editing a cell. You may use a text box, 
            drop-down list, drop-down combo, or an edit button to pop up custom editor forms.</para>
            <para>To use the <b>ComboList</b> property, set the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowEditing"/> property to True, and 
            set the <b>ComboList</b> property to a string that describes the type of editing you want to use for that cell. 
            The options are described below:</para>
            <para>1. To edit the cell using a regular text box, set the <b>ComboList</b> property to an empty string ("").</para>
            <para>2. To edit the cell using a drop-down list, set the <b>ComboList</b> property to a string containing the available 
            options, separated by pipe characters (for example "option 1| option 2").</para>
            <para>3. To edit the cell using a drop-down combo, set the <b>ComboList</b> property to a string containing the 
            available options, separated by pipe characters and starting with a pipe character (for example "|option 1|option 2").</para>
            <para>4. To display an edit button, set the <b>ComboList</b> property to a string containing an ellipsis ("..."). 
            Edit buttons look like regular push buttons, aligned to the right of the cell, with an ellipsis as a caption. 
            When the user clicks on the edit button, the grid fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/> event. 
            In this case, the user can't edit the cell contents directly.</para>
            <para>5. To display an edit button next to an editable cell, set the <b>ComboList</b> property to a string containing a 
            pipe and an ellipsis ("|..."). In this case, you get a regular edit button but the user can also edit the cell 
            contents directly.</para>
            <para>Note that the <b>ComboList</b> property has precedence over the <see cref="P:C1.Win.C1FlexGrid.RowCol.DataMap"/> property.
            Using both properties on a single row or column is legal, but it effectively disables the <b>DataMap</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Editor">
            <summary>
            Gets or sets the custom editor used to edit cells in this column.
            </summary>
            <remarks>
            <para>The grid provides several built-in editors that are automatically selected based on the properties of the
            cell being edited.</para>
            <para>This property allows you to use external editors when editing values in a given column. Any control 
            can be used as an external editor, but to achieve complete integration with the grid, the external editor should 
            implement the <see cref="T:C1.Win.C1FlexGrid.IC1EmbeddedEditor"/> interface.</para>
            <para>You can associate external editors with columns at design time (using the grid's Column Editor) or at run 
            time, by setting this property.</para>
            </remarks>
            <example>
            <para>The code below creates a C1DateEdit control and assigns it to the <see cref="P:C1.Win.C1FlexGrid.RowCol.Editor"/> property of a grid
            column. The control will be used to edit cells on this column instead of the default <see cref="T:System.Windows.Forms.DateTimePicker"/>
            control.</para>
            <para>All controls in the C1Input library implement the <see cref="T:C1.Win.C1FlexGrid.IC1EmbeddedEditor"/> interface and can be
            used as grid editors without any extra code.</para>
            <code>
            // create C1DateEdit control (included with C1Input)
            C1DateEdit dateEdit = new C1DateEdit();
            
            // use the new control as an editor for a grid column
            _flex.Cols[1].DataType = typeof(DateTime);
            _flex.Cols[1].Editor = c1DateEdit;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCol.Grid">
            <summary>
            Gets a reference to the <see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> control that owns this row or column.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Row">
            <summary>
            Class that represents a grid row.
            </summary>
            <remarks>
            This class does not have a public constructor. You can add and remove rows using methods
            in the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows"/> property, which exposes the row collection.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Row.Clear(C1.Win.C1FlexGrid.ClearFlags)">
            <summary>
            Clears this row.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value specifying which elements of the row should be cleared.</param>
            <remarks>
            Use this method to reset row properties to their default values (height, visibility, style, user data, etc.).
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Row.Move(System.Int32)">
            <summary>
            Moves a row to a new position in the collection.
            </summary>
            <param name="indexNew">An integer specifying the row's new position.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Row.Invalidate">
            <summary>
            Invalidates this row, causing it to be repainted.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Item(System.Int32)">
            <summary>
            Gets or sets the cell value specified by the column index in this row.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Item(System.String)">
            <summary>
            Gets or sets the cell value specified by the column name in this row.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Top">
            <summary>
            Gets the position of the top of this row, in pixels, relative to the grid.
            </summary>
            <remarks>
            <para>The value returned is the sum of row heights from the top of the grid until this row, and 
            does not account for the scroll position. To account for the scroll position, this value should
            be adjusted using the grid's <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/> 
            property.</para>
            <para>To retrieve the size and position of a cell, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRect(System.Int32,System.Int32,System.Boolean)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Bottom">
            <summary>
            Gets the position of the bottom of this row, in pixels, relative to the grid.
            </summary>
            <remarks>
            The value returned corresponds to the sum of the <see cref="P:C1.Win.C1FlexGrid.Row.Top"/> and <see cref="P:C1.Win.C1FlexGrid.Row.HeightDisplay"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Height">
            <summary>
            Gets or sets the height of this row, in pixels (the value -1 represents the default row height).
            </summary>
            <remarks>
            <para>Setting this property to -1 causes the grid to use the default row height for this row
            (see the <see cref="P:C1.Win.C1FlexGrid.RowColCollection.DefaultSize"/> property).</para>
            <para>Height returns the height assigned to the row even if the row is invisible, and returns -1 
            if the row has the default height. To obtain the actual display height of a row, use the 
            <see cref="P:C1.Win.C1FlexGrid.Row.HeightDisplay"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.HeightDisplay">
            <summary>
            Gets or sets the display height for this row, in pixels.
            </summary>
            <remarks>
            HeightDisplay returns zero if the row is invisible, and returns the actual display height
            even if the <see cref="P:C1.Win.C1FlexGrid.Row.Height"/> property is set to -1 (which stands for default row height).
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Index">
            <summary>
            Gets the index of this row in the <see cref="T:C1.Win.C1FlexGrid.RowCollection"/> collection.
            </summary>
            <remarks>
            <para>This property returns -1 if the <see cref="T:C1.Win.C1FlexGrid.Row"/> is not a member of the collection.</para>
            <para>See also the <see cref="P:C1.Win.C1FlexGrid.Row.SafeIndex"/> and <see cref="P:C1.Win.C1FlexGrid.Row.DataIndex"/> properties.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.SafeIndex">
            <summary>
            Gets the index of this row in the <see cref="T:C1.Win.C1FlexGrid.RowCollection"/> collection.
            </summary>
            <remarks>
            This property is similar to the <see cref="P:C1.Win.C1FlexGrid.Row.Index"/> property, except it throws an exception 
            if the <see cref="T:C1.Win.C1FlexGrid.Row"/> is not a member of the collection.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.DataIndex">
            <summary>
            Gets the index of this row in the <see cref="T:C1.Win.C1FlexGrid.RowCollection"/> collection, excluding fixed and node rows.
            </summary>
            <remarks>
            <para>This property returns -1 if the row is a fixed or node row.</para>
            <para>If the grid is bound to a data source, the return value can be used as an indexer into the grid's data 
            source to obtain a reference to the item bound to the row.</para>
            <para>You can also obtain the underlying data object directly using the row's <see cref="P:C1.Win.C1FlexGrid.Row.DataSource"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Caption">
            <summary>
            Gets or sets the text of the first fixed cell in the row.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.IsNew">
            <summary>
            Indicates the row is a placeholder for adding new rows to the grid.
            </summary>
            <remarks>
            This property returns true for the last row on the grid when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> 
            property is set to true. This is the row that has an asterisk glyph on the first fixed column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.DataSource">
            <summary>
            Gets the object that provides data for this row.
            </summary>
            <remarks>
            <para>The type of object returned depends on the type of DataSource assigned to the grid. For example, 
            if the grid is bound to a <see cref="T:System.Data.DataView"/> object, then this property will return the 
            specific <see cref="T:System.Data.DataRowView"/> object that is bound to this row.</para>
            <para>This property returns null if the grid is unbound, or if the row is a fixed or node row that doesn't 
            correspond to any objects in the grid's data source.</para>
            <para>For an example, see the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.GetUnboundValue"/> event.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.IsNode">
            <summary>
            Gets or sets whether this row is a node row in an outline.
            </summary>
            <remarks>
            <para>This property determines whether the row behaves as a node in an outline tree.</para>
            <para>You can use <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> to create custom outline trees, or use the grid's 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method to create outline trees automatically.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Node">
            <summary>
            Gets the <see cref="P:C1.Win.C1FlexGrid.Row.Node"/> object associated with this row.
            </summary>
            <remarks>
            <para>If the row is a node (see the <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property), this property returns a 
            <see cref="P:C1.Win.C1FlexGrid.Row.Node"/> object that can be used to collapse or expand the node, set its level within 
            the outline tree, etc.</para>
            <para>If the row is not a node, this property gets the row's parent node.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Row.Selected">
            <summary>
            Gets or sets whether this row is selected.
            </summary>
            <remarks>
            Use this property to get or set the selection status for individual rows when the grid's 
            <see cref="T:System.Windows.Forms.SelectionMode"/> property is set to <see cref="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox"/>.
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Column">
            <summary>
            Class that represents a grid column.
            </summary>
            <remarks>
            This class does not have a public constructor. You can add and remove 
            columns using methods in the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Cols"/> 
            property, which exposes the column collection.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Column.Invalidate">
            <summary>
            Invalidates this column, causing it to be repainted.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Column.Clear(C1.Win.C1FlexGrid.ClearFlags)">
            <summary>
            Clears this <see cref="T:C1.Win.C1FlexGrid.Column"/>.
            </summary>
            <param name="clearFlags"><see cref="T:C1.Win.C1FlexGrid.ClearFlags"/> value specifying which elements of the 
            <see cref="T:C1.Win.C1FlexGrid.Column"/> should be cleared.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.Column.Move(System.Int32)">
            <summary>
            Moves a <see cref="T:C1.Win.C1FlexGrid.Column"/> to a new position in the collection.
            </summary>
            <param name="indexNew">An integer specifying the column's new position.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Item(System.Int32)">
            <summary>
            Gets or sets the cell value specified by the row index in this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Left">
            <summary>
            Gets the position of the left of this column, in pixels, relative to the grid.
            </summary>
            <remarks>
            <para>The value returned is the sum of column widths from the left of the grid until this column, and 
            does not account for the scroll position. To account for the scroll position, this value should
            be adjusted using the grid's <see cref="P:C1.Win.C1FlexGrid.Util.BaseControls.ScrollableControl.ScrollPosition"/>
            property.</para>
            <para>To retrieve the size and position of a cell, use the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.GetCellRect(System.Int32,System.Int32,System.Boolean)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Right">
            <summary>
            Gets the position of the right of this column, in pixels, relative to the grid.
            </summary>
            <remarks>
            The value returned corresponds to the sum of the <see cref="P:C1.Win.C1FlexGrid.Column.Left"/> and <see cref="P:C1.Win.C1FlexGrid.Column.WidthDisplay"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Width">
            <summary>
            Gets or sets the width of this column, in pixels (the value -1 represents the default column width).
            </summary>
            <remarks>
            <para>Setting this property to -1 causes the grid to use the default column width for this column
            (see the <see cref="P:C1.Win.C1FlexGrid.RowColCollection.DefaultSize"/> property).</para>
            <para><b>Width</b> returns the width assigned to the column even if the row is invisible, and 
            returns -1 if the row has the default height. To obtain the actual display width of a column, 
            use the <see cref="P:C1.Win.C1FlexGrid.Column.WidthDisplay"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.WidthDisplay">
            <summary>
            Gets or sets the display width for this column, in pixels.
            </summary>
            <remarks>
            WidthDisplay returns zero if the column is invisible, and returns the actual display width
            even if the <see cref="P:C1.Win.C1FlexGrid.Column.Width"/> property is set to -1 (which stands for default column width).
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.SafeIndex">
            <summary>
            Gets the index of this column in the <see cref="T:C1.Win.C1FlexGrid.Column"/> collection.
            </summary>
            <remarks>
            This property is similar to the <see cref="P:C1.Win.C1FlexGrid.Column.Index"/> property, except it throws an exception 
            if the <see cref="T:C1.Win.C1FlexGrid.Column"/> is not a member of the collection.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.DataIndex">
            <summary>
            Gets the position of the column in the data source object.
            </summary>
            <remarks>
            This property returns -1 for fixed and unbound columns.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.AllowSorting">
            <summary>
            Gets or sets whether this column can be sorted by clicking on the column header.
            </summary>
            <remarks>
            The grid has an <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowSorting"/> property that determines whether columns can be 
            sorted with the mouse. The AllowSorting property of the <see cref="T:C1.Win.C1FlexGrid.Column"/> objects can be used to prevent 
            the user from sorting specific columns.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.AllowFiltering">
            <summary>
            Gets or sets this type of filter to use for this column.
            </summary>
            <remarks>
            <para>The grid has an <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFiltering"/> property that determines whether 
            columns can be filtered by the user. If that property is set to true, then filters are created
            automatically for each column based on the setting of the column's <see cref="P:C1.Win.C1FlexGrid.Column.AllowFiltering"/>
            property.</para>
            <para>The grid provides condition and value filters. Condition filters allow users to specify
            conditions such as 'value &gt; 10'. Value filters allow users to select values that should be displayed
            from a list of values present in the data source. All filters can be customized in code as shown
            in the examples below.</para>
            </remarks>
            <example>
            The code below customizes the filters for two columns. The "ShipRegion" column is initialized to 
            show only two states, AK and CA. The "UnitPrice" column is initialized to show only items with
            unit price greater than $30. After the column filters have been initialized, the code calls the
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.ApplyFilters"/> method to apply the filters.
            <code>
            // initialize "ShipRegion" column filter to show only two values: "AK" and "CA"
            var col = _flex.Cols["ShipRegion"];
            col.AllowFiltering = AllowFiltering.ByValue;
            var vf = col.Filter as ValueFilter;
            vf.ShowValues = new object[] { "AK", "CA" };
            
            // initialize "UnitPrice" column filter to show only values greater than $30
            col = _flex.Cols["UnitPrice"];
            col.AllowFiltering = AllowFiltering.ByCondition;
            var cf = col.Filter as ConditionFilter;
            cf.Condition1.Operator = ConditionOperator.GreaterThan;
            cf.Condition1.Parameter = 30;
            
            // apply both column filters to the data
            _flex.ApplyFilters();
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Filter">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilter"/> responsible for filtering this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.ActiveFilter">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.IC1ColumnFilter"/> that is currently filtering this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Name">
            <summary>
            Gets or sets the name of this column.
            </summary>
            <remarks>
            <para>The name can be used as an index in the <see cref="T:C1.Win.C1FlexGrid.ColumnCollection"/> property indexer.</para>
            <para>When the grid is bound to a DataSource, the column names are set automatically to the names
            of columns in the data source, and are used for binding.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Sort">
            <summary>
            Specifies how this column should be sorted when the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method is called
            with a <see cref="F:C1.Win.C1FlexGrid.SortFlags.UseColSort"/> flag.
            </summary>
            <remarks>
            Use this property when you want to sort multiple columns in different orders. For example, you could
            set the <b>Sort</b> property to <see cref="F:C1.Win.C1FlexGrid.SortFlags.Ascending"/> for columns 1, 2, and 3, and to
            <see cref="F:C1.Win.C1FlexGrid.SortFlags.Descending"/> for columns 4, 5, and 6.
            You would then call the grid's <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method with the <b>sort</b> parameter
            set to <see cref="F:C1.Win.C1FlexGrid.SortFlags.UseColSort"/> to perform the sort using the order specified for each column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Index">
            <summary>
            Gets the index of this column in the <see cref="T:C1.Win.C1FlexGrid.Column"/> collection.
            </summary>
            <remarks>Returns -1 if the column is not a member of the collection.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Selected">
            <summary>
            Gets or sets whether this column is selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Column.Caption">
            <summary>
            Gets or sets the text of the column's header cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowColCollection">
            <summary>
            Base class for grid row and column collections (<see cref="T:C1.Win.C1FlexGrid.RowCollection"/> 
            and <see cref="T:C1.Win.C1FlexGrid.ColumnCollection"/> classes).
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves a row or column to a new position in the collection.
            </summary>
            <param name="indexOld">Index of row or column to be moved.</param>
            <param name="indexNew">New position.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a range of rows or columns to a new position in the collection.
            </summary>
            <param name="index">The index of the first row or column in the range to be moved.</param>
            <param name="count">The number of rows or columns that will be moved.</param>
            <param name="indexNew">New position.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.Contains(C1.Win.C1FlexGrid.RowCol)">
            <summary>
            Determines whether the collection contains a given row or column.
            </summary>
            <param name="item">Row or column items to be detected.</param>
            <returns>True if the row or column is a member of the collection, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.GetPrevious(System.Int32)">
            <summary>
            Gets the index of the previous visible row or column.
            </summary>
            <param name="item">Index of the original row or column.</param>
            <returns>Index of the previous visible row or column.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.GetNext(System.Int32)">
            <summary>
            Gets the index of the next visible row or column.
            </summary>
            <param name="item">Index of the original row or column.</param>
            <returns>Index of the next visible row or column.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowColCollection.Update">
            <summary>
            Updates the position of rows or columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.Count">
            <summary>
            Gets or sets the number of rows or columns in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.Fixed">
            <summary>
            Gets or sets the number of fixed rows or columns in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows or columns in the collection.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFreezing"/> property to determine whether 
            the user can freeze rows or columns with the mouse.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.MinSize">
            <summary>
            Gets or sets the minimum size for rows and columns in the collection.
            </summary>
            <remarks>
            The MinSize property limits the minimum size of rows or columns when they are resized by the user or 
            adjusted to fit the contents with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> or
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> method.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.MaxSize">
            <summary>
            Gets or sets the maximum size for rows and columns in the collection.
            </summary>
            <remarks>
            <para>The MaxSize property limits the maximum size of rows or columns when they are resized by the user or 
            adjusted to fit the contents with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> or 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSizeCols(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Win.C1FlexGrid.AutoSizeFlags)"/> method.</para>
            <para>Setting this property to zero disables it.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.DefaultSize">
            <summary>
            Gets or sets the default size of the rows or columns in the collection (in pixels).
            </summary>
            <remarks>
            <para>This value is set automatically when the grid's <see cref="P:System.Windows.Forms.Control.Font"/> property changes.</para>
            <para>The default size is used when the row's <b>Height</b> property or columns <b>Width</b> property is set to -1.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowColCollection.Grid">
            <summary>
            Gets a reference to the <see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> control that owns this collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.RowCollection">
            <summary>
            Collection of grid <see cref="T:C1.Win.C1FlexGrid.Row"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Add">
            <summary>
            Appends a new <see cref="T:C1.Win.C1FlexGrid.Row"/> object to the collection.
            </summary>
            <remarks>
            The Add method appends a new row to the collection. To insert a row at a specific position, 
            use the <see cref="M:C1.Win.C1FlexGrid.RowCollection.Insert(System.Int32)"/> method.
            </remarks>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Row"/> that was added to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Add(System.Int32)">
            <summary>
            Appends a given number of <see cref="T:C1.Win.C1FlexGrid.Row"/> objects to the collection.
            </summary>
            <param name="count">Number of rows to add to the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Insert(System.Int32)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.Row"/> object to the collection at a specified position.
            </summary>
            <param name="index">The position where the new row will be inserted.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Row"/> that was added to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.InsertNode(System.Int32,System.Int32)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.Node"/> row to the row collection at a specified position.
            </summary>
            <param name="index">The position where the new node row will be inserted.</param>
            <param name="level">Outline level for the new node row.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Node"/> that was added to the collection.</returns>
            <remarks>
            This method is especially useful when the grid is bound to a data source, because in this 
            case you can't change the value of the <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property. When the grid 
            is unbound, you can add rows and turn them into nodes later using the <see cref="P:C1.Win.C1FlexGrid.Row.IsNode"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.AddNode(System.Int32)">
            <summary>
            Appends a new <see cref="T:C1.Win.C1FlexGrid.Node"/> row to the row collection.
            </summary>
            <param name="level">Outline level for the new node row.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Node"/> that was added to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.InsertRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of rows to the collection at a specified position.
            </summary>
            <param name="index">The position where the new range will be inserted.</param>
            <param name="count">The number of rows to add.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Remove(System.Int32)">
            <summary>
            Removes a <see cref="T:C1.Win.C1FlexGrid.Row"/> object from the collection.
            </summary>
            <param name="index">The index of the row to remove from the collection.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Row"/> that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Remove(C1.Win.C1FlexGrid.Row)">
            <summary>
             Removes a <see cref="T:C1.Win.C1FlexGrid.Row"/> object from the collection.
            </summary>
            <param name="row">The row to be removed.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Row"/> that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of rows from the collection.
            </summary>
            <param name="index">The index of the first row to remove from the collection.</param>
            <param name="count">The number of rows to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a <see cref="T:C1.Win.C1FlexGrid.Row"/> object to a new position in the collection.
            </summary>
            <param name="indexOld">Index of row to be moved.</param>
            <param name="indexNew">New position for the row.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a range of rows to a new position in the collection.
            </summary>
            <param name="index">The index of the first row in the range that will be moved.</param>
            <param name="count">The number of rows that will be moved.</param>
            <param name="indexNew">New position for the first row in the range.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.RowCollection.Update">
            <summary>
            Updates the position and data index of each row in this collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.Row"/> at the specified index.
            </summary>
            <remarks>
            Use the <see cref="T:C1.Win.C1FlexGrid.Row"/> object returned by this method to set attributes such as row 
            height, visibility, style, selected state, and so on.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCollection.Count">
            <summary>
            Gets or sets the number of rows in the collection.
            </summary>
            <remarks>
            You can add or remove rows by assigning a new value to this property, or you can use the 
            <see cref="M:C1.Win.C1FlexGrid.RowCollection.Add"/>, <see cref="M:C1.Win.C1FlexGrid.RowCollection.Insert(System.Int32)"/>, <see cref="M:C1.Win.C1FlexGrid.RowCollection.InsertRange(System.Int32,System.Int32)"/>, and <see cref="M:C1.Win.C1FlexGrid.RowCollection.Remove(System.Int32)"/> methods.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCollection.GlyphRow">
            <summary>
            Gets or sets the index of the row used to display the sorting and filtering glyphs.
            </summary>
            <remarks>
            The default value is -1, which causes the sorting and filtering glyphs to be shown
            on the last fixed row. If you set this property to a value larger than the number
            of fixed rows, then the glyphs will not be displayed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCollection.Fixed">
            <summary>
            Gets or sets the number of fixed rows in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.RowCollection.Selected">
            <summary>
            Gets a collection of <see cref="T:C1.Win.C1FlexGrid.Row"/> objects that are currently selected.
            </summary>
            <remarks>
            This property is especially useful when the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.SelectionMode"/> property
            is set to <see cref="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox"/>. 
            </remarks>
            <example>
            <para>The code below removes all selected rows from the grid.</para>
            <para>Note that foreach loops can't be used to modify the collections being iterated over. This example
            works because the <see cref="P:C1.Win.C1FlexGrid.RowCollection.Selected"/> collection is being enumerated while the
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Rows"/> collection is being modified.</para>
            <code>
            // delete all selected rows
            foreach (Row r in _flex.Rows.Selected)
            {
                _flex.Rows.Remove(r);
            }
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ColumnCollection">
            <summary>
            Collection of grid <see cref="T:C1.Win.C1FlexGrid.Column"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Contains(System.String)">
            <summary>
            Gets a value that determines whether the collection contains a <see cref="T:C1.Win.C1FlexGrid.Column"/> with the given name.
            </summary>
            <param name="columnName">Column name to look for (case-insensitive).</param>
            <returns>True if the collection contains a column with the given name, False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1FlexGrid.Column"/> with the specified name.
            </summary>
            <param name="columnName">Column name to look for (case-insensitive).</param>
            <returns>Index of the column that has the given name in this collection, or -1 if the collection
            does not contain a column with the given name.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.IndexOf(System.String,System.Boolean)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1FlexGrid.Column"/> with the specified name, optionally
            throwing an exception if the column is not found.
            </summary>
            <param name="columnName">Column name to look for (case-insensitive).</param>
            <param name="throwIfNotFound">Whether to throw and exception if the column cannot be found.</param>
            <returns>Index of the column that has the given name in this collection, or -1 if the collection
            does not contain a column with the given name.</returns>
            <remarks>If the <paramref name="throwIfNotFound"/> parameter is set to true and
            a column named <paramref name="columnName"/> cannot be found, the control throws
            an <see cref="T:System.ArgumentOutOfRangeException"/>. This makes it easier to write
            compact code that relies on column names.</remarks>
            <example>
            The example below uses the <b>IndexOf</b> method to convert column names into
            indices. Note that if the column names are invalid, the exception will be thrown
            by the <b>IndexOf</b> method (column not found) rather than in the following 
            method, where it would not be as clear (invalid index).
            <code>
            int columnIndex = _flex.Cols.IndexOf("total");
            _flex.AutoSizeCol(columnIndex);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Add">
            <summary>
            Appends a new <see cref="T:C1.Win.C1FlexGrid.Column"/> object to this collection.
            </summary>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Column"/> that was added to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Add(System.Int32)">
            <summary>
            Appends a given number of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects to the collection.
            </summary>
            <param name="count">Number of columns to add to the collection.</param>
            <remarks>
            This method adds the new columns to the end of the collection. To insert columns at specific 
            positions, use the <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Insert(System.Int32)"/> or <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.InsertRange(System.Int32,System.Int32)"/> methods.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Insert(System.Int32)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.Column"/> object to this collection at a specified position.
            </summary>
            <param name="index">The position where the new column will be inserted.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Column"/> that was inserted to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.InsertRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects to the collection at a specified position.
            </summary>
            <param name="index">The position where the new range will be inserted.</param>
            <param name="count">The number of columns to add.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Remove(System.Int32)">
            <summary>
            Removes a <see cref="T:C1.Win.C1FlexGrid.Column"/> object from the collection.
            </summary>
            <param name="index">The index of the column to remove from the collection.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Column"/> that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Remove(C1.Win.C1FlexGrid.Column)">
            <summary>
            Removes a <see cref="T:C1.Win.C1FlexGrid.Column"/> object from the collection.
            </summary>
            <param name="column">The column to remove.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Column"/> that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:C1.Win.C1FlexGrid.Column"/> object from the collection.
            </summary>
            <param name="columnName">Name of the column to remove.</param>
            <returns>A reference to the <see cref="T:C1.Win.C1FlexGrid.Column"/> that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects from the collection.
            </summary>
            <param name="index">The index of the first column to remove from the collection.</param>
            <param name="count">The number of columns to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.Move(System.Int32,System.Int32)">
            <summary>
             Moves a <see cref="T:C1.Win.C1FlexGrid.Column"/> object to a new position in the collection.
            </summary>
            <param name="indexOld">Index of the column to be moved.</param>
            <param name="indexNew">New position for the column.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a range of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects to a new position in the collection.
            </summary>
            <param name="index">The index of the first column in the range that will be moved.</param>
            <param name="count">The number of columns that will be moved.</param>
            <param name="indexNew">New position for the first column in the range.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.BuildString(System.Boolean)">
            <summary>
            Gets a string build a string that contains a complete description of 
            the column collection, suitable for persisting the control state.
            </summary>
            <param name="includeDefault">Whether to include default values in the description.</param>
            <returns>A string that describes the column collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.ColumnCollection.ParseString(C1.Win.C1FlexGrid.C1FlexGridBase,System.String)">
            <summary>
            Parses a string containg a description of the column collection (usually obtained
            by calling the <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.BuildString(System.Boolean)"/> method) and applies it to a grid.
            </summary>
            <param name="grid">Grid that receives the column collection.</param>
            <param name="str">String that contains the column collection definition.</param>
            <returns>True if the column definition was applied successfully.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.Column"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.Win.C1FlexGrid.Column"/> that has the specified column name.
            </summary>
            <remarks>
            <para>You can use the <see cref="T:C1.Win.C1FlexGrid.Column"/> object returned by this method to set 
            attributes such as column height, visibility, style, selected state, and so on.</para>
            <para>This indexer looks for a column with the specified <see cref="P:C1.Win.C1FlexGrid.Column.Name"/>. 
            The column name is set automatically for you when the grid is bound to a database, 
            or it may be set using code.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnCollection.Count">
            <summary>
            Gets or sets the number of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects in this collection.
            </summary>
            <remarks>
            You can add or remove columns by assigning a new value to this property, or you can use the 
            <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Add"/>, <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Insert(System.Int32)"/>, <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.InsertRange(System.Int32,System.Int32)"/>, and <see cref="M:C1.Win.C1FlexGrid.ColumnCollection.Remove(System.Int32)"/> methods.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnCollection.Fixed">
            <summary>
            Gets or sets the number of fixed columns in this collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.ColumnCollection.Selected">
            <summary>
            Gets a collection of <see cref="T:C1.Win.C1FlexGrid.Column"/> objects that are currently selected.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellInfo">
            <summary>
            CellInfo
            contains custom cell information other than actual data (style, 
            check, user data, etc) held in the row's _cellInfo array list, 
            which is often null.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRowComparer">
            <summary>
            Summary description for GridRowComparer.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.FileFormatEnum">
            <summary>
            Specifies the type of file to save or load with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)"/> 
            and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)"/> methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFormatEnum.TextComma">
            <summary>
            Text file, cells separated with commas.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFormatEnum.TextTab">
            <summary>
            Text file, cells separated with tabs.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFormatEnum.TextCustom">
            <summary>
            Text file, cells separated with the character specified by the 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.ClipSeparators"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFormatEnum.Excel">
            <summary>
            Microsoft Excel files (Xls/biff-8 or OpenXml formats).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.FileFlags">
            <summary>
            Specifies options for use with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)"/> and 
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadGrid(System.String,C1.Win.C1FlexGrid.FileFormatEnum,C1.Win.C1FlexGrid.FileFlags,System.Text.Encoding)"/> methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.None">
            <summary>
            Use default settings.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.IncludeFixedCells">
            <summary>
            Include fixed cells when loading or saving the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.VisibleOnly">
            <summary>
            Save only visible rows and columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.SelectedRowsOnly">
            <summary>
            Save only selected rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.AsDisplayed">
            <summary>
            Save values as displayed (including formatting and mapping where available).
            This flag has no effect when saving text files, which always contain values as displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.SaveMergedRanges">
            <summary>
            Save merged ranges when exporting to Excel with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags,System.Drawing.Printing.PrinterSettings)"/> method.
            This flag has no effect when saving text files, it only affects Excel output.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.LoadMergedRanges">
            <summary>
            Load merged ranges when importing from Excel with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)"/> method.
            This flag has no effect when loading text files, it only affects Excel input.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.IncludeMergedRanges">
            <summary>
            Save and load merged ranges when exporting to or importing from Excel with the
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags,System.Drawing.Printing.PrinterSettings)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)"/> methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.NoFreezing">
            <summary>
            Do not freeze rows and columns when exporting to or importing from Excel with the
            <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.SaveExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags,System.Drawing.Printing.PrinterSettings)"/> and <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.LoadExcel(System.String,System.String,C1.Win.C1FlexGrid.FileFlags)"/> methods.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.FileFlags.OpenXml">
            <summary>
            Load or save file in OpenXml (Office 2007) format.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.SelectionModeEnum">
            <summary>
            Specifies the type of selection provided by the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.Default">
            <summary>
            The user can select continuous blocks of cells using the keyboard and the mouse. 
            Clicking on header cells selects entire rows and columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.Cell">
            <summary>
            The user can select only a single cell at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.CellRange">
            <summary>
            The user can select continuous blocks of cells using the keyboard and the mouse. 
            Clicking on header cells does not affect the selection.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.Row">
            <summary>
            The user can select a single row at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.RowRange">
            <summary>
            The user can select a range of contiguous rows at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.Column">
            <summary>
            The user can select a single column at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.ColumnRange">
            <summary>
            The user can select a range of contiguous columns at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.SelectionModeEnum.ListBox">
            <summary>
            The user can select non-contiguous rows using control-click.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.MoveCursorEnum">
            <summary>
            This enumeration is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.None">
            <summary>
            No movement.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellPrev">
            <summary>
            One cell left, then wrap to previous row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellNext">
            <summary>
            One cell right, then wrap to next row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellUp">
            <summary>
            One cell up.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellDown">
            <summary>
            One cell down.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellLeft">
            <summary>
            One cell left.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.CellRight">
            <summary>
            One cell right.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.PageUp">
            <summary>
            Page up.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.PageDown">
            <summary>
            Page down.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.PageLeft">
            <summary>
            Page left.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.PageRight">
            <summary>
            Page right.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.HomeUp">
            <summary>
            Top cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.EndDown">
            <summary>
            Bottom cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.HomeLeft">
            <summary>
            Leftmost cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.MoveCursorEnum.EndRight">
            <summary>
            Rightmost cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridSelHandler">
            <summary>
            GridSelHandler
            Handles cell/range selection for the FlexGridBase class
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellStyleEnum">
            <summary>
            Enumeration used to retrieve <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects from the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles"/>
            collection.
            </summary>
            <remarks>
            Cell styles can be retrieved from the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles"/> collection using the
            indexer or the style name. Built-in styles can also be obtained directly through read-only properties.
            </remarks>
            <example>
            The code below shows three ways to obtain a reference to a grid's default style:
            <code>
            // s1, s2, and s3 are all references to the grid's Normal style:
            CellStyle s1 = _flex.Styles[CellStyleEnum.Normal];
            CellStyle s2 = _flex.Styles["Normal"];
            CellStyle s3 = _flex.Styles.Normal;
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Normal">
            <summary>
            Style used to render scrollable normal cells.
            </summary>
            <remarks>
            <para>This is the parent style for most cells. Setting the control's <b>BackColor</b>, 
            <b>ForeColor</b>, or <b>Font</b> properties automatically sets the corresponding properties 
            on the <b>Normal</b> style.</para>
            <para>If you change any properties in the <b>Normal</b> style, the changes will be reflected
            in all styles that do not explicitly override those properties.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Alternate">
            <summary>
            Style used to render scrollable cells in even-numbered rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Fixed">
            <summary>
            Style used to render fixed cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Highlight">
            <summary>
            Style used to render cells that are selected and highlighted. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Focus">
            <summary>
            Style used to render the cell that has the focus. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Editor">
            <summary>
            Style used to render cells being edited. 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Search">
            <summary>
            Style used to render cells that are being selected as the user types (see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> property).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Frozen">
            <summary>
            Style used to render cells that are frozen (editable and selectable, but not scrollable). 
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.NewRow">
            <summary>
            Style used to render the last row on the grid when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> property is set to true.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.EmptyArea">
            <summary>
            Style used to render the area of the grid where there are no cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.SelectedColumnHeader">
            <summary>
            Style used to render selected column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.SelectedRowHeader">
            <summary>
            Style used to render selected row headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.GrandTotal">
            <summary>
            Style automatically assigned to grand total nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal0">
            <summary>
            Style automatically assigned to level-0 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal1">
            <summary>
            Style automatically assigned to level-1 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal2">
            <summary>
            Style automatically assigned to level-2 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal3">
            <summary>
            Style automatically assigned to level-3 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal4">
            <summary>
            Style automatically assigned to level-4 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.Subtotal5">
            <summary>
            Style automatically assigned to level-5 nodes created with the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Subtotal(C1.Win.C1FlexGrid.AggregateEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.FilterEditor">
            <summary>
            Style used to paint the filter editors.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.CellStyleEnum.FirstCustomStyle">
            <summary>
            Constant that indicates the first custom style.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.TextAlignEnum">
            <summary>
            Specifies how text is aligned in a grid cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.LeftTop">
            <summary>
            Text is horizontally aligned to the left and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter">
            <summary>
            Text is horizontally aligned to the left and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom">
            <summary>
            Text is horizontally aligned to the left and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.CenterTop">
            <summary>
            Text is horizontally aligned to the center and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter">
            <summary>
            Text is horizontally aligned to the center and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.CenterBottom">
            <summary>
            Text is horizontally aligned to the center and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.RightTop">
            <summary>
            Text is horizontally aligned to the right and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.RightCenter">
            <summary>
            Text is horizontally aligned to the right and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.RightBottom">
            <summary>
            Text is horizontally aligned to the right and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.GeneralTop">
            <summary>
            Numbers are aligned to the right, other values to the left, and vertically aligned to the top.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.GeneralCenter">
            <summary>
            Numbers are aligned to the right, other values to the left, and vertically aligned to the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextAlignEnum.GeneralBottom">
            <summary>
            Numbers are aligned to the right, other values to the left, and vertically aligned to the bottom.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.TextEffectEnum">
            <summary>
            Specifies a 3D effect to use when rendering cell text.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextEffectEnum.Flat">
            <summary>
            No 3D effect.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextEffectEnum.Raised">
            <summary>
            Text is drawn with a shadow offset by one pixel to the right and below the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextEffectEnum.Inset">
            <summary>
            Text is drawn with a shadow offset by one pixel to the left and above the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.ImageAlignEnum">
            <summary>
            Specifies how images are aligns in grid cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.LeftTop">
            <summary>
            Image is horizontally aligned to the left and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.LeftCenter">
            <summary>
            Image is horizontally aligned to the left and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.LeftBottom">
            <summary>
            Image is horizontally aligned to the left and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.CenterTop">
            <summary>
            Image is horizontally aligned to the center and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.CenterCenter">
            <summary>
            Image is horizontally aligned to the center and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.CenterBottom">
            <summary>
            Image is horizontally aligned to the center and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.RightTop">
            <summary>
            Image is horizontally aligned to the right and vertically aligned to the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.RightCenter">
            <summary>
            Image is horizontally aligned to the right and vertically aligned to the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.RightBottom">
            <summary>
            Image is horizontally aligned to the right and vertically aligned to the bottom of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.Scale">
            <summary>
            Image is scaled to fit the maximum area within the cell while preserving the original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.Stretch">
            <summary>
            Image is stretched to cover the whole cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.Tile">
            <summary>
            Image is tiled to cover the whole cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.Hide">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.ImageAlignEnum.TileStretch">
            <summary>
            Image is split into a grid, corner parts are copied and center is stretched to cover the cell.
            </summary>
            <remarks>
            This tiling mode preserves the corners and borders of the source image, and is designed to be
            used with the <see cref="P:C1.Win.C1FlexGrid.CellStyle.BackgroundImageLayout"/> property.
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.DisplayEnum">
            <summary>
            Specifies whether a style should display the cell text, image, both, or none.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DisplayEnum.TextOnly">
            <summary>
            Display text only (no image).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DisplayEnum.ImageOnly">
            <summary>
            Display image only (no text).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DisplayEnum.Overlay">
            <summary>
            Display the text over the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DisplayEnum.Stack">
            <summary>
            Display the text next to the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.DisplayEnum.None">
            <summary>
            Nothing (cell stays blank).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.TextDirectionEnum">
            <summary>
            Specifies the direction to use when rendering text in a grid cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextDirectionEnum.Normal">
            <summary>
            Text is rendered in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextDirectionEnum.Up">
            <summary>
            Text is rendered from the bottom of the cell to the top.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TextDirectionEnum.Down">
            <summary>
            Text is rendered from the top of the cell to the bottom.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.BorderStyleEnum">
            <summary>
            Specifies the type of cell border to display.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Flat">
            <summary>
            Solid flat border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Double">
            <summary>
            Double border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Raised">
            <summary>
            Raised border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Inset">
            <summary>
            Inset border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Groove">
            <summary>
            Groove border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Fillet">
            <summary>
            Fillet border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderStyleEnum.Dotted">
            <summary>
            Dotted border.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.BorderDirEnum">
            <summary>
            Specifies the direction of cell borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderDirEnum.Both">
            <summary>
            Draw cell borders in both directions.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderDirEnum.Horizontal">
            <summary>
            Draw cell borders only in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.BorderDirEnum.Vertical">
            <summary>
            Draw cell borders only in the vertical direction.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.StyleElementFlags">
            <summary>
            Contains flags that specify which style elements are defined in a <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object.
            </summary>
            <remarks>
            <para>This enumeration can be used to inspect styles and determine which elements it defines, and it 
            can also be used to clear specific elements from the style.</para>
            <para>Any elements not defined in the style are inherited from the parent style.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.None">
            <summary>
            No elements are defined.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Font">
            <summary>
            The style defines a font.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.BackColor">
            <summary>
            The style defines a background color.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.ForeColor">
            <summary>
            The style defines a foreground color.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Margins">
            <summary>
            The style defines margins.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Border">
            <summary>
            The style defines borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.TextAlign">
            <summary>
            The style defines the text alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.TextEffect">
            <summary>
            The style defines a 3D effect for the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.ImageAlign">
            <summary>
            The style defines the image alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.ImageSpacing">
            <summary>
            The style defines the spacing between images and text.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Trimming">
            <summary>
            The style defines how long strings are trimmed to fit within cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.WordWrap">
            <summary>
            The style defines whether long strings are allowed to wrap within cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Display">
            <summary>
            The style defines whether to display text and/or images, in the cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Format">
            <summary>
            The style defines a format string used to convert data into strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.EditMask">
            <summary>
            The style defines an edit mask used to constrain values entered in the cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.ComboList">
            <summary>
            The style defines a list of choices used to populate drop down editors.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.ImageMap">
            <summary>
            The style defines an <see cref="T:System.Collections.IDictionary"/> used to associate cell data with images.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.DataType">
            <summary>
            The style defines the <see cref="T:System.Type"/> of values contained in the cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.DataMap">
            <summary>
            The style defines an <see cref="T:System.Collections.IDictionary"/> used to associate cell data with display values.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.TextDirection">
            <summary>
            The style defines whether text should be rendered horizontally or vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.Editor">
            <summary>
            The style defines an external control to be used as an editor for the cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.UserData">
            <summary>
            The style contains arbitrary user data (not used by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.BackgroundImage">
            <summary>
            The style specifies a background image.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.BackgroundImageLayout">
            <summary>
            The style specifies a background image alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.StyleElementFlags.All">
            <summary>
            All style elements.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellStyleCollection">
            <summary>
            Collection of <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects defined for a grid. 
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.#ctor(System.String)">
            <summary>
            This method is obsolete, still provided only for compatibility with old projects.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Add(System.String,C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Adds a new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object to the collection.
            </summary>
            <param name="name">Name of the new style.</param>
            <param name="basedOn">Base style, used to initialize the properties of the new style.</param>
            <returns>The new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object.</returns>
            <remarks>
            If a style with the given name already exists, the existing style is returned and no 
            exception is thrown. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Add(System.String,System.String)">
            <summary>
            Adds new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object to the collection.
            </summary>
            <param name="name">Name of the new style.</param>
            <param name="basedOn">Name of the base style, used to initialize the properties of the new style.</param>
            <returns>The new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Add(System.String)">
            <summary>
            Adds a new empty <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object to the collection.
            </summary>
            <param name="name">Name of the new style.</param>
            <returns>The new <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Remove(System.Int32)">
            <summary>
            Removes a custom style from the collection.
            </summary>
            <param name="index">Index of the style to be removed.</param>
            <remarks>
            Built-in styles can't be removed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Remove(System.String)">
            <summary>
            Removes a custom style from the collection.
            </summary>
            <param name="name">Name of the style to be removed.</param>
            <remarks>
            Built-in styles can't be removed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Remove(C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Removes a custom style from the collection.
            </summary>
            <param name="style">Style to be removed from the collection.</param>
            <remarks>
            Built-in styles can't be removed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Clear">
            <summary>
            Clear all styles (even those in use) and reset the built-in styles.
            </summary>
            <remarks>
            The <b>Clear</b> method also removes any custom styles assigned to rows, columns, 
            and cells.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.ClearUnused">
            <summary>
            Clear all unused styles. 
            </summary>
            <remarks>
            Unused styles are unnamed styles that were created and are no longer assigned to
            any grid elements.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.Contains(System.String)">
            <summary>
            Checks whether the collection contains a given style.
            </summary>
            <param name="name">Name of the style to look for.</param>
            <returns>True if the collection contains a style called <paramref name="name"/>, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.IndexOf(C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Gets the index of a style in the collection.
            </summary>
            <param name="style">Style object to look for.</param>
            <returns>Index of the style in the collection, or -1 if the style is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.BuildString(System.Boolean)">
            <summary>
            Builds and returns a compact string representation of the style collection.
            </summary>
            <param name="includeEmpty">Whether styles with no attributes should be included.</param>
            <returns>A compact string representation of the style collection.</returns>
            <remarks>
            <para>This method is used internally to implement design-time persistence.</para>
            <para>It can also be used for implementing 'skins', by saving the current styles into
            a collection and later applying them to the grid using the <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.ParseString(System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyleCollection.ParseString(System.String)">
            <summary>
            Parses a string containing style definitions.
            </summary>
            <param name="styleDef">String containing style definitions.</param>
            <returns>True if the string was parsed successfully, false otherwise.</returns>
            <remarks>
            <para>The style definition string is usually obtained from a call to <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.BuildString(System.Boolean)"/> method.</para>
            <para>The new definitions are merged with the current ones. To completely replace the styles, 
            call the <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.Clear"/> method before parsing the new styles.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal">
            <summary>
            Gets the default style used to paint scrollable cells.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Alternate">
            <summary>
            Gets the style used to paint scrollable cells in alternate rows.
            </summary>
            <remarks>
            This style is empty by default, so all scrollable cells are rendered using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Fixed">
            <summary>
            Gets the style used to paint fixed cells.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.SelectedColumnHeader">
            <summary>
            Gets the style used to paint selected column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.SelectedRowHeader">
            <summary>
            Gets the style used to paint selected column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Highlight">
            <summary>
            Gets the style used to paint highlighted selected cells.
            </summary>
            <remarks>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.HighLight"/> property to determine whether cells should be 
            highlighted when the control does not have the focus.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.SelectionMode"/> property to determine what types of selection
            are allowed.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Focus">
            <summary>
            Gets the style used to paint the current cell when the control has focus.
            </summary>
            <remarks>
            This style is empty by default, so focused cells are rendered using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Editor">
            <summary>
            Gets the style used to paint the cell being edited.
            </summary>
            <remarks>
            This style is empty by default, so cells being edited are rendered using the <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Focus"/> style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Search">
            <summary>
            Gets the style used to paint the cell selected while auto-searching.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AutoSearch"/> property to enable auto-searching.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Frozen">
            <summary>
            Gets the style used to paint frozen cells (frozen cells are editable and selectable, but not scrollable). 
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.NewRow">
            <summary>
            Gets the style used to paint cells in the new row template at the bottom of the grid.
            </summary>
            <remarks>
            The new row template is only present when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowAddNew"/> property is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.EmptyArea">
            <summary>
            Gets the style used to paint the area of the grid below and to the right of all the cells.
            </summary>
            <remarks>
            <para>Only the <see cref="P:C1.Win.C1FlexGrid.CellStyle.BackColor"/> and <see cref="P:C1.Win.C1FlexGrid.CellStyle.Border"/> elements of 
            this style are used. They define the appearance of the space between the last cell and the edges of 
            the control.</para>
            <para>The <see cref="P:C1.Win.C1FlexGrid.CellBorder.Color"/> value defines the color of the lines drawn around the 
            edge of the sheet and between frozen and scrollable cells.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.FilterEditor">
            <summary>
            Gets the style used to paint the column filter editors.
            </summary>
            <remarks>
            This style is only used if the grid's <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.AllowFiltering"/> property 
            is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> by index.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Item(C1.Win.C1FlexGrid.CellStyleEnum)">
            <summary>
            Gets a built-in <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> by style type.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> by name.
            </summary>
            <remarks>
            If the specified name doesn't exist, this indexer returns null.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyleCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects in the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellStyleEnumerator">
            <summary>
            CellStyleEnumerator: Enumerator that returns CellStyle objects 
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellStyle">
            <summary>
            The <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> class encapsulates properties that control the appearance of grid cells. 
            This information includes the background and foreground colors, font, text and image alignment, etc.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Styles"/> property exposes a collection of grid styles, and has 
            methods for creating and removing styles from the grid.</para>
            <para>You can create and define styles at design time, but right-clicking the grid and selecting the
            "Edit Styles" menu option.</para>
            <para>Styles follow a hierarchical model similar to styles in Microsoft Word or in cascading style sheets. 
            Every property in a <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object may be left unassigned, in which case the value is 
            inherited from a parent style. The parent style is usually the built-in <see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/> 
            style.</para>
            <para>To determine which elements are defined in a particular style, use the <see cref="P:C1.Win.C1FlexGrid.CellStyle.DefinedElements"/> 
            property.</para>
            <para>When you modify the properties of a <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> object, all cells that use that style 
            are automatically repainted to reflect the changes.</para>
            <para>Styles may be assigned to <see cref="T:C1.Win.C1FlexGrid.CellRange"/>, <see cref="T:C1.Win.C1FlexGrid.Row"/>, and <see cref="T:C1.Win.C1FlexGrid.Column"/> 
            objects, as shown in the example below.</para>
            </remarks>
            <example>
            The example below creates three <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects and assigns them to grid rows, columns,
            and cell ranges.
            <code>
            // create style with red background
            CellStyle cs = _flex.Styles.Add("red");
            Style.BackColor = Color.Red;
            
            // create style with green background
            cs = _flex.Styles.Add("green");
            Style.BackColor = Color.Green;
            
            // create style with bold font
            cs = _flex.Styles.Add("bold");
            Style.Font = new Font("Tahoma", 8, FontStyle.Bold);
            
            // assign red style to a column
            _flex.Cols[3].Style = _flex.Styles["red"];
            
            // assign green style to a row
            _flex.Rows[3].Style = _flex.Styles["green"];
            
            // assign bold style to a cell range
            CellRange rg = _flex.GetCellRange(2, 2, 4, 4);
            rg.Style = _flex.Styles["bold"];
            </code>
            <para>After running this code, the third column of the grid will be painted with a red background. The 
            third row will be painted with a green background. The cell at the intersection will be painted
            in red, because column styles have priority over row styles. The remaining style elements for these
            cells (font, alignment, etc) are not defined in the new styles and are automatically inherited from 
            the parent style (<see cref="P:C1.Win.C1FlexGrid.CellStyleCollection.Normal"/>).</para>
            <para>The cells around the intersection will have a bold font. The style that defines the bold font
            does not specify a background color, so that element is inherited from the parent style, which may be
            the "red", "green", or "normal" styles.</para>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Clone">
            <summary>
            Creates a clone of this <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Clear(C1.Win.C1FlexGrid.StyleElementFlags)">
            <summary>
            Clears selected elements from this style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Clear">
            <summary>
            Clears all elements in this style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.MergeWith(C1.Win.C1FlexGrid.CellStyle)">
            <summary>
            Copies all elements defined in a source style to this style.
            </summary>
            <remarks>
            This method is used to create styles preserving existing style elements
            such as <see cref="P:C1.Win.C1FlexGrid.CellStyle.DataType"/> or <see cref="P:C1.Win.C1FlexGrid.CellStyle.Format"/>.
            </remarks>
            <example>
            The code below changes a column so it looks like a fixed column, without
            modifying the column's data type, alignment, etc.
            <code>
            // create a new style
            CellStyle cs = _flex.Styles.Add("newStyle");
            
            // set data type, alignment
            cs.DataType = typeof(int);
            cs.TextAlign = TextAlignEnum.CenterCenter;
            
            // copy remaining elements from "Fixed" style
            cs.MergeWith(_flex.Styles.Fixed);
            
            // assign new style to grid column
            _flex.Cols[col].Style = cs;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.BuildString">
            <summary>
            Returns a compact string representation of this <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>.
            </summary>
            <returns>A string containing the settings of all style elements defined in this <b>CellStyle</b>.</returns>
            <remarks>
            <para>This method is used to persist grid styles and can be used to define and save 'skins'.</para>
            <para>See the <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.BuildString(System.Boolean)"/> and <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.ParseString(System.String)"/>
            methods.</para>
            <para>The string returned contains definitions only for the style elements that are defined by this
            <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>. Elements inherited from other styles are not included. To build a string containing
            specific elements, use the <see cref="M:C1.Win.C1FlexGrid.CellStyle.BuildString(C1.Win.C1FlexGrid.StyleElementFlags)"/> method instead.</para>
            </remarks>
            <example>
            The code below creates a style with a custom font and background color and builds a string that represents
            the new style. Then it uses the string to initialize a second style.
            <code>
            // create style with custom font and back color
            CellStyle cs = _flex.Styles.Add("s1");
            cs.Font = new Font("Arial", 12, FontStyle.Bold);
            cs.BackColor = Color.Beige;
            
            // save style definition into a string
            string styleDef = cs.BuildString();
            
            // use string to initialize another style
            CellStyle csNew = _flex.Styles.Add("s2");
            csNew.ParseString(styleDef);
            
            // compare styles
            Debug.Assert(csNew.Font.Equals(cs.Font));
            Debug.Assert(csNew.BackColor.Equals(cs.BackColor));
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.BuildString(C1.Win.C1FlexGrid.StyleElementFlags)">
            <summary>
            Returns a string representation of this <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>.
            </summary>
            <param name="elements"><see cref="T:C1.Win.C1FlexGrid.StyleElementFlags"/> that specifies which style elements should be included in the string.</param>
            <returns>A string containing the settings of the specified style elements.</returns>
            <remarks>
            <para>This method is used to persist grid styles and can be used to define and save 'skins'.</para>
            <para>See the <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.BuildString(System.Boolean)"/> and <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.ParseString(System.String)"/>
            methods.</para>
            </remarks>
            <example>
            The code below shows the effect of specifying different values for the <paramref name="elements"/> parameter. It builds
            one compact string containing only the elements actually defined in a style, and another including all style elements.
            <code>
            // build compact and a long style definition strings
            string s1 = _flex.Styles.Fixed.BuildString();
            string s2 = _flex.Styles.Fixed.BuildString(StyleElementFlags.All);
            
            // show both style definitions
            Console.WriteLine("{0}: {1}", s1.Length, s1);
            Console.WriteLine("{0}: {1}", s2.Length, s2);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.ParseString(System.String)">
            <summary>
            Rebuilds this style based on a description contained in a string.
            </summary>
            <returns>True if the string was successfully parsed, false otherwise.</returns>
            <remarks>
            <para>This method is used to persist grid styles and can be used to define and save 'skins'.</para>
            <para>See the <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.BuildString(System.Boolean)"/> and <see cref="M:C1.Win.C1FlexGrid.CellStyleCollection.ParseString(System.String)"/>
            methods.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Image,C1.Win.C1FlexGrid.DrawCellFlags)">
            <summary>
            Renders a string and an image into a <see cref="T:System.Drawing.Graphics"/> object using this style.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="rc">Area where the element will be displayed.</param>
            <param name="str">Text to render.</param>
            <param name="img">Image to render.</param>
            <param name="flags">Combination of <see cref="T:C1.Win.C1FlexGrid.DrawCellFlags"/> that determines which elements will be rendered.</param>
            <remarks>
            This method allows using <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects to render objects outside the grid. It can be
            useful when implementing owner-drawn applications and style editors for example.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Renders a string and an image into a <see cref="T:System.Drawing.Graphics"/> object using this style.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="rc">Area where the element will be displayed.</param>
            <param name="str">Text to render.</param>
            <param name="img">Image to render.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Renders a string and an image into a <see cref="T:System.Drawing.Graphics"/> object using this style.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="rc">Area where the element will be displayed.</param>
            <param name="str">Text to render.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Renders a string and an image into a <see cref="T:System.Drawing.Graphics"/> object using this style.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="rc">Area where the element will be displayed.</param>
            <param name="img">Image to render.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.GetContentRectangle(System.Drawing.Rectangle)">
            <summary>
            Gets the content portion of a cell's rectangle.
            </summary>
            <param name="rc">Cell rectangle.</param>
            <returns>A rectangle that represents the content portion of a cell, discounting the 
            area taken up by the cell borders.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.GetTextRectangle(System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Gets the text portion of a cell's rectangle.
            </summary>
            <param name="rc">Cell rectangle.</param>
            <param name="img">Image that shares the cell space with the text.</param>
            <returns>A rectangle that represents the text portion of a cell, discounting the 
            area taken up by the cell borders, padding, and images.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.GetImageRectangle(System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Gets the image portion of a cell's rectangle.
            </summary>
            <param name="rc">Cell rectangle.</param>
            <param name="img">Image to be displayed on the cell.</param>
            <returns>A rectangle that represents the image portion of a cell, discounting the 
            area taken up by the cell borders and padding.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects are equal.
            </summary>
            <param name="o">Style to compare with this style.</param>
            <returns>True if the two styles are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.CellStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the style instance.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Name">
            <summary>
            Gets or sets the style name.
            </summary>
            <remarks>
            <para>Style names must be unique. Setting a style name to the name of an already existing
            style will throw an exception.</para>
            <para>Style names must have one or more characters and may not include curly braces ('{' and '}').</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.BackColor">
            <summary>
            Gets or sets the color used to paint the cell background.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.ForeColor">
            <summary>
            Gets or sets the color of the text in the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Font">
            <summary>
            Gets or sets the font used to paint text in the cell.
            </summary>
            <remarks>
            Setting the control's <b>Font</b> property automatically sets the <b>Font</b> 
            property of the <b>Normal</b> style.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Margins">
            <summary>
             Gets or sets the margins between the edges of the cell and its contents, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.WordWrap">
            <summary>
            Gets or sets whether long strings should automatically wrap within the cell.
            </summary>
            <remarks>
            <para>This property determines whether the grid should automatically break 
            long strings that contain spaces and display them in multiple lines.</para>
            <para>String that contain hard line breaks (vbCrLf or "\n\r") are always
            displayed in multiple lines.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Trimming">
            <summary>
            Gets or sets how long strings are trimmed to fit the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.TextAlign">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.TextEffect">
            <summary>
            Gets or sets the 3D effect used to paint text.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.TextDirection">
            <summary>
            Gets or sets the text direction.
            </summary>
            <remarks>
            Cells containing vertical text can wrap and be auto sized as usual.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.ImageAlign">
            <summary>
            Gets or sets the image alignment.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.ImageSpacing">
            <summary>
            Gets or sets the space between images and text in a cell, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Display">
            <summary>
            Gets or sets whether to show images, text, or both.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Format">
            <summary>
            Gets or sets the format string used to display values.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.EditMask">
            <summary>
            Gets or sets the mask string used to edit values.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.ComboList">
            <summary>
            Gets or sets a pipe-delimited list of valid values.
            </summary>
            <remarks>
            <para>If the cell is editable, this list of values is used to populate the drop-down
            <see cref="T:System.Windows.Forms.ComboBox"/> used to edit the cell.</para>
            <para>If the list starts with a pipe character, then the list is not exclusive and the
            user may type values that are not on the list.</para>
            <para>If the list contains three periods ("..."), then a button is displayed in the
            cell. When the user presses the button, the grid fires the <see cref="E:C1.Win.C1FlexGrid.C1FlexGridBase.CellButtonClick"/> 
            event.</para>
            <para>If the list contains a pipe followed by three periods ("|..."), then a button is 
            displayed in the cell as before, and the user may also type into the cell.</para>
            <para>See also the <see cref="P:C1.Win.C1FlexGrid.CellStyle.DataMap"/> property for an alternate way of specifying
            valid values for a cell.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.ImageMap">
            <summary>
            Gets or sets an <see cref="T:System.Collections.IDictionary"/> used to associate cell values with images.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.DataMap">
            <summary>
            Gets or sets an <see cref="T:System.Collections.IDictionary"/> used to associate cell values with display values.
            </summary>
            <remarks>
            <para>If the cell is editable, this list of values is used to populate the drop-down
            <see cref="T:System.Windows.Forms.ComboBox"/> used to edit the cell. In this case, the order of the items in the
            combo list is determined by the order of the elements in the dictionary.</para>
            <para>The most common dictionary class, <see cref="T:System.Collections.Hashtable"/>, uses arbitrary order. 
            If you want control over the item order, use a different dictionary class such as
            <see cref="T:System.Collections.Specialized.ListDictionary"/>.</para>
            <para>The C1FlexGrid assembly also includes a <see cref="T:C1.Win.C1FlexGrid.MultiColumnDictionary"/> class, 
            which can be used to create multi-column and data-bound dictionaries.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.DataType">
            <summary>
            Gets or sets the data type for the style.
            </summary>
            <remarks>
            <para>When the grid is bound to a data source, this property is set automatically based on the 
            data schema.</para>
            <para>This property is used to coerce values assigned to cells into the proper type.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Border">
            <summary>
            Gets the CellBorder object associated with this style.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.Editor">
            <summary>
            Gets or sets the custom editor used to edit cells that have this style.
            </summary>
            <remarks>
            <para>The grid provides several built-in editors that are automatically 
            selected based on the properties of the cell being edited.</para>
            <para>This property allows you to use external editors when editing values 
            that have a given <see cref="T:C1.Win.C1FlexGrid.CellStyle"/>. Any control can be used as an 
            external editor, but to achieve complete integration with the grid, the 
            external editor should implement the <see cref="T:C1.Win.C1FlexGrid.IC1EmbeddedEditor"/> interface.</para>
            <para>For details, see the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Editor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.UserData">
            <summary>
            Gets or sets arbitrary user data associated with this style.
            </summary>
            <remarks>
            This data is not used by the control, and can be used to store any data that is 
            useful to the application.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.BackgroundImage">
            <summary>
            Gets or sets the style's background image.
            </summary>
            <remarks>
            <para>This property works with <see cref="P:C1.Win.C1FlexGrid.CellStyle.BackgroundImageLayout"/> to determine
            whether and how background images are rendered in cells.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.BackgroundImageLayout">
            <summary>
            Gets or sets the a value that determines how the style will scale and 
            position background image.
            </summary>
            <remarks>
            <para>This property works with <see cref="P:C1.Win.C1FlexGrid.CellStyle.BackgroundImage"/> to determine
            whether and how background images are rendered in cells.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.DefinedElements">
            <summary>
            Gets or sets which elements are defined in this style.
            </summary>
            <remarks>
            Elements that are not defined in a particular style are automatically 
            inherited from the ancestor style (usually the <b>Normal</b> style). 
            For example, if you create a custom style that defines the 
            <see cref="P:C1.Win.C1FlexGrid.CellStyle.Font"/> property, all other elements (back color, 
            alignment, and so on) are inherited from the ancestor style, which may
            be the <b>Normal</b> style or another custom style assigned to a row or
            column.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellStyle.StringFormat">
            <summary>
            Gets the <see cref="P:C1.Win.C1FlexGrid.CellStyle.StringFormat"/> element used for rendering
            strings when the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.UseCompatibleTextRendering"/> 
            property is set to true.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.CellBorder">
            <summary>
            The <see cref="T:C1.Win.C1FlexGrid.CellBorder"/> class encapsulates properties that control the appearance of borders in 
            <see cref="T:C1.Win.C1FlexGrid.CellStyle"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellBorder.Style">
            <summary>
            Gets or sets the border style.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellBorder.Direction">
            <summary>
            Gets or sets the border direction.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellBorder.Color">
            <summary>
            Gets or sets the border color (except for 3D borders).
            </summary>
            <remarks>
            3D borders are always drawn using the system colors defined for highlights and shadows.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.CellBorder.Width">
            <summary>
            Gets or sets the border width (except for 3D borders).
            </summary>
            <remarks>
            3D borders are always one or two pixels wide.
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.Border">
            <summary>
            Border is a basic border object, used by StyleContext for rendering
            and measuring elements.
            It provides a solid border with a single color and arbitrary widths 
            on each side.
            Border is designed to be extended so you can implement more complex
            borders (3D, pen-based, compound, etc.)
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderCompound">
            <summary>
            BorderCompound combines two borders. These may in turn be compound,
            so we get a lot of flexibility (got this idea from Java).
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridTally">
            <summary>
            Summary description for GridTally.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.TreeStyleFlags">
            <summary>
            Specifies the appearance of the outline tree.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.None">
            <summary>
            Do not show the outline tree.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.Lines">
            <summary>
            Show tree lines next to node rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols">
            <summary>
            Show expand/collapse symbols on node rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.ButtonBar">
            <summary>
            Show outline buttons across the top fixed row.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.Leaf">
            <summary>
            Show tree lines next to all rows (nodes and data).
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.Complete">
            <summary>
            Combination of <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Lines"/>, <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols"/>, and
            <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.ButtonBar"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.Simple">
            <summary>
            Combination of <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Lines"/> and <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.CompleteLeaf">
            <summary>
            Combination of <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Lines"/>, <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols"/>, 
            <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.ButtonBar"/> and <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Leaf"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.TreeStyleFlags.SimpleLeaf">
            <summary>
            Combination of <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Lines"/>, <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Symbols"/>, and
            <see cref="F:C1.Win.C1FlexGrid.TreeStyleFlags.Leaf"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridTree">
            <summary>
            The GridTree class encapsulates properties that specify the appearance, position, and behavior of the outline tree.
            </summary>
            <remarks>
            Each grid has a single GridTree object, which can be obtained using the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridTree.Clear">
            <summary>
            Resets the <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Tree"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridTree.Show(System.Int32)">
            <summary>
            Expands all nodes up to the specified level, collapses others.
            </summary>
            <param name="level">The level to show. Any nodes with <see cref="P:C1.Win.C1FlexGrid.Node.Level"/> higher than this 
            will be collapsed, others will be expanded.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridTree.Sort(System.Int32,C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)">
            <summary>
            Sorts all nodes at the given level.
            </summary>
            <param name="level">Level of the nodes to sort.</param>
            <param name="order"><see cref="T:C1.Win.C1FlexGrid.SortFlags"/> value that controls sort direction and options.</param>
            <param name="col1">Start of the range of columns to sort.</param>
            <param name="col2">End of the range of columns to sort.</param>
            <remarks>
            <para>The grid recognizes two types of row: regular rows which contain data, and node rows which are used
            to group data. This method only sorts the row nodes; it does not reorder the data rows within each node.</para>
            <para>To sort the data rows, use the grid's <see cref="M:C1.Win.C1FlexGrid.C1FlexGridBase.Sort(C1.Win.C1FlexGrid.SortFlags,System.Int32)"/> method instead.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridTree.Sort(System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts all nodes at the given level using the specified comparer.
            </summary>
            <param name="level">Level of the nodes to sort.</param>
            <param name="comparer">An <see cref="T:System.Collections.IComparer"/> object that compares <see cref="T:C1.Win.C1FlexGrid.Node"/> objects.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.LineColor">
            <summary>
            Gets or sets the color of the lines in the outline tree.
            </summary>
            <remarks>
            See also the <see cref="P:C1.Win.C1FlexGrid.GridTree.Style"/> property.
            </remarks> 
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.LineStyle">
            <summary>
            Gets or sets the line style used to draw the outline tree.
            </summary>
            <remarks>
            By default, this property is set to <b>DashStyle.Dot</b>, which causes the tree 
            to be drawn with dotted lines. You can change the value of this property to draw the
            tree using solid lines instead.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.Style">
            <summary>
            Gets or sets the style of the outline tree.
            </summary>
            <remarks>
            <para>Use the Style property to determine whether the outline tree should include lines connecting 
            the nodes and buttons for collapsing and expanding the nodes. See the <see cref="T:C1.Win.C1FlexGrid.TreeStyleFlags"/> 
            enumeration for details.</para>
            <para>Use the <see cref="P:C1.Win.C1FlexGrid.GridTree.Column"/> property to determine where the grid will show the outline tree.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.Column">
            <summary>
            Gets or sets the index of the column where the outline tree is displayed.
            </summary>
            <remarks>By default, this property is set to -1, which causes the tree to be hidden.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.Indent">
            <summary>
            Gets or sets the indentation, in pixels, of each tree level.
            </summary>
            <remarks>
            If you set the Indent property to a value that is too narrow to fit the <see cref="P:C1.Win.C1FlexGrid.GridTree.NodeImageCollapsed"/> and
            <see cref="P:C1.Win.C1FlexGrid.GridTree.NodeImageExpanded"/> images, the grid will adjust it to fit the images.</remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.NodeImageCollapsed">
            <summary>
            Gets or sets the image displayed next to collapsed nodes.
            </summary>
            <remarks>
            <para>Setting this property to null resets it and causes the grid to use the default image (a plus sign).</para>
            <para>To hide the images, use the <see cref="P:C1.Win.C1FlexGrid.GridTree.Style"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.NodeImageExpanded">
            <summary>
            Gets or sets the image displayed next to expanded nodes.
            </summary>
            <remarks>
            <para>Setting this property to null resets it and causes the grid to use the default image (a minus sign).</para>
            <para>To hide the images, use the <see cref="P:C1.Win.C1FlexGrid.GridTree.Style"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridTree.MaximumLevel">
            <summary>
            Gets the level of the deepest node in the outline.
            </summary>
            <remarks>
            This property can be used with methods that take an outline level as
            a parameter (for example, <see cref="M:C1.Win.C1FlexGrid.GridTree.Sort(System.Int32,C1.Win.C1FlexGrid.SortFlags,System.Int32,System.Int32)"/> and <see cref="M:C1.Win.C1FlexGrid.GridTree.Show(System.Int32)"/>).
            </remarks>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridXmlSerializer">
            <summary>
            Saves and Loads a C1FlexGrid to xml.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.Language">
            <summary>
            Specifies the language to be used for localizing the control.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Default">
            <summary>
            Localize the control to the language specified by the CurrentUICulture.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Arabic">
            <summary>
            Localize the control to Arabic.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Czech">
            <summary>
            Localize the control to Czech.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Danish">
            <summary>
            Localize the control to Danish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Dutch">
            <summary>
            Localize the control to Dutch.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.English">
            <summary>
            Localize the control to English.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Finnish">
            <summary>
            Localize the control to Finnish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.French">
            <summary>
            Localize the control to French.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.German">
            <summary>
            Localize the control to German.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Greek">
            <summary>
            Localize the control to Greek.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Hebrew">
            <summary>
            Localize the control to Hebrew.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Italian">
            <summary>
            Localize the control to Italian.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Japanese">
            <summary>
            Localize the control to Japanese.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Norwegian">
            <summary>
            Localize the control to Norwegian.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Polish">
            <summary>
            Localize the control to Polish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Portuguese">
            <summary>
            Localize the control to Portuguese.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Russian">
            <summary>
            Localize the control to Russian.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Slovak">
            <summary>
            Localize the control to Slovak.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Spanish">
            <summary>
            Localize the control to Spanish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Swedish">
            <summary>
            Localize the control to Swedish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Chinese">
            <summary>
            Localize the control to Chinese (simplified, PRC and Singapore).
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Turkish">
            <summary>
            Localize the control to Turkish.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Persian">
            <summary>
            Localize the control to Persian (Farsi).
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.Korean">
            <summary>
            Localize the control to Korean.
            </summary>
        </member>
        <member name="F:C1.Util.Localization.Language.ChineseTraditional">
            <summary>
            Localize the control to Chinese (traditional, Taiwan, Hong Kong, and Macao).
            </summary>
        </member>
        <member name="T:C1.Util.Localization.XmlLocalizer">
            <summary>
            Localizer class.
            </summary>
        </member>
        <member name="M:C1.Util.Localization.XmlLocalizer.LocalizeControl(C1.Util.Localization.ICustomLocalizer,System.Windows.Forms.Control)">
            <summary>
            Localizes a given <see cref="T:System.Windows.Forms.Control"/> using resources stored in an xml resource file.
            </summary>
            <param name="control">Control to localize.</param>
            <param name="localizer"><see cref="T:C1.Util.Localization.ICustomLocalizer"/> to use for localization.</param>
            <returns>True if the resources for the given culture were found and the form was localized; false otherwise.</returns>
            <remarks>
            <para>This method expects the localized strings to be stored in an embedded resource.</para>
            <para>The resource name should end with "[form-class-name].Localize.xml", and the schema is as follows:</para>
            <code>
            &lt;form&gt;
              &lt;culture id="en"&gt;
                &lt;control name="C1SpellDialog" text="Spelling" /&gt;
                &lt;control name="_btnAdd" text="&amp;Add" /&gt;
                ...
              &lt;/culture&gt;
              &lt;culture id="es"&gt;
                &lt;control name="C1SpellDialog" text="Ortografia" /&gt;
                &lt;control name="_btnAdd" text="&amp;Anadir" /&gt;
                ...
              &lt;/culture&gt;
              ...
            &lt;form name="C1SpellDialog"&gt;
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Localization.XmlLocalizer.LocalizeControl(C1.Util.Localization.ICustomLocalizer,System.Windows.Forms.Control,System.String)">
            <summary>
            Localizes a given <see cref="T:System.Windows.Forms.Control"/> using resources stored in an xml resource file.
            </summary>
            <param name="localizer"><see cref="T:C1.Util.Localization.ICustomLocalizer"/> to use for localization.</param>
            <param name="control">Control to localize.</param>
            <param name="culture">Two-letter ISO culture name (en, es, de, etc).</param>
            <returns>True if the resources for the given culture were found and the form was localized; false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:C1.Design.ColorPickerControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.ColorPickerControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Design.ColorPickerUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Design.ColorPickerUITypeEditor.FormType">
            <summary>
            Gets or sets the type of the form used as the color picker.
            The form must expose the public property Color Color {get;set;}.
            </summary>
        </member>
        <member name="F:C1.Design.C1FormatStringPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1FormatStringPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1FormatStringPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Design.C1FormatStringPickerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1FormatStringPickerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1FormatStringPickerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Design.C1FormatStringUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1FormatStringUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1FormatStringUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.C1FormatStringUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:C1.Design.C1InputMaskPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1InputMaskPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Design.C1InputMaskPickerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskPickerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1InputMaskPickerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Design.C1InputMaskPickerForm.EditMask">
            <summary>
            Gets or sets the mask
            </summary>
        </member>
        <member name="P:C1.Design.C1InputMaskPickerForm.UpdateWithLiterals">
            <summary>
            Gets or sets a value indicating whether the underlying datasource should be updated with the literals in the mask.
            </summary>
        </member>
        <member name="T:C1.Design.C1InputMaskUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1Excel.FormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.C1Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1Excel.FormulaCollection.Fill(C1.C1Excel.XLSheet)">
            <summary>
            Fill this collection of all formulas of the workbook.
            </summary>
        </member>
        <member name="P:C1.C1Excel.FormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.SharedFormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.C1Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1Excel.SharedFormulaCollection.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of a shared <see cref="T:C1.C1Excel.BiffFormula"/> object in the collection for row and column position.
            </summary>
            <param name="row">The row of a cell with shared formula.</param>
            <param name="col">The column of a cell with shared formula.</param>
            <returns>The index of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.SharedFormulaCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.SharedFormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.TableFormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.C1Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1Excel.TableFormulaCollection.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of a table <see cref="T:C1.C1Excel.BiffFormula"/> object in the collection for row and column position.
            </summary>
            <param name="row">The row of a cell with table formula.</param>
            <param name="col">The column of a cell with table formula.</param>
            <returns>The index of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.TableFormulaCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.TableFormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffFormula">
            <summary>
            BIFF formula support. 
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffFormula.Parser">
            <summary>
            Represents a formula parser from string.
            </summary>
        </member>
        <member name="T:C1.C1Excel.FormulaType">
            <summary>
            The types of formulas.
            </summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.Cell">
            <summary>Call from cell formula.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.Shared">
            <summary>Call from shared cell formula.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.Array">
            <summary>Call from shared array formula.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.ReArray">
            <summary>Call from shared recalculated array formula.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.Table">
            <summary>Call from table formula.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.NamedRange">
            <summary>Call from named range.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaType.DataValidation">
            <summary>Call from data validation.</summary>
        </member>
        <member name="T:C1.C1Excel.FormulaFlags">
            <summary>
            The flags of formulas.
            </summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.RecalcAlways">
            <summary>Formula recalculate always.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.CalcOnOpen">
            <summary>Formula recalculate at open.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.PartShared">
            <summary>Formula part shared.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.Array">
            <summary>Formula is array.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.ArrayShared">
            <summary>Formula array shared.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.DTR">
            <summary>Table column or row input cell.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.DT2D">
            <summary>Table two input cells, otherwise one input cell.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.RowDeleted">
            <summary>Table row is deleted.</summary>
        </member>
        <member name="F:C1.C1Excel.FormulaFlags.ColumnDeleted">
            <summary>Table column is deleted.</summary>
        </member>
        <member name="T:C1.C1Excel.BiffReader">
            <summary>
            Reads a biff record into a memory stream, exposes the record code
            and provides methods like a binary reader so callers can get the
            data, plus methods for reading Excel-specific elements like
            RK numbers and biff strings.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffWriter">
            <summary>
            Writes biff records. call the Open method to start the record,
            then BinaryWriter-like commands to write the record data, which 
            gets cached in a memory stream. call the Close method to write
            the record header (code and data size) plus the actual record 
            data.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordBOF">
            <summary>
            First record in the biff file
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordStyle">
            <summary>
            These are the 6 main Excel styles (Normal, etc), not to be confused with the XF records
            which we call styles and excel calls eXtended Format.
            </summary>
        </member>
        <member name="T:C1.C1Excel.FileFormat">
            <summary>
            Specifies the file format to use when loading or saving workbooks.
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.Biff8">
            <summary>
            Excel 97/2003 format (Binary Interchange File Format revision 8).
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.OpenXml">
            <summary>
            Office 2007/2010 format. (Compressed Xml format).
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.OpenXmlTemplate">
            <summary>
            Office 2007/2010 template format. (Compressed Xml format).
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.Csv">
            <summary>
            Simple Comma-separated values (CSV) format.
            </summary>
        </member>
        <member name="F:C1.C1Excel.CompatibilityMode.Excel2003">
            <summary>
            Sheets may have up to 65,536 rows and 256 columns. Workbooks may have up to 4050 unique cell styles.
            </summary>
        </member>
        <member name="F:C1.C1Excel.CompatibilityMode.Excel2007">
            <summary>
            <para>Sheets may have up to 1,048,576 rows and 18,278 columns. Workbooks may have up to 65,536 unique cell styles.</para>
            <para>Workbooks that exceed the Excel2003 limits must be saved in OpenXml format instead of XLS.</para>
            <para>It may not be possible to open these workbooks with versions earlier than Excel 2007 (C1Excel will still open them correctly).</para>
            </summary>
        </member>
        <member name="F:C1.C1Excel.CompatibilityMode.NoLimits">
            <summary>
            <para>No size limits are enforced.</para>
            <para>It may not be possible to open these workbooks with any version of Excel (C1Excel will still open them correctly).</para>
            </summary>
        </member>
        <member name="F:C1.C1Excel.CalculationMode.Manual">
            <summary>Manual calculation mode for all formulas in the workbook (F9 in MS Excel).</summary>
        </member>
        <member name="F:C1.C1Excel.CalculationMode.Auto">
            <summary>Automatic calculation mode for all formulas in the workbook.</summary>
        </member>
        <member name="F:C1.C1Excel.CalculationMode.AutoNoTable">
            <summary>Automatic no table calculation mode for all formulas in the workbook.</summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.C1XLBook"/> class. The 
            new workbook contains a single empty <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Clear">
            <summary>
            Clears the <see cref="T:C1.C1Excel.C1XLBook"/>, restoring the initial state with a single
            <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
            <remarks>
            The <see cref="M:C1.C1Excel.C1XLBook.Clear"/> method restores the <see cref="T:C1.C1Excel.C1XLBook"/> object
            to its initial state, with a single empty sheet called "Sheet1" and the 
            <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> set to 10pt Arial.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <remarks>
            <para>Component One Excel infers the file format automatically based on the 
            file name extension. "XLSX" and "ZIP" files are loaded as OpenXml; all 
            others are loaded as Biff8 files ("xls").</para>
            <para>If the file doesn't exist, is locked, or is not a valid Excel 
            file, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,C1.C1Excel.FileFormat)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,C1.C1Excel.FileFormat,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <remarks>
            <para>The format used to save the file is automatically determined by the 
            file name extension. "Xlsx" and "zip" files are saved as OpenXml; all others 
            are saved as Biff8 files ("xls").</para>
            <para>If the file can't be created, an exception is thrown. 
            This typically indicates that the file is currently open by another 
            application (such as Microsoft Excel).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String,C1.C1Excel.FileFormat)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the type of file to save.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,C1.C1Excel.FileFormat)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <remarks>
            Loading the worksheets without their data is much faster than loading the entire workbook.
            This is useful in situations where you want to examine the contents of the file (for example, 
            to ensure that you will not overwrite an existing sheet).
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,C1.C1Excel.FileFormat,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets"><b>True</b> to load data into the sheets; <b>False</b> to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.IO.Stream)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <remarks>
            This method allows saving the workbook directly into streams without using 
            temporary files. Typical uses include saving books to web page response streams
            or mail attachment streams.
            </remarks>
            <example>
            The code below saves a <see cref="T:C1.C1Excel.C1XLBook"/> into a <see cref="T:System.IO.MemoryStream"/>, clears
            the book, then loads it back from the same stream.
            <code>
            // save book into new MemoryStream
            MemoryStream ms = new MemoryStream();
            _book.Save(ms);
            
            // clear book
            _book.Clear();
            
            // load it back from the MemoryStream
            ms.Position = 0;
            _book.Load(ms);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.IO.Stream,C1.C1Excel.FileFormat)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <param name="format"><see cref="P:C1.C1Excel.C1XLBook.FileFormat"/> value that specifies the format to save the worksheet in.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)">
            <summary>
            Converts a pixel measurement into twips (1/20th of a point).
            </summary>
            <param name="pix">Measurement in screen pixels.</param>
            <returns>Measurement in twips.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), a 
            resolution-independent unit. .NET controls, on the other hand, usually 
            express measurements in pixels. This method provides an easy way to 
            convert pixel measurements into twips using the current screen resolution.</para>
            <seealso cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)">
            <summary>
            Converts a twip measurement into screen pixels.
            </summary>
            <param name="twip">Measurement in twips.</param>
            <returns>Measurement in screen pixels.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), 
            a resolution-independent unit. .NET controls, on the other hand, 
            usually express measurements in pixels. This method provides an 
            easy way to convert pixel measurements into twips using the 
            current screen resolution.</para>
            <para><see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/></para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Clone">
            <summary>
            Creates a copy of this C1Excel book.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.C1XLBook"/> object with the same contents and formatting as this book.</returns>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.ApplyPalette(System.Drawing.Color[])">
            <summary>Apply custom palette for workbook styles.</summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.CreateFontHandle(System.Drawing.Font)">
            <summary>
            Creates a handle to a logical font from a Font instance.
            Caller MUST CALL DeleteObject(hfont) to avoid resource leak.
            </summary>
            <param name="font">The font to create.</param>
            <returns>The created font handle.</returns>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Sheets">
            <summary>
            Gets a collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent
            the worksheets in the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            The <see cref="T:C1.C1Excel.XLSheetCollection"/> returned has methods for counting, 
            enumerating, adding and removing sheets from the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.DefaultFont">
            <summary>
            Gets or sets the default font object for the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            <para>You can assign any font to any cell using <see cref="T:C1.C1Excel.XLStyle"/> objects. Cells
            that have no associated custom styles or have styles that do not define
            a custom font are displayed using the book's default font.</para>
            <para>The <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property is initially set to 10 pt Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.KeepFormulas">
            <summary>
            Specifies whether the component should store formulas read from XLS/XLSX files
            and write them back when saving the file.
            </summary>
            <remarks>
            <para>Setting this property to true allows you to load existing XLS/XLSX files, modify the values 
            in some cells, and save the file preserving the formulas. This is the default setting.</para>
            <para>Setting this property to false causes the component to remove the formulas in the book 
            when it is loaded. Saving the file in this case will retain the last calculated values but 
            will remove the formulas.</para>
            <para>Assigning any value to a cell will clear the formula in the cell.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Author">
            <summary>
            Gets or sets the name of the person, company, or application that created this <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.CalculationMode">
            <summary>
            Gets or sets the formula calculation mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.NamedRanges">
            <summary>
            Gets the collection of <see cref="T:C1.C1Excel.XLNamedRange"/> objects for the current workbook.
            </summary>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Palette">
            <summary>
            Gets or sets color palette of this workbook.
            </summary>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.IsLoading">
            <summary>
            Determines whether the workbook is currently loading.
            </summary>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.CompatibilityMode">
            <summary>
            Gets or sets limits on sheet size and the number of styles allowed per workbook.
            </summary>
            <remarks>
            <para>This property allows you to specify which version of Microsoft Excel 
            you want your workbooks to be compatible with.</para>
            <para><b>Excel2003</b> mode allows you to create sheets with up to 65,536 rows and 256 columns.
            <b>Excel2007</b> mode allows you to create sheets with up to 1,048,576 rows and 18,278 columns.</para>
            <para>Note that the XLS file format is limited by the <b>Excel2003</b> limits. If you
            use the <b>Excel2007</b> mode and create large sheets, save them into <b>OpenXml</b> files
            instead of XLS.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.BuiltInFormats">
            <summary>
            Summary description for BuiltInFormats.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShape">
            <summary>
            Represents a shape embedded in an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>Excel sheets may contain many types of embedded shapes, including 
            images, graphical elements, controls, and comments.</para>
            
            <para>The <b>XLShape</b> abstract class contains information that is common
            to all shape types, including the shape's location (<see cref="P:C1.C1Excel.XLShape.Sheet"/>, <see cref="P:C1.C1Excel.XLShape.Row"/>, 
            <see cref="P:C1.C1Excel.XLShape.Column"/>, <see cref="P:C1.C1Excel.XLShape.Rectangle"/>, <see cref="P:C1.C1Excel.XLShape.Rotation"/>),
            the type of border drawn around the shape (<see cref="P:C1.C1Excel.XLShape.LineWidth"/>, <see cref="P:C1.C1Excel.XLShape.LineColor"/>, 
            <see cref="P:C1.C1Excel.XLShape.LineStyle"/>), the <see cref="P:C1.C1Excel.XLShape.Rotation"/> applied to the shape, and
            <see cref="P:C1.C1Excel.XLShape.Hyperlink"/> information.</para>
            
            <para>The <see cref="T:C1.C1Excel.XLPictureShape"/> class derives from <b>XLShape</b> and 
            is used to embed images in sheets.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Excel.XLShape.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLShape.ParseProperties(System.Collections.IDictionary)">
            <summary>
            Parse shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> that contains the shape properties.</param>
            <returns><see cref="T:System.Collections.IDictionary"/> that contains not handled the shape properties.</returns>
        </member>
        <member name="M:C1.C1Excel.XLShape.CreateProperties(System.Collections.IDictionary)">
            <summary>
            Populates an <see cref="T:System.Collections.IDictionary"/> with the shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> where the shape properties are stored.</param>
        </member>
        <member name="P:C1.C1Excel.XLShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Id">
            <summary>
            Gets the unique identifier of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Row">
            <summary>
            Gets the index of the row to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Column">
            <summary>
            Gets the index of the column to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Workbook">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rectangle">
            <summary>
            Gets or sets the rectangle that contains the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rotation">
            <summary>
            Gets or sets the rotation of the shape, in degrees.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineWidth">
            <summary>
            Gets or sets the width of the border around the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineColor">
            <summary>
            Gets or sets the color of the border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineStyle">
            <summary>
            Gets or sets the style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.DashedLineStyle">
            <summary>
            Gets or sets the dash style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.ForeColor">
            <summary>
            Gets or sets foreground color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.ShadowColor">
            <summary>
            Gets or sets fill color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillColor">
            <summary>
            Gets or sets fill color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillOpacity">
            <summary>
            Gets or sets fill opacity for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the shape.
            </summary>
            <remarks>
            If you set this property to a URL, clicking the shape in Excel will
            open the browser and navigate to the URL.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.ParseProperties(System.Collections.IDictionary)">
            <summary>
            Parse shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> that contains the shape properties.</param>
            <returns><see cref="T:System.Collections.IDictionary"/> that contains not handled the shape properties.</returns>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.CreateProperties(System.Collections.IDictionary)">
            <summary>
            Populates an <see cref="T:System.Collections.IDictionary"/> with the shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> where the shape properties are stored.</param>
        </member>
        <member name="P:C1.C1Excel.XLOpaqueShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.None">
            <summary>
            Images are rendered in their original size, regardless of cell size.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Clip">
            <summary>
            Images are clipped to fit within the cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Scale">
            <summary>
            Images are scaled to fill the cell while preserving their original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Stretch">
            <summary>
            Images are stretched to fill the cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is rendered in its original size, and is
            indented from the top left corner of the cell by 30 twips:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 30, 30);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 
                rc.X, rc.Y, rc.Width, rc.Height);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="rc">The rectangle that specifies the image size and position 
            with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, rc);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Size,System.Drawing.ContentAlignment,C1.C1Excel.ImageScaling)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="cellSize">The size of the cell that will contain the image, in pixels (used for aligning the image).</param>
            <param name="align">A <see cref="T:System.Drawing.ContentAlignment"/> value that specifies the position of the image in the cell.</param>
            <param name="scale">An <see cref="T:C1.C1Excel.ImageScaling"/> value that specifies the image scaling within the cell.</param>
            <remarks>
            This constructor automatically calculates the image size, position, and clipping based on the cell and image sizes
            and on the given alignment and scaling parameters.
            </remarks>
            <example>
            The code below adds an image to a cell. The image is centered within the cell and scaled to 
            fill the cell while preserving its aspect ratio.
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Size cellSize = new Size(
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(
                image,
                cellSize,
                ContentAlignment.MiddleCenter,
                ImageScaling.Scale);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>        
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(C1.C1Excel.XLSheet,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object that owns the new shape.</param>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the sheet, in twips.</param>
            <param name="y">The vertical position of the image with respect to the sheet, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.ParseProperties(System.Collections.IDictionary)">
            <summary>
            Parse shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> that contains the shape properties.</param>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.CreateProperties(System.Collections.IDictionary)">
            <summary>
            Populates an <see cref="T:System.Collections.IDictionary"/> with the shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> where the shape properties are stored.</param>
            <returns><see cref="T:System.Collections.IDictionary"/> that contains not handled the shape properties.</returns>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Image">
            <summary>
            Gets a reference to the <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.ViewType">
            <summary>
            Gets or sets whether this <see cref="T:C1.C1Excel.XLPictureShape"/> should be displayed in color, grayscale, or black and white.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Brightness">
            <summary>
            Gets or sets the brightness of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Contrast">
            <summary>
            Gets or sets the contrast of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.BrightnessInPercents">
            <summary>
            Gets or sets the brightness in percents of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between -100 and 100).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.ContrastInPercents">
            <summary>
            Gets or sets the contrast in percents of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between -100 and 100).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Transparent">
            <summary>
            Gets or sets the transparent color of this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.LeftClip">
            <summary>
            Gets or sets the left clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.RightClip">
            <summary>
            Gets or sets the right clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.TopClip">
            <summary>
            Gets or sets the top clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.BottomClip">
            <summary>
            Gets or sets the bottom clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.ImageSize">
            <summary>
            Gets image size in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.FileName">
            <summary>
            Gets or sets the file name of this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Excel.ShapeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLShape"/> objects on an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(C1.C1Excel.XLShape)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(System.Int32)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(C1.C1Excel.XLShape)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(System.Int32)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(C1.C1Excel.XLShape)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="id">The identifier of the object  to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Add(C1.C1Excel.XLShape)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLShape"/> object to the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Insert(System.Int32,C1.C1Excel.XLShape)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLShape"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="shape">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLShape"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Count">
            <summary>
            Gets count items in collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Sheet">
            <summary>
            Gets the <see cref="P:C1.C1Excel.ShapeCollection.Sheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.Auto">
            <summary>
            Display the image using the image's own color information.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.GrayScale">
            <summary>
            Display the image in grayscale.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.BlackAndWhite">
            <summary>
            Display the image in black and white.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeLineStyleEnum">
            <summary>
            Specifies the style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Simple">
            <summary>Single line (of width LineWidth).</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Double">
            <summary>Double lines of equal width.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThickThin">
            <summary>Double lines, one thick, one thin.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThinThick">
            <summary>Double lines, reverse order.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Triple">
            <summary>Three lines, thin, thick, thin.</summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeDashedLineStyleEnum">
            <summary>
            Specifies the dash style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Solid">
            <summary>Solid (continuous) pen.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dash">
            <summary>Dash style, analogue PS_DASH pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dot">
            <summary>Dot style, analogue PS_DOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDot">
            <summary>Dash-dot style, analogue PS_DASHDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDotDot">
            <summary>Dash-dot-dot style, analogue PS_DASHDOTDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.SquareDot">
            <summary>Square dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDash">
            <summary>Short dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDash">
            <summary>Long dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDashDot">
            <summary>Short dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDot">
            <summary>Long dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDotDot">
            <summary>Long dash-dot-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.AnchorType.Default">
            <summary>Move and Resize With Anchor Cells.</summary>
        </member>
        <member name="F:C1.C1Excel.AnchorType.Picture">
            <summary>Move With Cells but Do Not Resize.</summary>
        </member>
        <member name="F:C1.C1Excel.AnchorType.Comment">
            <summary>Do Not Move or Resize With Underlying Rows/Columns.</summary>
        </member>
        <member name="T:C1.C1Excel.XLTextShape">
            <summary>
            Represents a common text shape embedded in an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLTextShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLTextShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Excel.XLTextShape.ParseProperties(System.Collections.IDictionary)">
            <summary>
            Parse shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> that contains the shape properties.</param>
            <returns><see cref="T:System.Collections.IDictionary"/> that contains not handled the shape properties.</returns>
        </member>
        <member name="M:C1.C1Excel.XLTextShape.CreateProperties(System.Collections.IDictionary)">
            <summary>
            Populates an <see cref="T:System.Collections.IDictionary"/> with the shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> where the shape properties are stored.</param>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.Text">
            <summary>
            Gets or sets a reference to the text string contained in this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.Orientation">
            <summary>
            Gets or sets a orientation of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.HorizAlign">
            <summary>
            Gets or sets a horizontal alignment of the text in this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.VertAlign">
            <summary>
            Gets or sets a vertical alignment of the text in this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.Locked">
            <summary>
            Gets or sets a locked of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.Wrapped">
            <summary>
            Gets or sets a wrapped text of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.TextScale">
            <summary>
            Gets or sets a text scale of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.TextId">
            <summary>
            Gets or sets a text identifier of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.Bidirectional">
            <summary>
            Gets or sets a bidirectional count of text shape of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.TextToFit">
            <summary>
            Gets or sets a fit to shape of the text flag of this <see cref="T:C1.C1Excel.XLTextShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.LeftMargin">
            <summary>
            Gets or sets the left margin area of this <see cref="T:C1.C1Excel.XLTextShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.RightMargin">
            <summary>
            Gets or sets the right margin of this <see cref="T:C1.C1Excel.XLTextShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.TopMargin">
            <summary>
            Gets or sets the top margin of this <see cref="T:C1.C1Excel.XLTextShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLTextShape.BottomMargin">
            <summary>
            Gets or sets the bottom margin of this <see cref="T:C1.C1Excel.XLTextShape"/>, in twips.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLCommentShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Excel.XLCommentShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLCommentShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Excel.XLCommentShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.#ctor(System.String,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLCommentShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Excel.XLCommentShape"/>.</param>
            <param name="rc">The rectangle that specifies the image size and position 
            with respect to the cell, in twips.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.#ctor(System.String)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLCommentShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Excel.XLCommentShape"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.ParseProperties(System.Collections.IDictionary)">
            <summary>
            Parse shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> that contains the shape properties.</param>
            <returns><see cref="T:System.Collections.IDictionary"/> that contains not handled the shape properties.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentShape.CreateProperties(System.Collections.IDictionary)">
            <summary>
            Populates an <see cref="T:System.Collections.IDictionary"/> with the shape properties.
            </summary>
            <param name="properties"><see cref="T:System.Collections.IDictionary"/> where the shape properties are stored.</param>
        </member>
        <member name="P:C1.C1Excel.XLCommentShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCommentShape.Visible">
            <summary>
            Determines whether the shape is visible.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLHorizTextAlign">
            <summary>
            Specifies horizontal text alignment.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLHorizTextAlign.Left">
            <summary>Text is left aligned.</summary>
        </member>
        <member name="F:C1.C1Excel.XLHorizTextAlign.Center">
            <summary>Text is centered.</summary>
        </member>
        <member name="F:C1.C1Excel.XLHorizTextAlign.Right">
            <summary>Text is right aligned.</summary>
        </member>
        <member name="F:C1.C1Excel.XLHorizTextAlign.Justify">
            <summary>Text is justified.</summary>
        </member>
        <member name="T:C1.C1Excel.XLVertTextAlign">
            <summary>
            Specifies vertical text alignment.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLVertTextAlign.Top">
            <summary>Text is top aligned.</summary>
        </member>
        <member name="F:C1.C1Excel.XLVertTextAlign.Center">
            <summary>Text is centered vertically.</summary>
        </member>
        <member name="F:C1.C1Excel.XLVertTextAlign.Bottom">
            <summary>Text is bottom aligned.</summary>
        </member>
        <member name="F:C1.C1Excel.XLVertTextAlign.Justify">
            <summary>Text is justified vertically.</summary>
        </member>
        <member name="T:C1.C1Excel.XLTextOrientation">
            <summary>
            Specifies text orientation.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLTextOrientation.Default">
            <summary>Default (horizontal) orientation.</summary>
        </member>
        <member name="F:C1.C1Excel.XLTextOrientation.TopToBottom">
            <summary>Vertical text (top to bottom).</summary>
        </member>
        <member name="F:C1.C1Excel.XLTextOrientation.RightRotation">
            <summary>Text is rotated 90 degrees clockwise.</summary>
        </member>
        <member name="F:C1.C1Excel.XLTextOrientation.LeftRotation">
            <summary>Text is rotated 90 degrees counterclockwise.</summary>
        </member>
        <member name="T:C1.C1Excel.XLCell">
            <summary>
            Represents individual cells in an <see cref="T:C1.C1Excel.XLSheet"/> and provides
            properties for getting and setting the cell <see cref="P:C1.C1Excel.XLCell.Value"/>,
            <see cref="P:C1.C1Excel.XLCell.Style"/>, and <see cref="P:C1.C1Excel.XLCell.Hyperlink"/>.
            </summary>
            <remarks>
            <para>To create cells, use the <see cref="T:C1.C1Excel.XLSheet"/> indexer (Item property). 
            If the cell already exists, the reference will be returned as usual. 
            If not, the sheet will create the cell (as well as rows and columns if 
            necessary) and will return a reference to the new cell.</para>
            <para>Because it creates cells automatically, the indexer is especially 
            useful when creating and populating sheets.</para>
            </remarks>
            <example>
            For example, the code below creates a new <see cref="T:C1.C1Excel.C1XLBook"/>, then 
            populates the first sheet with a 10 by 10 multiplication table:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            for (int r = 0; r &lt; 10; r++)
            {
              for (int c = 0; c &lt; 10; c++)
              {
                XLCell cell = sheet[r, c];
            	cell.Value = (r+1) * (c+1);
              }
            }
            book.Save(@"c:\temp\test.xls");
            </code>
            Note how the code simply accesses the cells using the indexer. There's no 
            need to create any rows, columns, or cells. The indexer takes care of all 
            that automatically.
            </example>
        </member>
        <member name="M:C1.C1Excel.XLCell.Clone">
            <summary>
            Creates a copy of the current cell, including the value.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLCell"/> object that is a copy of the current instance.</returns>
            <remarks>The formula of the cell is cloned only as part of a row, a worksheet or a workbook.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLCell.SetValue(System.Object,C1.C1Excel.XLStyle)">
            <summary>
            Sets the <see cref="P:C1.C1Excel.XLCell.Value"/> and <see cref="P:C1.C1Excel.XLCell.Style"/> properties of a cell.
            </summary>
            <param name="value">New cell value.</param>
            <param name="style">New cell style.</param>
            <remarks>
            This method allows you to set the Value and Style properties of a cell
            simultaneously. This can make your code more compact and easier to maintain.
            For example:
            <code>
            // set cell value and style (short version)
            sheet[0,0].SetValue("Hello", styleBold);
            
            // set cell value and style (longer version)
            sheet[0,0].Value = "Hello";
            sheet[0,0].Style = styleBold;
            </code>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Value">
            <summary>
            Gets or sets the value stored in the cell.
            </summary>
            <remarks>
            <para>The value may contain strings, numeric, Boolean, DateTime, or
            null objects. Other types of objects cannot be saved in Excel files.</para>
            <para>DateTime values are internally converted into doubles, 
            and stored in the sheet as such. The only way to tell the difference 
            between a DateTime value and a double in Excel is by way of the 
            format associated with the cell (<see cref="P:C1.C1Excel.XLStyle.Format"/> property).
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Hyperlink">
            <summary>
            Gets or sets a string that specifies an action to take when the cell
            is clicked.
            </summary>
            <remarks>
            <para>Hyperlinks may contain URLs that when clicked open a browser window and
            navigate to the specified site (for example, "http://www.componentone.com"). They
            may also contain references to files that are launched by the application
            associated with the file type (for example, "readme.doc"). Finally, hyperlinks
            can be used to send e-mails (for example, "mailto:joe@foo.com").</para>
            <para>Each cell may contain a hyperlink and a value. However, if you assign
            a hyperlink to a cell that has no value (<see cref="P:C1.C1Excel.XLCell.Value"/> == null), then
            the hyperlink text is automatically assigned to the cell value as well.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Formula">
            <summary>
            Gets or sets a string that specifies a formula of the cell.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCell.Text">
            <summary>
            Gets the string representation of the current cell value.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLReferenceMode">
            <summary>
            The reference mode.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLReferenceMode.R1C1">
            <summary>R1C1 style, default by formulas.</summary>
        </member>
        <member name="F:C1.C1Excel.XLReferenceMode.A1">
            <summary>A1 style, default by spreadsheet.</summary>
        </member>
        <member name="T:C1.C1Excel.XLReferenceType">
            <summary>
            The reference type.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLReferenceType.Absolute">
            <summary>Absolute coordinates.</summary>
        </member>
        <member name="F:C1.C1Excel.XLReferenceType.Relative">
            <summary>Relative coordinates.</summary>
        </member>
        <member name="T:C1.C1Excel.XLRangeType">
            <summary>
            The range type.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Default">
            <summary>Default range.</summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Indirect">
            <summary>Indirect range.</summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Offset">
            <summary>Offset range.</summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Name">
            <summary>Named range.</summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Text">
            <summary>Text range.</summary>
        </member>
        <member name="F:C1.C1Excel.XLRangeType.Formula">
            <summary>Formula range.</summary>
        </member>
        <member name="T:C1.C1Excel.XLCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLCellRange"/> objects on 
            an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLCellRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Contains(C1.C1Excel.XLCellRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.IndexOf(C1.C1Excel.XLCellRange)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLCellRange"/> object in the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Remove(C1.C1Excel.XLCellRange)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object from the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(C1.C1Excel.XLCellRange)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLCellRange"/> object to the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLCellRange"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the cell range.</param>
            <param name="colIndex">Index of the left column in the cell range.</param>
            <param name="rowCount">Number of rows in the cell range.</param>
            <param name="colCount">Number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Insert(System.Int32,C1.C1Excel.XLCellRange)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="cr">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLCellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.ActiveIndex">
            <summary>
            Gets or sets the active index in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLCellRange"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            an empty range.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(C1.C1Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> of this cell range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(C1.C1Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> of this cell range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
            <param name="rowFromRef">The reference type of the top row in the range.</param>
            <param name="rowToRef">The reference type of the bottom row in the range.</param>
            <param name="colFromRef">The reference type of the left column in the range.</param>
            <param name="colToRef">The reference type of the right column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(C1.C1Excel.XLSheet,System.Int32,System.Int32,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="ws">The <see cref="T:C1.C1Excel.XLSheet"/> of the range.</param>
            <param name="row">The row in the range equal one cell.</param>
            <param name="col">The column in the range equal one cell.</param>
            <param name="rowRef">The reference type of the row.</param>
            <param name="colRef">The reference type of the column.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType,C1.C1Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheetFrom">First index of the <see cref="T:C1.C1Excel.XLSheet"/> of the range.</param>
            <param name="sheetTo">Last index of the <see cref="T:C1.C1Excel.XLSheet"/> of the range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
            <param name="rowFromRef">The reference type of the top row in the range.</param>
            <param name="rowToRef">The reference type of the bottom row in the range.</param>
            <param name="colFromRef">The reference type of the left column in the range.</param>
            <param name="colToRef">The reference type of the right column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(C1.C1Excel.XLSheet,System.String)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The owner sheet for the range.</param>
            <param name="reference">The text presentation of a specified range without sheets.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(C1.C1Excel.C1XLBook,System.String)">
            <summary>
            Creates an instance of an <see cref="T:C1.C1Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="book">The owner workbook for the range.</param>
            <param name="reference">The text presentation of a specified range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Clone">
            <summary>
            Creates a copy of this cell range.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLCellRange"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.ToString">
            <summary>
            Returns a reference string that represents the range.
            </summary>
            <returns>A reference string that represents the range.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Contains(C1.C1Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Contains(C1.C1Excel.XLCellRange)">
            <summary>
            Determines whether the range contains a specific range.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Intersects(C1.C1Excel.XLCellRange)">
            <summary>
            Determines whether the range intersects another range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.IsEmpty">
            <summary>
            Determines whether the range is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowFrom">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnFrom">
            <summary>
            Gets the index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowCount">
            <summary>
            Gets the number of rows in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnCount">
            <summary>
            Gets the number of columns in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.SheetCount">
            <summary>
            Gets the number of sheets in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowTo">
            <summary>
            Gets or sets the index of the last row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnTo">
            <summary>
            Gets or sets the index of the last column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowFromRef">
            <summary>
            Gets the reference type of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnFromRef">
            <summary>
            Gets the reference type of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowToRef">
            <summary>
            Gets the reference type of the bottom row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnToRef">
            <summary>
            Gets the reference type of the right column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RangeType">
            <summary>
            Gets or sets a type (default, indirect or offset) for this cell range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.SheetFrom">
            <summary>
            Gets the index of the first sheet in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.SheetTo">
            <summary>
            Gets or sets the index of the last sheet in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.Sheets">
            <summary>
            Gets an array of <see cref="T:C1.C1Excel.XLSheet"/> objects.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.Value">
            <summary>
            Gets or sets the complex value associated with this range of cells.
            </summary>
            <remarks>
            The value may contain strings, numeric, Boolean, DateTime, or
            null objects. Other types of objects cannot be saved in Excel files.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object associated with this range of cells.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLComment"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Contains(C1.C1Excel.XLComment)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLComment"/> object.
            </summary>
            <param name="comment">The <see cref="T:C1.C1Excel.XLComment"/> object to look for.</param>
            <returns>True if the collection contains the comment, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.IndexOf(C1.C1Excel.XLComment)">
            <summary>
            Gets the index of a specific <see cref="T:C1.C1Excel.XLComment"/> object in the collection.
            </summary>
            <param name="comment">The <see cref="T:C1.C1Excel.XLComment"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Remove(C1.C1Excel.XLComment)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLComment"/> object from the collection.
            </summary>
            <param name="comment">The <see cref="T:C1.C1Excel.XLComment"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLComment"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Add(C1.C1Excel.XLComment)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLComment"/> object to the collection.
            </summary>
            <param name="comment">The <see cref="T:C1.C1Excel.XLComment"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another comment already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLComment"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the comment.</param>
            <param name="colIndex">Index of the left column in the comment.</param>
            <param name="author">The author of the comment.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another comment already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Add(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLComment"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the comment.</param>
            <param name="colIndex">Index of the left column in the comment.</param>
            <param name="author">The author of the comment.</param>
            <param name="text">The context of the comment.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another comment already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Add(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLComment"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the comment.</param>
            <param name="colIndex">Index of the left column in the comment.</param>
            <param name="author">The author of the comment.</param>
            <param name="text">The text of the comment.</param>
            <param name="toRtf">Flag indicating whether to convert <paramref name="author"/> and <paramref name="text"/> to RTF format.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection
            (usually because it overlaps another comment already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCommentCollection.Insert(System.Int32,C1.C1Excel.XLComment)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLComment"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="comment">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another comment already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLCommentCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLComment"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCommentCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCommentCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLComment"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLComment.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLComment"/> object containing
            a specified range.
            </summary>
            <param name="row">Row that the comment applies to.</param>
            <param name="col">Column that the comment applies to.</param>
            <param name="author">Comment author.</param>
            <param name="text">Comment content.</param>
        </member>
        <member name="M:C1.C1Excel.XLComment.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLComment"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLComment"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Excel.XLComment.IsEmpty">
            <summary>
            Determines whether the current comment is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.IsShow">
            <summary>
            Gets or sets the show flag of the comment.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.RowIndex">
            <summary>
            Gets or sets the row index of the comment.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.ColumnIndex">
            <summary>
            Gets or sets the column index of the comment.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.Author">
            <summary>
            Gets a author for this comment.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLComment.Cell">
            <summary>
            Gets a reference to the cell for this comment.
            </summary>
            <remarks>A reference to the <see cref="T:C1.C1Excel.XLCell"/> object at the comment coordinates,
            or null if there is no cell at the specified position.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLComment.TextBox">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.XLCommentShape"/> object with context.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLFont">
            <summary>
            XLFont (wrapper of System.Drawing.Font)
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLHyperlink.Link">
            <summary>
            Gets a hyperlink text of this object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.NamedRangeFlags">
            <summary>
            Reference named range flags.
            </summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.Default">
            <summary>Default named range.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.HiddenName">
            <summary>Named range with hidden name.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.FunctionName">
            <summary>Function name.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.CommandName">
            <summary>Command name.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.Macro">
            <summary>Macro named range.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.Complex">
            <summary>Complex named range.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.BuiltIn">
            <summary>Built-in named range.</summary>
        </member>
        <member name="F:C1.C1Excel.NamedRangeFlags.BinaryData">
            <summary>Named range as binary data.</summary>
        </member>
        <member name="T:C1.C1Excel.XLNamedRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLNamedRange"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLNamedRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Contains(C1.C1Excel.XLNamedRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLNamedRange"/> object.
            </summary>
            <param name="namedRange">The <see cref="T:C1.C1Excel.XLNamedRange"/> object to look for.</param>
            <returns>True if the collection contains the range, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Contains(System.String)">
            <summary>
            Checks whether the collection contains an <see cref="T:C1.C1Excel.XLNamedRange"/> object with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:C1.C1Excel.XLNamedRange"/> object to look for.</param>
            <returns>True if the collection contains the range, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.IndexOf(C1.C1Excel.XLNamedRange)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLNamedRange"/> object in the collection.
            </summary>
            <param name="nr">The <see cref="T:C1.C1Excel.XLNamedRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.IndexOf(System.String)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLNamedRange"/> object with the specified name in the collection.
            </summary>
            <param name="name">The name of the <see cref="T:C1.C1Excel.XLNamedRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Remove(C1.C1Excel.XLNamedRange)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLNamedRange"/> object from the collection.
            </summary>
            <param name="nr">The <see cref="T:C1.C1Excel.XLNamedRange"/> object to remove from the collection.</param>
            <returns>True if the object was removed, false if it was not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Remove(System.String)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLNamedRange"/> object with the specified name from the collection.
            </summary>
            <param name="name">The name of the range to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLNamedRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">The index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(C1.C1Excel.XLNamedRange)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLNamedRange"/> object to the collection.
            </summary>
            <param name="namedRange">The <see cref="T:C1.C1Excel.XLNamedRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(System.String,C1.C1Excel.XLCellRange)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of the named range to create.</param>
            <param name="cellRange">The <see cref="T:C1.C1Excel.XLCellRange"/> to include in the named range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(System.String,C1.C1Excel.XLCellRange[])">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of the named range to create.</param>
            <param name="cellRanges">The array of <see cref="T:C1.C1Excel.XLCellRange"/> to include in the named range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(System.String,C1.C1Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLNamedRange"/> object and appends it to the collection.
            This overload creates a range containing a single cell.
            </summary>
            <param name="name">The name of <see cref="T:C1.C1Excel.XLNamedRange"/> object.</param>
            <param name="sheet">The worksheet the range belongs to.</param>
            <param name="rowIndex">The row index of the cell in the range.</param>
            <param name="colIndex">The column index of the cell in the range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLNamedRange"/> object and appends it to the collection.
            This overload allows you to create a 3-D reference to the same range of cells on multiple worksheets.
            </summary>
            <param name="name">The name of <see cref="T:C1.C1Excel.XLNamedRange"/> object.</param>
            <param name="firstSheetIndex">The index of the first <see cref="T:C1.C1Excel.XLSheet"/> to include.</param>
            <param name="lastSheetIndex">The index of the last <see cref="T:C1.C1Excel.XLSheet"/> to include.</param>
            <param name="rowIndex">The index of the top row in the cell range.</param>
            <param name="colIndex">The index of the left column in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Add(System.String,C1.C1Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of <see cref="T:C1.C1Excel.XLNamedRange"/> object.</param>
            <param name="sheet">The worksheet containing the range.</param>
            <param name="rowIndex">The index of the top row in the cell range.</param>
            <param name="colIndex">The index of the left column in the cell range.</param>
            <param name="rowCount">The number of rows in the cell range.</param>
            <param name="colCount">The number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRangeCollection.Insert(System.Int32,C1.C1Excel.XLNamedRange)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLNamedRange"/> object at a specific position in the collection.
            </summary>
            <param name="index">The position where the object will be inserted.</param>
            <param name="namedRange">The named range to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLNamedRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLNamedRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRangeCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRangeCollection.Item(System.Int32)">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.XLNamedRange"/> object at the specified index.
            Returns null if an invalid index is specified.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRangeCollection.Item(System.String)">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.XLNamedRange"/> object with the specified name.
            Returns null if an object with the specified name could not be found in the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.#ctor(C1.C1Excel.C1XLBook,System.String,C1.C1Excel.XLCellRange[])">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLNamedRange"/> object containing
            a specified range.
            </summary>
            <param name="book">The owner workbook.</param>
            <param name="name">The name of this range.</param>
            <param name="crs">The array of cell ranges.</param>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLNamedRange"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLNamedRange"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.Contains(C1.C1Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
            <param name="sheet">The worksheet containing the cell.</param>
            <param name="row">The row index of the cell.</param>
            <param name="col">The column index of the cell.</param>
            <returns>True if the current named range contains the specified cell, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.ParseDefinition(System.Collections.Generic.Stack{C1.C1Excel.Tokens.Token})">
            <summary>
            Parse definition as stack tokens.
            </summary>
            <param name="definition">The stack of tokens.</param>
            <returns>The array of <see cref="T:C1.C1Excel.XLCellRange"/> approximate object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.GetBuiltInName(System.Int32)">
            <summary>
            Gets built-in name for code.
            </summary>
            <param name="builtInName">The code of built-in name.</param>
            <returns>The built-in name or 'Unknown'.</returns>
        </member>
        <member name="M:C1.C1Excel.XLNamedRange.GetBuiltInCode(System.String)">
            <summary>
            Gets built-in code that supported now.
            </summary>
            <param name="name">The name of named range.</param>
            <returns>The code, 0 if not support, -1 if not found.</returns>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.IsEmpty">
            <summary>
            Determines whether the current range is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.IsNameOnly">
            <summary>
            Determines whether the current named range has a valid name
            but does not define a range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.IsBuiltInName">
            <summary>
            Determines whether the range has a built-in name.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.CellRange">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.XLCellRange"/> object that determines
            which cells are contained in the current named range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.CellRanges">
            <summary>
            Gets a reference to array of the <see cref="T:C1.C1Excel.XLCellRange"/> objects that determines
            which cells are contained in the current named range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.Name">
            <summary>
            Gets or sets the name of the current named range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.MenuText">
            <summary>
            Gets or sets the text of the context menu associated with the current named range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.Description">
            <summary>
            Gets or sets the description text.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.HelpTopic">
            <summary>
            Gets or sets the help topic resource into help file.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.StatusText">
            <summary>
            Gets or sets the text for the status bar.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLNamedRange.Comment">
            <summary>
            Gets or sets the comment text associated with the current named range.
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStorage">
            <summary>
            C1OleStorage
            wrapper for creating and accessing OLE compound files
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStream">
            <summary>
            C1OleStream
            COleStorage files contain C1OleStream
            </summary>
        </member>
        <member name="T:C1.C1Excel.LockByteStream">
            <summary>
            Class that implements the ILockBytes interface on top of a Stream
            (so we can open storages on streams as well as files)
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueCreator">
            <summary>
            Opaque table creator.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueParser">
            <summary>
            Opaque table analyzer.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueRecordList">
            <summary>
            helper class used to store opaque records
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpenXmlReader">
            <summary>
            The Open XML format reader.
            </summary>
        </member>
        <member name="M:C1.C1Excel.OpenXmlReader.LoadSheet(System.Xml.XmlReader,C1.C1Excel.XLSheet)">
            <summary>
            Load worksheet from Open XML format.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object.</param>
            <param name="sheet">The loading sheet.</param>
            <returns>The drawing canvas link array.</returns>
        </member>
        <member name="T:C1.C1Excel.OpenXmlWriter">
            <summary>
            The Open XML format writer.
            </summary>
        </member>
        <member name="M:C1.C1Excel.OpenXmlWriter.SaveSheet(System.Xml.XmlWriter,C1.C1Excel.XLSheet)">
            <summary>
            Save worksheet to Open XML format.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> object.</param>
            <param name="sheet">The saving sheet.</param>
            <returns>The hyperlink array.</returns>
        </member>
        <member name="M:C1.C1Excel.OpenXmlWriter.SaveComments(System.Xml.XmlWriter,C1.C1Excel.XLSheet)">
            <summary>
            Save worksheet comments to Open XML format.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> object.</param>
            <param name="sheet">The saving sheet.</param>
        </member>
        <member name="M:C1.C1Excel.OpenXmlWriter.SaveCanvas(System.Xml.XmlWriter,C1.C1Excel.XLSheet)">
            <summary>
            Save drawing canvas of the sheet.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> object.</param>
            <param name="sheet">The sheet of workbook.</param>
            <returns>The text hyperlink array.</returns>
        </member>
        <member name="T:C1.C1Excel.XLPrintSettings">
            <summary>
            Provides options and settings for printing <see cref="T:C1.C1Excel.XLSheet"/> objects.
            </summary>
            <remarks>
            <para>The settings are applied to each sheet and are accessible through the
            sheet's <see cref="P:C1.C1Excel.XLSheet.PrintSettings"/> property.</para>
            <para>Note that <see cref="T:C1.C1Excel.C1XLBook"/> does not provide any printing
            services. The settings are used when printing the sheet from Excel.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLPrintSettings"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLPrintSettings"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLPrintSettings"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.SetHeaderFooterPicture(System.Object,C1.C1Excel.XLPictureShape@)">
            <summary>
            Helper that assigns an Image or XLPictureShape to a header or footer.
            </summary>
            <param name="value">Image or XLPictureShape to assign to header or footer.</param>
            <param name="pictureField">XLPictureShape field that holds the XLPictureShape value.</param>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Header">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            <para>The header string may contain special commands, i.e. placeholders for the page number, 
            current date, or text formatting attributes. Most of these fields are represented by single 
            letters with a leading ampersand ("&amp;").</para>
            <para>The page header is divided into 3 sections: left, center, and right. Each section is 
            introduced by a special command ("&amp;L", "&amp;C", and "&amp;R"). All text and all commands following 
            are part of the selected section.</para>
            <para>The following commands are available:</para>
            <para>&amp;L Start of the left section</para>
            <para>&amp;C Start of the centered section</para>
            <para>&amp;R Start of the right section</para>
            <para>&amp;P Current page number</para>
            <para>&amp;N Page count</para>
            <para>&amp;D Current date</para>
            <para>&amp;T Current time</para>
            <para>&amp;A Sheet name</para>
            <para>&amp;F File name without path</para>
            <para>&amp;Z File path without file name</para>
            <para>&amp;G Picture (file name)</para>
            <para>&amp;B Bold toggle</para>
            <para>&amp;I Italic toggle</para>
            <para>&amp;U Underline toggle</para>
            <para>&amp;E Double underline toggle</para>
            <para>&amp;S Strikeout toggle</para>
            <para>&amp;X Superscript toggle</para>
            <para>&amp;Y Subscript toggle</para>
            <para>&amp;"[FontName]" Set new font</para>
            <para>&amp;"[FontName,FontStyle]" Set new font with specified style. The style is in most cases 
            "Regular", "Bold", "Italic", or "Bold Italic".</para>
            &amp;[fontheight] Set font height in points.
            </remarks>
            <example>
            The code below creates a header with left, center, and right portions.
            <code>
            PrintSettings ps = sheet.PrintSettings;
            ps.Header = "&amp;LHeader Left&amp;CHeader Center&amp;RHeader Right";
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Footer">
            <summary>
            Gets or sets the string to be displayed as a page footer when the sheet is printed.
            </summary>
            <remarks>
            The footer string has the same structure and embedded commands as the header string. 
            See the <see cref="P:C1.C1Excel.XLPrintSettings.Header"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterHorizontal">
            <summary>
            Gets or sets whether the sheet should be centered horizontally on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterVertical">
            <summary>
            Gets or sets whether the sheet should be centered vertically on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginLeft">
            <summary>
            Gets or sets the left margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginRight">
            <summary>
            Gets or sets the right margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginTop">
            <summary>
            Gets or sets the top margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginBottom">
            <summary>
            Gets or sets the bottom margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginHeader">
            <summary>
            Gets or sets the header margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginFooter">
            <summary>
            Gets or sets the footer margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintHeaders">
            <summary>
            Gets or sets whether row and column headers (the areas with row numbers and column letters) will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintGridlines">
            <summary>
            Gets or sets whether the gridlines will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PaperKind">
            <summary>
            Gets or sets the paper size to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.ScalingFactor">
            <summary>
            Gets or sets the scaling factor (in percent) to use when printing the sheet.
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property automatically sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/>
            property to false, causing C1Excel to use the selected scaling factor and to ignore the
            value of the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.AutoScale">
            <summary>
            Gets or sets the scaling mode used for printed output.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to true, then the printed sheet will be 
            automatically scaled to fit the number of pages specified by the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> 
            and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.</para>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to false, then the printed sheet will be 
            scaled according to the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.OutlinesBelow">
            <summary>
            Gets or sets the vertical place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.C1Excel.XLPrintSettings.OutlinesBelow"/> is set to true outline buttons below outline
            group, otherwise outline buttons above outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.OutlinesRight">
            <summary>
            Gets or sets the horizontal place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.C1Excel.XLPrintSettings.OutlinesRight"/> is set to true outline buttons right of outline
            group, otherwise outline buttons left of outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.StartPage">
            <summary>
            Gets or sets the initial page number to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesAcross">
            <summary>
            Fit the sheet to this number of pages across (0 means use as many as needed).
            </summary>
            <remarks>
            Causes C1Excel to select "fit to page" print mode, ignoring the value of the 
            <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesDown">
            <summary>
            Fit the sheet to this number of pages down (0 means use as many as needed).
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintPagesInRows">
            <summary>
            Gets or sets whether to print the pages in rows (across first) or in columns (down first).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Landscape">
            <summary>
            Gets or sets whether to print the sheet in landscape mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.BlackAndWhite">
            <summary>
            Gets or sets whether to print the sheet in monochrome mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.DraftQuality">
            <summary>
            Gets or sets whether to print the sheet in draft quality mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.HeaderPictureLeft">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the left part of the header.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.HeaderPictureCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the center part of the header.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.HeaderPictureRight">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the right part of the header.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FooterPictureLeft">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the left part of the footer.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FooterPictureCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the center part of the footer.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FooterPictureRight">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> or <see cref="T:C1.C1Excel.XLPictureShape"/> for the right part of the footer.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffExtSheet">
            <summary>
            Represents a BIFF external sheet structure.
            </summary>
        </member>
        <member name="F:C1.C1Excel.BiffExtSheet.SubBookIndex">
            <summary>The sub book index.</summary>
        </member>
        <member name="F:C1.C1Excel.BiffExtSheet.FirstIndex">
            <summary>The first sheet tab index.</summary>
        </member>
        <member name="F:C1.C1Excel.BiffExtSheet.LastIndex">
            <summary>The last sheet tab index.</summary>
        </member>
        <member name="T:C1.C1Excel.BiffExtName">
            <summary>
            Represents a BIFF external name structure.
            </summary>
        </member>
        <member name="P:C1.C1Excel.BiffExtName.Options">
            <summary>The option flas of this external name.</summary>
        </member>
        <member name="P:C1.C1Excel.BiffExtName.Name">
            <summary>The external name.</summary>
        </member>
        <member name="P:C1.C1Excel.BiffExtName.AddInFunction">
            <summary>The add-in function flag.</summary>
        </member>
        <member name="P:C1.C1Excel.BiffExtName.Book">
            <summary>The main workbook for this external name.</summary>
        </member>
        <member name="P:C1.C1Excel.BiffExtName.Formula">
            <summary>The text formula of this external name.</summary>
        </member>
        <member name="T:C1.C1Excel.CellReference">
            <summary>
            Represents a cell reference of the Excel sheet.
            </summary>
        </member>
        <member name="T:C1.C1Excel.AreaReference">
            <summary>
            Represents a area reference of the Excel sheet.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLRichText">
            <summary>
            The rich text reader and writer.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLRow"/> objects that represent the 
            individual rows in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            The collection has methods for counting, enumerating, adding, and removing 
            rows from the collection.
            </remarks>
            <example>
            Note that you can create rows automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book = new C1XLBook();
            sheet = book.Sheets[0];
            XLCell cell   = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLRow"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add(C1.C1Excel.XLRow)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLRow"/> object to the collection.
            </summary>
            <param name="row">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="row"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Contains(C1.C1Excel.XLRow)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLRow"/> is a member of the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.IndexOf(C1.C1Excel.XLRow)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLRow"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32,C1.C1Excel.XLRow)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLRow"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="row">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            <para>The maximum number of <see cref="T:C1.C1Excel.XLRow"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 65,536. This is a limitation imposed by Excel 2003 and below.</para>
            <para>For Excel 2007 and above, the maximum number of <see cref="T:C1.C1Excel.XLRow"/> objects
            in an <see cref="T:C1.C1Excel.XLSheet"/> is 1,048,576.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Remove(C1.C1Excel.XLRow)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLRow"/> object from the collection.
            </summary>
            <param name="row">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLRow"/> object at the specified index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLRow"/> object at the
            specified position if necessary. It never returns null.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows in the collection.
            </summary>
            <remarks>
            Frozen rows are displayed on the top of the sheet and do not scroll vertically.
            They are useful for displaying column headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLColumn"/> objects that represent the 
            individual columns in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>The collection has methods for counting, enumerating, adding, and removing 
            columns from the collection.</para>
            <para>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.</para>
            </remarks>
            <example>
            Note that you can create columns automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book  = new C1XLBook();
            XLSheet  sheet = book.Sheets[0];
            XLCell   cell  = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLColumn"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add(C1.C1Excel.XLColumn)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLColumn"/> object to the collection.
            </summary>
            <param name="col">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="col"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Contains(C1.C1Excel.XLColumn)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLColumn"/> is a member of the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.IndexOf(C1.C1Excel.XLColumn)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLColumn"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32,C1.C1Excel.XLColumn)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLColumn"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="col">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            <para>The maximum number of <see cref="T:C1.C1Excel.XLColumn"/> objects in an <see cref="T:C1.C1Excel.XLSheet"/> 
            is 256. This is a limitation imposed by Excel 2003 and below.</para>
            <para>For Excel 2007 and above, the maximum number of <see cref="T:C1.C1Excel.XLColumn"/> objects
            in an <see cref="T:C1.C1Excel.XLSheet"/> is 18,278.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Remove(C1.C1Excel.XLColumn)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLColumn"/> object from the collection.
            </summary>
            <param name="col">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLColumn"/> object at the specified
            index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLColumn"/> object at the
            specified position if necessary. It never returns null.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Frozen">
            <summary>
            Gets or sets the number of frozen columns in the collection.
            </summary>
            <remarks>
            Frozen columns are displayed on the right side of the sheet and do not scroll horizontally. 
            They are useful for displaying row headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLRow">
            <summary>
            Represents a row in a worksheet, provides properties for setting 
            the row's height, style, and visibility.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRow.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLRow"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRow.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLRow"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Excel.XLRow.Visible">
            <summary>
            Gets or sets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this row.
            </summary>
            <example>
            The code below inserts forced page breaks at every 10th row on a sheet, and
            clears the breaks at all other rows.
            <code>
            C1.C1Excel.XLSheet sheet = c1XLBook1.Sheets[0];
            for (int r = 0; r &lt; sheet.Rows.Count; r++)
            {
                sheet.Rows[r].PageBreak = (r &gt; 0 &amp;&amp; r % 10 == 0);
            }
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLRow.Height">
            <summary>
            Gets or sets the height of the row, in twips.
            </summary>
            <remarks>
            <para>A value of -1 causes the row to be displayed using the sheet's 
            <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRow.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the row.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.IsSubtotal">
            <summary>
            Gets whether the row is subtotal.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.OutlineLevel">
            <summary>
            Gets or sets subtotal outline level for the row.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Collapsed">
            <summary>
            Gets or sets collapsed flag for the row.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLColumn">
            <summary>
            Represents a column in a worksheet. This class provides properties for setting 
            the column's width, style, and visibility.
            </summary>
            <remarks>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumn.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLColumn"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLColumn.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLColumn"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Visible">
            <summary>
            Gets or sets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Width">
            <summary>
            Gets or sets the width of the column, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the column should be displayed using
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.IsSubtotal">
            <summary>
            Gets whether the column is subtotal.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.OutlineLevel">
            <summary>
            Gets or sets subtotal outline level for the column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Collapsed">
            <summary>
            Gets or sets collapsed flag for the column.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Sum">
            <summary>Represents Sum function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Count">
            <summary>Represents Count function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Average">
            <summary>Represents Average function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Max">
            <summary>Represents Max function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Min">
            <summary>Represents Min function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Product">
            <summary>Represents Product function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.CountNums">
            <summary>Represents Count Numbers function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.StdDev">
            <summary>Represents StdDev function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.StdDevp">
            <summary>Represents StdDevp function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Var">
            <summary>Represents Var function.</summary>
        </member>
        <member name="F:C1.C1Excel.ConsolidationFunction.Varp">
            <summary>Represents Varp function.</summary>
        </member>
        <member name="T:C1.C1Excel.XLSheetCollection">
            <summary>
            Collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent the individual 
            worksheets in a <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            Provides methods and properties for counting, enumerating, adding, and removing sheets from 
            the workbook.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> property to get the 
            book's sheet collection. For example, the code below gets a reference 
            to the first sheet on the book and then prints the sheet's name:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine(sheet.Name);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and appends it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(C1.C1Excel.XLSheet)">
            <summary>
            Appends an existing <see cref="T:C1.C1Excel.XLSheet"/> to the collection.
            </summary>
            <param name="sheet">The object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and inserts it at a specific 
            position in the collection.
            </summary>
            <param name="index">Index where the new <see cref="T:C1.C1Excel.XLSheet"/> will be added.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(C1.C1Excel.XLSheet)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
            <param name="sheet">The object to look for in the collection.</param>
            <returns>True if the collection contains the object; False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an <see cref="T:C1.C1Excel.XLSheet"/> object
            with a given name.
            </summary>
            <param name="sheetName">The name of the sheet to look for (case-insensitive).</param>
            <returns>True if the collection contains an <see cref="T:C1.C1Excel.XLSheet"/> with the
            given <paramref name="sheetName"/>; False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(C1.C1Excel.XLSheet)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLSheet"/> in the collection.
            </summary>
            <param name="sheet">The object to look for.</param>
            <returns>The index of the object in the collection, or -1 if the object is not
            a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(C1.C1Excel.XLSheet)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLSheet"/> from the collection.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> at a specific index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> with a given name and appends it to the collection.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.C1Excel.XLSheet"/>.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> with the specified name from the collection.
            </summary>
            <param name="name">Name of the sheet to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32,C1.C1Excel.XLSheet)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLSheet"/> object into the collection at the specified position.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(System.String)">
            <summary>
            Gets the position of the sheet with the specified name in the collection.
            </summary>
            <param name="name">Name of the object to look for (case-insensitive).</param>
            <returns>The index of the sheet in the collection, or -1 if the sheet can't be 
            found in the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLSheet"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.FirstIndex">
            <summary>
            Gets or sets the index of the sheet that is initially opened
            when a <see cref="T:C1.C1Excel.C1XLBook"/> file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the sheet that is selected
            when a <see cref="T:C1.C1Excel.C1XLBook"/> file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> at a given position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> with the given name (case-insensitive).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheet">
            <summary>
            Represents individual worksheets in an Excel workbook (<see cref="T:C1.C1Excel.C1XLBook"/>).
            </summary>
            <remarks>
            Provides indexers to get or set the value of individual cells (<see cref="T:C1.C1Excel.XLCell"/>) 
            and to access the <see cref="P:C1.C1Excel.XLSheet.Rows"/> and <see cref="P:C1.C1Excel.XLSheet.Columns"/> on the sheet.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer to get an individual 
            sheet. For example, the code below gets a reference to the first sheet on the book, then 
            prints the number of rows and columns on the sheet:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine("Sheet has {0} rows and {1} columns",
              sheet.Rows.Count, sheet.Columns.Count);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Clone">
            <summary>
            Creates a copy of this sheet.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLSheet"/> object with the same contents and formatting as this sheet.</returns>
            <remarks>
            <para>After cloning a sheet, you must rename it and then add it to the book (duplicate names are not
            allowed).</para>
            <para>This method is useful for applications that generate books with a large number of similar sheets.</para>
            </remarks>
            <example>
            The code below loads a book that contains a template sheet, creates 12 copies of that sheet, removes the
            template sheet, then saves the file with a new name.
            <code>
            // load book with template sheet
            _c1xl.Load(@"c:\temp\template.xls");
            
            // create 12 copies of the template sheet
            XLSheet templateSheet = _c1xl.Sheets["Template"];
            for (int month = 1; month &lt;= 12; month++)
            {
              XLSheet newSheet = templateSheet.Clone();
              newSheet.Name = month.ToString(); // rename clone
              newSheet[0,0].Value = month;      // make changes
              _c1xl.Sheets.Add(newSheet);       // add clone to book
            }
            
            // remove the template sheet and save with new name
            _c1xl.Sheets.Remove("Template");
            _c1xl.Save(@"C:\temp\expense_report.xls");
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a reference to a cell at the specified coordinates or null if the cell doesn't exist.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>A reference to the <see cref="T:C1.C1Excel.XLCell"/> object at the specified coordinates, or null if there
            is no cell at the specified position.</returns>
            <remarks>
            <para>To populate new sheets, use the <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer instead.</para>
            <para>The indexer will automatically create new rows, columns, and cells as needed, and will never return null.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetFormattedText(System.Int32,System.Int32)">
            <summary>
            Gets formatted text is using <see cref="T:C1.C1Excel.XLStyle"/> format value of the cell.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>The formatted text of the cell with row and column indexes.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheet.CopyFormula(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies he formula from a source cell to a destination cell, adjusting relative references
            </summary>
            <param name="rowFrom">The row index of a source cell with exist formula.</param>
            <param name="colFrom">The column index of a source cell with exist formula.</param>
            <param name="rowTo">The row index of a destination cell for copies the formula.</param>
            <param name="colTo">The column index of a destination cell for copies the formula.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Load(System.String,System.Boolean)">
            <summary>
            Loads the Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="last"><b>True</b> to finish loading from the workbook; <b>False</b> to load data into the other worksheets.</param>
            <remarks>It was previously necessary to load the workbook from the stream without filling the worksheets.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the Excel worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="last"><b>True</b> to finish loading from the workbook; <b>False</b> to load data into the other worksheets.</param>
            <remarks>It was previously necessary to load the workbook from the stream without filling the worksheets.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.LoadCsv(System.String)">
            <summary>
            Loads data from a file containing comma-separated values (.csv) into the current sheet.
            </summary>
            <param name="fileName">The name of a file containing data in .csv format.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheet.LoadCsv(System.IO.Stream)">
            <summary>
            Loads data from a stream containing comma-separated values (.csv) into the current sheet.
            </summary>
            <param name="stream">A stream containing data in .csv format.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheet.SaveCsv(System.String)">
            <summary>
            Saves data from the current sheet into a comma-separated values (.csv) formatted file.
            </summary>
            <param name="fileName">The target (.csv) file name.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheet.SaveCsv(System.IO.Stream)">
            <summary>
            Saves data from the current sheet into a comma-separated values (.csv) formatted stream.
            </summary>
            <param name="stream">The target stream.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetRangeToRepeat(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns a value indicating whether print titles are specified for this worksheet.
            (Print titles are rows repeated at top, and columns repeated at left of each page
            when the sheet is printed.)
            Output parameters indicate the indices of title rows and columns.
            </summary>
            <param name="rowFrom">OUT: index of the first title row (repeated at top).</param>
            <param name="rowTo">OUT: index of the last title row (repeated at top).</param>
            <param name="colFrom">OUT: index of the first title column (repeated at left).</param>
            <param name="colTo">OUT: index of the last title column (repeated at left).</param>
            <returns>True if title rows or columns are specified for this sheet, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheet.SetRangeToRepeat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the range of rows and columns to use as print titles for this worksheet.
            (Print titles are rows repeated at top, and columns repeated at left of each page
            when the sheet is printed.)
            </summary>
            <param name="rowFrom">Index of the first title row (repeated at top).</param>
            <param name="rowTo">Index of the last title row (repeated at top).</param>
            <param name="colFrom">Index of the first title column (repeated at left).</param>
            <param name="colTo">Index of the last title column (repeated at left).</param>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>When you open a workbook in Excel, the sheet names appear in the tabs 
            below the work area.</para>
            <para>Sheet names can be used as indexers, so they should be unique.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Rows">
            <summary>
            Gets a reference to the sheet's row collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Columns">
            <summary>
            Gets a reference to sheet's column collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.MergedCells">
            <summary>
            Gets an <see cref="T:C1.C1Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are merged on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each merged range is represented by an <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.SelectedCells">
            <summary>
            Gets an <see cref="T:C1.C1Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are selected on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each selected range is represented by an <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Comments">
            <summary>
            Gets an <see cref="T:C1.C1Excel.XLCommentCollection"/> that contains the
            collection of comments that on the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the height of individual rows using the <see cref="T:C1.C1Excel.XLRow"/> class. 
            Any rows that do not have a custom height assigned to them will be displayed using 
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/> method 
            in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> 
            method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the width of individual rows using the <see cref="T:C1.C1Excel.XLColumn"/> class. Any columns that 
            do not have a custom width assigned to them will be displayed using the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/> method in 
            <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at a specified position on the sheet, creating a new cell if necessary.
            </summary>
            <remarks>
            <para>If the specified cell doesn't exist when the indexer is invoked, the sheet will be expanded and 
            a new cell will be created, then returned. This makes it easy to create and populate sheets.</para>
            <para>If you want to determine whether a specific cell has been defined, use the <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method instead.</para>
            <para>The indexer is generally more useful when creating and populating sheets. The <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method is more useful when loading existing sheets.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Locked">
            <summary>
            Gets or sets a value that determines if the sheet is locked for editing.
            </summary>
            <remarks>
            <para>Sheets and styles can be locked. By default, sheets are unlocked and styles are locked. 
            This combination allows users to edit the cells in Excel.</para>
            <para>To protect a cell against editing in Excel, both the sheet and the cell style must have the 
            <see cref="P:C1.C1Excel.XLSheet.Locked"/> property set to true.</para>
            <para>To lock most cells on a sheet and allow editing of only a few cells, lock the sheet, then 
            create an unlocked style and assign it to the cells that should be editable.</para>
            </remarks>
            <example>
            The code below creates a data entry sheet. Most cells are locked, except for the ones where the user 
            is supposed to enter data.
            <code>
            // start with a single locked sheet
            _c1xl.Clear();
            XLSheet sheet = _c1xl.Sheets[0];
            sheet.Locked = true;
            
            // create an unlocked style
            XLStyle dataEntry = new XLStyle(_c1xl);
            dataEntry.Locked = false;
            dataEntry.BackColor = Color.Beige;
            
            // create data entry titles
            sheet[0,0].Value = "Name:";
            sheet[1,0].Value = "Address:";
            sheet[2,0].Value = "Phone #:";
            
            create data entry cells (unlocked)
            sheet[0,1].Style = dataEntry;
            sheet[1,1].Style = dataEntry;
            sheet[2,1].Style = dataEntry;
            
            // save the book
            _c1xl.Save(@"c:\temp\Protected.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Visible">
            <summary>
            Gets or sets the sheet's visibility.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowGridLines">
            <summary>
            Gets or sets whether Excel should show the grid lines when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowHeaders">
            <summary>
            Gets or sets whether Excel should show the row and column headers when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Scale">
            <summary>
            Gets or sets the view scale of this worksheet using percentages.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.GridColor">
            <summary>
            Gets or sets the color used to display gridlines.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the grid lines using the default color.</para>
            <para>To hide the grid lines, set the <see cref="P:C1.C1Excel.XLSheet.ShowGridLines"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.TabColor">
            <summary>
            Gets or sets the color used to display the tab of this sheet.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the sheet tab using the default color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.PrintSettings">
            <summary>
            Gets or sets an <see cref="T:C1.C1Excel.XLPrintSettings"/> object that controls how the
            sheet is printed.
            </summary>
            <example>
            The code below creates a header for the sheet and sets the orientation to landscape:
            <code>
            XLPrintSettings pp = sheet.PrintSettings();
            pp.Landscape = true;
            pp.Header = "&amp;LLeft Header&amp;CCenter Header&amp;RRight Header";
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Shapes">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.ShapeCollection"/> for the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.TotalsBelowData">
            <summary>
            Gets whether Excel should show the subtotals data when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.OutlinesBelow">
            <summary>
            Gets or sets a value indicating the vertical location of outline buttons.
            </summary>
            <remarks>
            If this property is set to true, outline buttons are located below the outline group,
            otherwise they are located above the outline group.
            <para>Th default value is <b>true</b></para>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.OutlinesRight">
            <summary>
            Gets or sets a value indicating the horizontal location of outline buttons.
            </summary>
            <remarks>
            If this property is set to true, outline buttons are located to the right the outline group,
            otherwise they are located to the left of the outline group.
            <para>Th default value is <b>true</b></para>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.MaxOutlineLevel">
            <summary>
            Gets the maximum subtotals outline level for rows or columns.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.RowMaxLevel">
            <summary>
            Gets maximum outline level for rows.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ColumnMaxLevel">
            <summary>
            Gets maximum outline level for columns.
            </summary>
        </member>
        <member name="T:C1.C1Excel.SharedStringTable">
            <summary>
            SharedStringTable is an list that contains a dictionary helper.
            
            The dictionary contains pairs (string, index) and is used for two purposes:
            
            1) To prevent the addition of duplicate values to the list. The Add method
               looks up values in the HashTable and only adds new values.
            
            2) To provide a quick IndexOf override. The index is retrieved from the
               dictionary instead of using the slow default linear search.
               
            This new implementation reduces the time needed to save a 10,000 x 20 sheet
            from 650 seconds down to 16, essentially the same amount of time needed
            to save numbers.
            
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignHorzEnum">
            <summary>
            Specifies how to align cell content horizontally within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.General">
            <summary>
            Align strings to the left, numbers to the right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Left">
            <summary>
            Align to cell left.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Right">
            <summary>
            Align to cell right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Fill">
            <summary>
            Fill cell, repeating content as necessary.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Justify">
            <summary>
            Justify content horizontally to span the whole cell width.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Selection">
            <summary>
            Align to selection center (may span multiple cells).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignVertEnum">
            <summary>
            Specifies how to align cell content vertically within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Top">
            <summary>
            Align to cell top.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Bottom">
            <summary>
            Align to cell bottom.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Justify">
            <summary>
            Justify content vertically to span the whole cell height.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLDiagonalFlags">
            <summary>
            Specifies the type of diagonal line to draw across the cells.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.None">
            <summary>
            No diagonal.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Forward">
            <summary>
            Forward diagonal (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Backward">
            <summary>
            Backward diagonal (\).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLLineStyleEnum">
            <summary>
            Specifies the line style used for the cell borders.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thin">
            <summary>
            Thin.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thick">
            <summary>
            Thick.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Hair">
            <summary>
            Hair (one pixel).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashed">
            <summary>
            Medium dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotted">
            <summary>
            Thin dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotted">
            <summary>
            Medium dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotDotted">
            <summary>
            Thin dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotDotted">
            <summary>
            Medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.SlantedMediumDashDotted">
            <summary>
            Slanted dash-dot.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPatternEnum">
            <summary>
            Specifies the pattern used to fill the cell background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.None">
            <summary>
            No pattern (transparent).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Solid">
            <summary>
            Solid background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray50">
            <summary>
            50% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray75">
            <summary>
            75% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray25">
            <summary>
            25% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.HorizontalStripe">
            <summary>
            Horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.VerticalStripe">
            <summary>
            Vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalStripe">
            <summary>
            Diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinVerticalStripe">
            <summary>
            Thin vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray12">
            <summary>
            12% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray06">
            <summary>
            6% dotted pattern.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLStyle">
            <summary>
            Contains style elements used to define the appearance of the cells.
            </summary>
            <remarks>
            <para>Each <see cref="T:C1.C1Excel.XLStyle"/> object may define one or more of the following 
            elements: font, format, background color, background pattern, foreground color, 
            alignment, text direction, and word wrapping.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell styles 
            and merges the style elements defined in each one in order to determine how 
            the cell should be displayed. The precedence of the styles is: (1) cell, 
            (2) row, (3) column, (4) default style.</para>
            <para>Every <see cref="T:C1.C1Excel.XLStyle"/> belongs to a <see cref="T:C1.C1Excel.C1XLBook"/>, and may 
            be assigned to one or more <see cref="T:C1.C1Excel.XLRow"/>, <see cref="T:C1.C1Excel.XLColumn"/>, and 
            <see cref="T:C1.C1Excel.XLCell"/> objects through their <see cref="P:C1.C1Excel.XLCell.Style"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.#ctor(C1.C1Excel.C1XLBook)">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Excel.XLStyle"/> and adds it to the
            specified <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <param name="book">Parent <see cref="T:C1.C1Excel.C1XLBook"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)">
            <summary>
            Sets the border style for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="style">Line style used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)">
            <summary>
            Sets the border color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="color">Color used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <param name="dataType">Data type to be formatted.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)">
            <summary>
            Converts an Excel-style format string into a .NET-style format string.
            </summary>
            <param name="fmt">Excel-style format to convert.</param>
            <returns>A .NET-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.C1Excel.XLStyle"/> objects are equivalent.
            </summary>
            <param name="obj"><see cref="T:C1.C1Excel.XLStyle"/> object to compare to the current instance.</param>
            <returns>True if the styles are equivalent, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.GetHashCode">
            <summary>
            Serves as a hash function suitable for use in hashing algorithms and 
            data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.C1Excel.XLStyle"/>.</returns>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Font">
            <summary>
            Gets or sets the font for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.Font"/> property to null in order to suppress 
            this style element and use the default font instead. The default font is 
            determined by the book's <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.ForeColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default foreground color instead (black).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped to a palette. This 
            means that if you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.BackColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default background color instead (white).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped to a palette. This 
            means that if you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackPattern">
            <summary>
            Gets or sets the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.PatternColor">
            <summary>
            Gets or sets the color of the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Format">
            <summary>
            Gets or sets the format associated with this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Excel uses formats similar, but not identical to .NET. Refer
            to the Excel documentation for details on how to create format strings.</para>
            <para>You can use the <see cref="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)"/> and <see cref="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)"/>
            methods to convert common Excel format strings to and from .NET format strings.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignHorz"/> property to <see cref="F:C1.C1Excel.XLAlignHorzEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignHorzEnum.General"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignVert"/> property to <see cref="F:C1.C1Excel.XLAlignVertEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignVertEnum.Bottom"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.WordWrap">
            <summary>
            Gets or sets whether this <see cref="T:C1.C1Excel.XLStyle"/> causes cell contents to wrap.
            </summary>
            <remarks>
            Cells that do not wrap will spill onto adjacent cells and will be kept on 
            a single line even if they contain line-break characters.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Rotation">
            <summary>
            Gets or sets the rotation for this <see cref="T:C1.C1Excel.XLStyle"/>, in degrees.
            </summary>
            <remarks>
            <para>This property should be set to values between 0 and 180, or 255, 
            as explained below:</para>
            <para>Zero means no rotation.</para>
            <para>1-90 means 1 to 90 degrees counter-clockwise (90 causes text to be 
            displayed in the vertical direction going up the cell).</para>
            <para>91-180 means 1 to 90 degrees clockwise (180 causes text to be 
            displayed in the vertical direction going down the cell).</para>
            <para>255 causes letters to be stacked top to bottom and not rotated.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Locked">
            <summary>
            Gets or sets whether the cell should be locked for editing when the <see cref="T:C1.C1Excel.XLSheet"/>
            is protected.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderLeft">
            <summary>
            Gets or sets the line style used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderRight">
            <summary>
            Gets or sets the line style used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderTop">
            <summary>
            Gets or sets the line style used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderBottom">
            <summary>
            Gets or sets the line style used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorLeft">
            <summary>
            Gets or sets the color used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorRight">
            <summary>
            Gets or sets the color used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorTop">
            <summary>
            Gets or sets the color used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorBottom">
            <summary>
            Gets or sets the color used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Diagonal">
            <summary>
            Gets or sets which diagonal lines to display (none, forward, backward).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalStyle">
            <summary>
            Gets or sets the line style used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalColor">
            <summary>
            Gets or sets the color used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.AttributeToken.Spaces">
            <summary>Gets or sets count of spaces.</summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.AttributeToken.SpacesType">
            <summary>Gets or sets spaces place type.</summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.ArrayToken.Rows">
            <summary>The number of the rows.</summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.ArrayToken.Columns">
            <summary>The number of the columns.</summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.ExternalNameToken.SheetIndex">
            <summary>The index of the external sheet.</summary>
        </member>
        <member name="P:C1.C1Excel.Tokens.ExternalNameToken.NameIndex">
            <summary>The index of the external name.</summary>
        </member>
        <member name="T:C1.C1Excel.Tokens.SpacesType">
            <summary>
            The space attribute place type.
            </summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.Before">
            <summary>Spaces before the next token (not allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.CrBefore">
            <summary>Carriage returns before the next token (not allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.BeforeOpenParen">
            <summary>Spaces before opening parenthesis (only allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.CrBeforeOpenParen">
            <summary>Carriage returns before opening parenthesis (only allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.BeforeCloseParen">
            <summary>Spaces before closing parenthesis (only allowed before parenthesis and functions tokens).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.CrBeforeCloseParen">
            <summary>Carriage returns before closing parenthesis (only allowed before parenthesis and functions tokens).</summary>
        </member>
        <member name="F:C1.C1Excel.Tokens.SpacesType.AfterEquality">
            <summary>Spaces following the equality sign (only in macro sheets).</summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.C1Zip.C1CryptStream">
            <summary>
            C1CryptStream
            reads and decrypts data from an encrypted zip base stream, or
            encrypts and writes data to an encrypted zip base stream
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
            <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
            <returns>True if the checksum values match, false otherwise.</returns>
            <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
            <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry"/> can be read with the currently set password.
            </summary>
            <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
            <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> that can be used to read the data in the entry.</returns>
            <remarks>
            The <see cref="T:System.IO.Stream"/> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader"/>, which 
            decompresses the data as it is read from the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
            <summary>
            Extracts this entry to a file.
            </summary>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Remove">
            <summary>
            Removes this entry from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.FileName">
            <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
            <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressedLong">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes, as a long integer.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressedLong">
            <summary>
            Gets the compressed size of the entry, in bytes, as a long integer.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
            <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
            <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Date">
            <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
            <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Comment">
            <summary>
            Gets or sets a comment associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
            <summary>
            Gets the file attributes associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
            <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
            <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile"/> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(C1.C1Zip.C1ZipEntry)">
            <summary>
            Determines whether the collection contains an entry.
            </summary>
            <param name="entry">Entry of the entry to look for.</param>
            <returns>True if the collection contains the entry, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the entry with the specified name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(C1.C1Zip.C1ZipEntry)">
            <summary>
            Gets the index of an entry in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.C1Zip.C1ZipEntry"/> to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
            <summary>
            Adds a list of entries to the current zip file.
            </summary>
            <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
            <remarks>
            <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
            <para>The <paramref name="pathLevels"/> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels"/>=1 
            will create an entry called "samples\readme.txt".</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String,System.DateTime)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String,System.DateTime)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
            <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
            <param name="path">Destination path for the unzipped files.</param>
            <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="index">Index of the entry to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="fileName">Name of the entry to remove (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="indices">Array containing the indices of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="entryNames">Array containing the names of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.DateTime,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="dateTime">The date and time when the file was last modified.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
            <summary>
            Gets the number of entries in the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> with the given name (returns null if the entry cannot be found).
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and creates or opens
            a zip file associated with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open or create.</param>
            <param name="create">True to create a new zip file, false to open an existing file.</param>
            <remarks>
            <para>If <paramref name="create"/> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
            <para>If <paramref name="create"/> is false and the zip file already exists, the existing file 
            is opened.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip file associated 
            with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open.</param>
            <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
            <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
            <summary>
            Opens an existing zip file.
            </summary>
            <param name="fileName">The name of an existing zip file, including the path.</param>
            <remarks>
            <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
            <summary>
            Creates an empty zip file on disk.
            </summary>
            <param name="fileName">The name of the zip file to create, including the path.</param>
            <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
            <summary>
            Opens an existing zip file stored in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a zip file.</param>
            <remarks>
            <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
            <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
            </remarks>
            <example>
            <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
            <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
            <para>2) Select a zip file to add to the project as an embedded resource.</para>
            <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
            <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (var sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
            <summary>
            Creates a new zip file in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that will contain the new zip file.</param>
            <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile"/> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Close">
            <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile"/> object.
            </summary>
            <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile"/> class 
            and a physical zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Refresh">
            <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
            <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/>
            collection is up to date.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
            <summary>
            Tests whether a file is a valid zip file.
            </summary>
            <param name="fileName">Name of the file to test.</param>
            <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
            <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to test.</param>
            <returns>True if <paramref name="stream"/> contains a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
            <summary>
            Opens the zip file for multiple operations.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.C1Zip.C1ZipFile"/> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
            <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> methods to keep the zip file open until the entire 
            operation is concluded.</para>
            <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> 
            method is called even if an exception occurs.</para>
            </remarks>
            <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
            <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method.
            </summary>
            <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method for a complete description 
            and a sample.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.FileName">
            <summary>
            Gets the name of the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Password">
            <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
            <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
            <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Comment">
            <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
            <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
            <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression"/>) provides 
            a good trade-off between compression and speed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Entries">
            <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection"/> that contains the entries in the zip file.
            </summary>
            <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
            <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
            <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
            <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
            <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> compresses entries into temporary streams before
            adding them to the zip file.</para>
            <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary memory stream.</para>
            <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
            <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile"/> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile"/> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName"/> method.
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZipEncoding">
            <summary>
            Encoding used for entry names and comments
            
            NOTE: this is culture-dependent, which is a really bad idea, but most zip packers
            use the default OEM code page to encode file names, so we have to go along with it...
            
            Note that Encoding.Default seems like a logical choice but doesn't really work for
            international locales. Instead, we need to create an encoding using the current
            OEMCodePage. That allows accents and international characters to be used in file
            names (like the zip built into Windows, allows names such as "Åland.txt", "Äiti.txt", 
            "Würth.txt", etc.).
            
            This has nothing to do with compression, it's just used to encode and decode entry 
            names and comments.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipFileException">
            <summary>
            Exception thrown when trying to open an invalid Zip file.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Zip.ZipFileException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buf"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressedLong">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressedLong">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressedLong">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressedLong">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipEntryStreamWriter">
            <summary>
            ZipEntryStreamWriter
            Extends C1ZStreamWriter to provide the following:
            1) Creates a memory or temporary storage stream.
            2) Keeps track of the parent zip file.
            3) Overrides Close to add the compressed stream to the zip file.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            The exception that is thrown when reading or writing to a compressed stream fails.
            </summary>
        </member>
        <member name="T:C1.Util.Win.AmbientProperty`1">
            <summary>
            <para>Helper class for implementing Ambient properties on controls.</para>
            <para>Ambient properties may be set explicitly, in which case they behave like regular properties.
            If they are not set explicitly, their value is determined by the nearest ancestor control that
            implements it.</para>
            <para>The Control class implements the following ambient properties: BackColor, ForeColor, Font, 
            Cursor.</para>
            </summary>
            <remarks>
            Typical usage is as follows:
            <code>
            public VisualStyle VisualStyle
            {
                get { return _ambVisualStyle.GetValue(this); }
                set
                {
                    if (value != VisualStyle)
                    {
                        _ambVisualStyle.SetValue(this, value);
                        UpdateRenderer();
                     }
                }
            }
            // allow resetting property at design time using property grid
            protected void ResetVisualStyle()
            {
                _ambVisualStyle.ResetValue();
                UpdateRenderer();
            }
            // provide 'ShouldSerialize' method to persist only when not inherited from ambient
            protected virtual bool ShouldSerializeVisualStyle()
            {
                return _ambVisualStyle.ShouldSerializeValue();
            }
            // optional method to update control when ambient value changes
            protected void OnAmbientChangedVisualStyle()
            {
                UpdateRenderer();
            }
            </code>
            </remarks>
            <typeparam name="T">Property type.</typeparam>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderEmpty">
            <summary>
            BorderEmpty is just empty space.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderRaised">
            <summary>
            BorderRaised draws a 1-pixel wide raised border.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderInset">
            <summary>
            BorderInset draws a 1-pixel wide inset border.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderGroove">
            <summary>
            BorderGroove draws a 2-pixel wide groove border.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.BorderFillet">
            <summary>
            BorderFillet draws a 2-pixel wide fillet border.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum">
            <summary>
            Specifies the type of border to be drawn around the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum.FixedSingle">
            <summary>
            A single-line border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum.Fixed3D">
            <summary>
            A three-dimensional border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum.Light3D">
            <summary>
            A light sunken border.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.Util.BaseControls.BorderStyleEnum.XpThemes">
            <summary>
            A border drawn using XP themes.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.StyleContext">
            <summary>
            StyleContext contains a base Style definition and a list of
            named Styles. It provides the following services:
            - Style management (create, edit, and remove Styles)
            - Style inheritance mechanism
            - Rendering and measuring methods
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Styles.Style">
            <summary>
            Style contains a collection of arbitrary attributes, 
            represented by a name/object entry, a reference to a parent
            Style, and a reference to the containing StyleContext.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Types">
            <summary>
            Summary description for Types.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.Util.Win32">
            <summary>
            Win32 
            provides some system utilities (all static stuff)
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.VisualStyle">
            <summary>
            Specifies a visual style to use when rendering the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Custom">
            <summary>
            Do not use any visual styles. Render the control using the styles and properties only.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.System">
            <summary>
            Render the control with an appearance based on the current system settings.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2007Blue">
            <summary>
            Render the control with an appearance based on the Office 2007 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2007Silver">
            <summary>
            Render the control with an appearance based on the Office 2007 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2007Black">
            <summary>
            Render the control with an appearance based on the Office 2007 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2010Blue">
            <summary>
            Render the control with an appearance based on the Office 2010 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2010Silver">
            <summary>
            Render the control with an appearance based on the Office 2010 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.VisualStyle.Office2010Black">
            <summary>
            Render the control with an appearance based on the Office 2010 Black color scheme.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1FlexGridRenderer">
            <summary>
            Represents an abstract base class for custom grid renderers.
            </summary>
            <remarks>
            To create custom grid renderers, inherit from this class, override the appropriate
            virtual methods and properties, and assign an instance of your class to the grid's 
            <see cref="P:C1.Win.C1FlexGrid.C1FlexGridBase.Renderer"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs)">
            <summary>
            Draws a grid cell of any type.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell being drawn.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> that provides information about the cell being drawn.</param>
            <remarks>
            This method determines the type of cell being drawn and then calls the <see cref="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)"/>
            method passing the type of cell to be drawn.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)">
            <summary>
            Draws a single grid cell of a specific type.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell being drawn.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> that provides information about the cell being drawn.</param>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that determines the type of cell being drawn.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.GetBackgroundBrush(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType,System.Drawing.Rectangle)">
            <summary>
            Gets a <see cref="T:System.Drawing.Brush"/> object used to paint the cell background for a specific cell type.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell being drawn.</param>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that determines the type of cell being drawn.</param>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the cell being drawn.</param>
            <returns>A <see cref="T:System.Drawing.Brush"/> object used to render the cell background.</returns>
            <remarks>
            The <paramref name="bounds"/> parameter can be used to create or select complex brushes such as 
            gradient or tiled image brushes.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.C1FlexGridRenderer.GetBorderPen(C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)">
            <summary>
            Gets a <see cref="T:System.Drawing.Pen"/> object used to paint the cell borders.
            </summary>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that determines the type of cell being drawn.</param>
            <returns>A <see cref="T:System.Drawing.Pen"/> object used to paint the cell borders.</returns>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridRenderer.TracksSelection">
            <summary>
            Gets a value that determines whether this renderer tracks the selection to paint
            highlighted column and row headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridRenderer.TracksMouse">
            <summary>
            Gets a value that determines whether this renderer renders hot cells 
            differently than normal cells.
            </summary>
            <remarks>
            Hot cells are cells currently under the mouse. If a renderer tracks the mouse,
            then it will be called as the mouse moves over the grid.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.C1FlexGridRenderer.HeaderForeColor">
            <summary>
            Gets the foreground color of header cells in the normal state.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType">
            <summary>
            Represents the type of cell being rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.Normal">
            <summary>
            A normal scrollable cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.TopLeft">
            <summary>
            The top left fixed cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.ColumnHeader">
            <summary>
            A column header cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.ColumnHeaderSelected">
            <summary>
            A selected column header cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.ColumnHeaderHot">
            <summary>
            A column header cell currently under the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.ColumnHeaderSelectedHot">
            <summary>
            A selected column header cell currently under the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.RowHeader">
            <summary>
            A row header cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.RowHeaderSelected">
            <summary>
            A selected row header cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.RowHeaderHot">
            <summary>
            A row header cell currently under the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.RowHeaderSelectedHot">
            <summary>
            A selected row header cell currently under the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.Highlight">
            <summary>
            A selected normal cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType.Cursor">
            <summary>
            The cell that contains the cursor.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2007">
            <summary>
            Represents the base abstract class for Office2007 style renderers.
            </summary>
            <remarks>
            The easiest way to create a new high-quality renderer is to derive from
            this class and provide a constructor that initializes the 25 colors that
            define the renderer.
            </remarks>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007"/>.
            </summary>
            <param name="clrHighlight">Background color for highlighted cells.</param>
            <param name="clrTopLeftBorder">Color of the border around the top left fixed cell.</param>
            <param name="clrTopLeft">Color of the background for the top left fixed cell.</param>
            <param name="clrImg1">First color of the gradient background for the image in the top left fixed cell.</param>
            <param name="clrImg2">Second color of the gradient background for the image in the top left fixed cell.</param>
            <param name="clrCol1">First color of the gradient background for column headers.</param>
            <param name="clrCol2">Second color of the gradient background for column headers.</param>
            <param name="clrColBorder">Color of the border around column headers.</param>
            <param name="clrColSel1">First color of the gradient background for selected column headers.</param>
            <param name="clrColSel2">Second color of the gradient background for selected column headers.</param>
            <param name="clrSelBorder">Color of the border around selected column headers.</param>
            <param name="clrColHot1">First color of the gradient background for hot column headers.</param>
            <param name="clrColHot2">Second color of the gradient background for hot column headers.</param>
            <param name="clrHotBorder">Color of the border around hot column headers.</param>
            <param name="clrColSelHot1">First color of the gradient background for selected hot column headers.</param>
            <param name="clrColSelHot2">Second color of the gradient background for selected hot column headers.</param>
            <param name="clrSelHotBorder">Color of the border around hot selected column headers.</param>
            <param name="clrRow">Color of the background for row headers.</param>
            <param name="clrRowBorder">Color of the border around row headers.</param>
            <param name="clrRowSel">Color of the background for selected row headers.</param>
            <param name="clrRowSelBorder">Color of the border around selected row headers.</param>
            <param name="clrRowHot">Color of the background for hot row headers.</param>
            <param name="clrRowHotBorder">Color of the border around hot row headers.</param>
            <param name="clrRowSelHot">Color of the background for hot selected row headers.</param>
            <param name="clrRowSelHotBorder">Color of the border around selected hot row headers.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007.#ctor(System.Drawing.Color[])">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007"/> using 
            a specified color palette.
            </summary>
            <param name="p">Array with 25 colors to be used as a palette.</param>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007.GetBackgroundBrush(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType,System.Drawing.Rectangle)">
            <summary>
            Gets the background brush for a cell.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell.</param>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that describes the type of cell being rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> that defines the cell bounds.</param>
            <returns>A <see cref="T:System.Drawing.Brush"/> used to paint the cell.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007.GetBorderPen(C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)">
            <summary>
            Gets a pen used to paint the cell borders.
            </summary>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> that describes the type of cell being rendered.</param>
            <returns>A <see cref="T:System.Drawing.Pen"/> used to paint the cell borders.</returns>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)">
            <summary>
            Draws a single grid cell of a specific type.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell being drawn.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> that provides information about the cell being drawn.</param>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that determines the type of cell being drawn.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererOffice2007.Highlight">
            <summary>
            Gets or sets the color used to paint the background of highlighted cells.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererOffice2007.TracksMouse">
            <summary>
            Gets a value that determines whether this renderer renders hot cells 
            differently than normal cells.
            </summary>
            <remarks>
            Hot cells are cells currently under the mouse. If a renderer tracks the mouse,
            then it will be called as the mouse moves over the grid.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererOffice2007.TracksSelection">
            <summary>
            Gets a value that determines whether this renderer tracks the selection to paint
            highlighted column and row headers.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2007.BrushPenProvider">
            <summary>
            Class that provides a pen and a brush in order to paint cells
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2007Blue">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2007 Blue visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007Blue.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Blue"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2007Silver">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2007 Silver visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007Silver.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Silver"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2007Black">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2007 Black visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2007Black.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Black"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2010Blue">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2010 Blue visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2010Blue.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Blue"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2010Silver">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2010 Silver visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2010Silver.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Silver"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererOffice2010Black">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the Office2010 Black visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererOffice2010Black.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1FlexGrid.GridRendererOffice2007Black"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererOffice2010Black.HeaderForeColor">
            <summary>
            Gets the foreground color of header cells in the normal state.
            </summary>
        </member>
        <member name="T:C1.Win.C1FlexGrid.GridRendererSystem">
            <summary>
            <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer"/> that implements the System visual style.
            </summary>
        </member>
        <member name="M:C1.Win.C1FlexGrid.GridRendererSystem.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGridBase,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs,C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType)">
            <summary>
            Draws a single grid cell of a specific type.
            </summary>
            <param name="flex"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridBase"/> that contains the cell being drawn.</param>
            <param name="e"><see cref="T:C1.Win.C1FlexGrid.OwnerDrawCellEventArgs"/> that provides information about the cell being drawn.</param>
            <param name="cellType"><see cref="T:C1.Win.C1FlexGrid.C1FlexGridRenderer.CellType"/> value that determines the type of cell being drawn.</param>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererSystem.TracksMouse">
            <summary>
            Gets a value that determines whether this renderer renders hot cells 
            differently than normal cells.
            </summary>
            <remarks>
            Hot cells are cells currently under the mouse. If a renderer tracks the mouse,
            then it will be called as the mouse moves over the grid.
            </remarks>
        </member>
        <member name="P:C1.Win.C1FlexGrid.GridRendererSystem.TracksSelection">
            <summary>
            Gets a value that determines whether this renderer tracks the selection to paint
            highlighted column and row headers.
            </summary>
        </member>
    </members>
</doc>
